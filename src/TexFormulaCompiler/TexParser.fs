// Implementation file for parser generated by fsyacc
module TexParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "TexParser.fsy"

open TexAst
open System
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing

let mutable domainSpecificAnalyzer = Unchecked.defaultof<DomainSpecificContext -> obj>

let analyzeDomainSpecificLanguage token = domainSpecificAnalyzer token

let analyzeDomainSpecificSource token startPos = 
    try
      analyzeDomainSpecificLanguage token
    with
      | DomainSpecificParseException(fString, pos) -> failwithf "%s at pos: %u" fString (startPos)

let parse_error_rich = Some (fun (ctxt: ParseErrorContext<_>) -> 
   System.Console.WriteLine("A"))

let analyzeDomainSpecificSingleSource src pos = 
    analyzeDomainSpecificSource (SRefValueSrc(src)) pos |> SRefValue

let analyzeDomainSpecificSources sources = 
    let rec analyzeDomainSpecificSourcesInternal sources state = 
        match sources with
          | [] -> state
          | (src, pos)::t -> analyzeDomainSpecificSourcesInternal t ((analyzeDomainSpecificSource (MRefValueSrc(src)) pos)::state)
        
    analyzeDomainSpecificSourcesInternal sources [] 
    |> List.rev 
    |> MRefValue


# 40 "TexParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | PI
  | EULERNUM
  | FRAC
  | SQRT
  | SUM
  | PROD
  | INTEGRAL
  | TIMES
  | INFTY
  | TO
  | LIM
  | BMOD
  | TEXT
  | SIN
  | COS
  | PLUS
  | SUB
  | MUL
  | DIV
  | LSQBRACE
  | RSQBRACE
  | LPAREN
  | RPAREN
  | LCURLY
  | RCURLY
  | EXCL
  | CARET
  | EQ
  | UNDERSCORE
  | SLASH
  | COMMA
  | LSREFBRACKET
  | RSREFBRACKET
  | LMREFBRACKET
  | RMREFBRACKET
  | MREFVAL of ((string*int) list)
  | SREFVAL of (string*int)
  | ID of (string)
  | DIFF of (string)
  | FLOAT of (float)
  | INT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_PI
    | TOKEN_EULERNUM
    | TOKEN_FRAC
    | TOKEN_SQRT
    | TOKEN_SUM
    | TOKEN_PROD
    | TOKEN_INTEGRAL
    | TOKEN_TIMES
    | TOKEN_INFTY
    | TOKEN_TO
    | TOKEN_LIM
    | TOKEN_BMOD
    | TOKEN_TEXT
    | TOKEN_SIN
    | TOKEN_COS
    | TOKEN_PLUS
    | TOKEN_SUB
    | TOKEN_MUL
    | TOKEN_DIV
    | TOKEN_LSQBRACE
    | TOKEN_RSQBRACE
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LCURLY
    | TOKEN_RCURLY
    | TOKEN_EXCL
    | TOKEN_CARET
    | TOKEN_EQ
    | TOKEN_UNDERSCORE
    | TOKEN_SLASH
    | TOKEN_COMMA
    | TOKEN_LSREFBRACKET
    | TOKEN_RSREFBRACKET
    | TOKEN_LMREFBRACKET
    | TOKEN_RMREFBRACKET
    | TOKEN_MREFVAL
    | TOKEN_SREFVAL
    | TOKEN_ID
    | TOKEN_DIFF
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_expression
    | NONTERM_constant
    | NONTERM_sum
    | NONTERM_prod
    | NONTERM_fact
    | NONTERM_frac
    | NONTERM_power
    | NONTERM_integral
    | NONTERM_limit
    | NONTERM_refPattern
    | NONTERM_trigonometry
    | NONTERM_refValue
    | NONTERM_highPriorityFunction
    | NONTERM_binaryExpression
    | NONTERM_argumentSet

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | PI  -> 1 
  | EULERNUM  -> 2 
  | FRAC  -> 3 
  | SQRT  -> 4 
  | SUM  -> 5 
  | PROD  -> 6 
  | INTEGRAL  -> 7 
  | TIMES  -> 8 
  | INFTY  -> 9 
  | TO  -> 10 
  | LIM  -> 11 
  | BMOD  -> 12 
  | TEXT  -> 13 
  | SIN  -> 14 
  | COS  -> 15 
  | PLUS  -> 16 
  | SUB  -> 17 
  | MUL  -> 18 
  | DIV  -> 19 
  | LSQBRACE  -> 20 
  | RSQBRACE  -> 21 
  | LPAREN  -> 22 
  | RPAREN  -> 23 
  | LCURLY  -> 24 
  | RCURLY  -> 25 
  | EXCL  -> 26 
  | CARET  -> 27 
  | EQ  -> 28 
  | UNDERSCORE  -> 29 
  | SLASH  -> 30 
  | COMMA  -> 31 
  | LSREFBRACKET  -> 32 
  | RSREFBRACKET  -> 33 
  | LMREFBRACKET  -> 34 
  | RMREFBRACKET  -> 35 
  | MREFVAL _ -> 36 
  | SREFVAL _ -> 37 
  | ID _ -> 38 
  | DIFF _ -> 39 
  | FLOAT _ -> 40 
  | INT _ -> 41 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_PI 
  | 2 -> TOKEN_EULERNUM 
  | 3 -> TOKEN_FRAC 
  | 4 -> TOKEN_SQRT 
  | 5 -> TOKEN_SUM 
  | 6 -> TOKEN_PROD 
  | 7 -> TOKEN_INTEGRAL 
  | 8 -> TOKEN_TIMES 
  | 9 -> TOKEN_INFTY 
  | 10 -> TOKEN_TO 
  | 11 -> TOKEN_LIM 
  | 12 -> TOKEN_BMOD 
  | 13 -> TOKEN_TEXT 
  | 14 -> TOKEN_SIN 
  | 15 -> TOKEN_COS 
  | 16 -> TOKEN_PLUS 
  | 17 -> TOKEN_SUB 
  | 18 -> TOKEN_MUL 
  | 19 -> TOKEN_DIV 
  | 20 -> TOKEN_LSQBRACE 
  | 21 -> TOKEN_RSQBRACE 
  | 22 -> TOKEN_LPAREN 
  | 23 -> TOKEN_RPAREN 
  | 24 -> TOKEN_LCURLY 
  | 25 -> TOKEN_RCURLY 
  | 26 -> TOKEN_EXCL 
  | 27 -> TOKEN_CARET 
  | 28 -> TOKEN_EQ 
  | 29 -> TOKEN_UNDERSCORE 
  | 30 -> TOKEN_SLASH 
  | 31 -> TOKEN_COMMA 
  | 32 -> TOKEN_LSREFBRACKET 
  | 33 -> TOKEN_RSREFBRACKET 
  | 34 -> TOKEN_LMREFBRACKET 
  | 35 -> TOKEN_RMREFBRACKET 
  | 36 -> TOKEN_MREFVAL 
  | 37 -> TOKEN_SREFVAL 
  | 38 -> TOKEN_ID 
  | 39 -> TOKEN_DIFF 
  | 40 -> TOKEN_FLOAT 
  | 41 -> TOKEN_INT 
  | 44 -> TOKEN_end_of_input
  | 42 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_start 
    | 3 -> NONTERM_expression 
    | 4 -> NONTERM_expression 
    | 5 -> NONTERM_constant 
    | 6 -> NONTERM_constant 
    | 7 -> NONTERM_sum 
    | 8 -> NONTERM_prod 
    | 9 -> NONTERM_fact 
    | 10 -> NONTERM_frac 
    | 11 -> NONTERM_power 
    | 12 -> NONTERM_integral 
    | 13 -> NONTERM_integral 
    | 14 -> NONTERM_limit 
    | 15 -> NONTERM_refPattern 
    | 16 -> NONTERM_refPattern 
    | 17 -> NONTERM_trigonometry 
    | 18 -> NONTERM_trigonometry 
    | 19 -> NONTERM_trigonometry 
    | 20 -> NONTERM_trigonometry 
    | 21 -> NONTERM_refValue 
    | 22 -> NONTERM_refValue 
    | 23 -> NONTERM_highPriorityFunction 
    | 24 -> NONTERM_highPriorityFunction 
    | 25 -> NONTERM_highPriorityFunction 
    | 26 -> NONTERM_highPriorityFunction 
    | 27 -> NONTERM_highPriorityFunction 
    | 28 -> NONTERM_highPriorityFunction 
    | 29 -> NONTERM_highPriorityFunction 
    | 30 -> NONTERM_highPriorityFunction 
    | 31 -> NONTERM_highPriorityFunction 
    | 32 -> NONTERM_highPriorityFunction 
    | 33 -> NONTERM_highPriorityFunction 
    | 34 -> NONTERM_highPriorityFunction 
    | 35 -> NONTERM_highPriorityFunction 
    | 36 -> NONTERM_highPriorityFunction 
    | 37 -> NONTERM_highPriorityFunction 
    | 38 -> NONTERM_binaryExpression 
    | 39 -> NONTERM_binaryExpression 
    | 40 -> NONTERM_binaryExpression 
    | 41 -> NONTERM_binaryExpression 
    | 42 -> NONTERM_binaryExpression 
    | 43 -> NONTERM_argumentSet 
    | 44 -> NONTERM_argumentSet 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 44 
let _fsyacc_tagOfErrorTerminal = 42

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | PI  -> "PI" 
  | EULERNUM  -> "EULERNUM" 
  | FRAC  -> "FRAC" 
  | SQRT  -> "SQRT" 
  | SUM  -> "SUM" 
  | PROD  -> "PROD" 
  | INTEGRAL  -> "INTEGRAL" 
  | TIMES  -> "TIMES" 
  | INFTY  -> "INFTY" 
  | TO  -> "TO" 
  | LIM  -> "LIM" 
  | BMOD  -> "BMOD" 
  | TEXT  -> "TEXT" 
  | SIN  -> "SIN" 
  | COS  -> "COS" 
  | PLUS  -> "PLUS" 
  | SUB  -> "SUB" 
  | MUL  -> "MUL" 
  | DIV  -> "DIV" 
  | LSQBRACE  -> "LSQBRACE" 
  | RSQBRACE  -> "RSQBRACE" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | LCURLY  -> "LCURLY" 
  | RCURLY  -> "RCURLY" 
  | EXCL  -> "EXCL" 
  | CARET  -> "CARET" 
  | EQ  -> "EQ" 
  | UNDERSCORE  -> "UNDERSCORE" 
  | SLASH  -> "SLASH" 
  | COMMA  -> "COMMA" 
  | LSREFBRACKET  -> "LSREFBRACKET" 
  | RSREFBRACKET  -> "RSREFBRACKET" 
  | LMREFBRACKET  -> "LMREFBRACKET" 
  | RMREFBRACKET  -> "RMREFBRACKET" 
  | MREFVAL _ -> "MREFVAL" 
  | SREFVAL _ -> "SREFVAL" 
  | ID _ -> "ID" 
  | DIFF _ -> "DIFF" 
  | FLOAT _ -> "FLOAT" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | PI  -> (null : System.Object) 
  | EULERNUM  -> (null : System.Object) 
  | FRAC  -> (null : System.Object) 
  | SQRT  -> (null : System.Object) 
  | SUM  -> (null : System.Object) 
  | PROD  -> (null : System.Object) 
  | INTEGRAL  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | INFTY  -> (null : System.Object) 
  | TO  -> (null : System.Object) 
  | LIM  -> (null : System.Object) 
  | BMOD  -> (null : System.Object) 
  | TEXT  -> (null : System.Object) 
  | SIN  -> (null : System.Object) 
  | COS  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | SUB  -> (null : System.Object) 
  | MUL  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | LSQBRACE  -> (null : System.Object) 
  | RSQBRACE  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LCURLY  -> (null : System.Object) 
  | RCURLY  -> (null : System.Object) 
  | EXCL  -> (null : System.Object) 
  | CARET  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | UNDERSCORE  -> (null : System.Object) 
  | SLASH  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | LSREFBRACKET  -> (null : System.Object) 
  | RSREFBRACKET  -> (null : System.Object) 
  | LMREFBRACKET  -> (null : System.Object) 
  | RMREFBRACKET  -> (null : System.Object) 
  | MREFVAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SREFVAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DIFF _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 25us; 65535us; 0us; 2us; 11us; 109us; 15us; 109us; 20us; 21us; 23us; 24us; 26us; 27us; 30us; 31us; 35us; 36us; 39us; 40us; 42us; 43us; 52us; 53us; 55us; 56us; 64us; 65us; 68us; 69us; 71us; 72us; 75us; 76us; 79us; 80us; 82us; 83us; 90us; 91us; 111us; 104us; 112us; 105us; 113us; 106us; 114us; 107us; 115us; 108us; 116us; 110us; 25us; 65535us; 0us; 98us; 11us; 98us; 15us; 98us; 20us; 98us; 23us; 98us; 26us; 98us; 30us; 98us; 35us; 98us; 39us; 98us; 42us; 98us; 52us; 98us; 55us; 98us; 64us; 98us; 68us; 98us; 71us; 98us; 75us; 98us; 79us; 98us; 82us; 98us; 90us; 98us; 111us; 98us; 112us; 98us; 113us; 98us; 114us; 98us; 115us; 98us; 116us; 98us; 25us; 65535us; 0us; 94us; 11us; 94us; 15us; 94us; 20us; 94us; 23us; 94us; 26us; 94us; 30us; 94us; 35us; 94us; 39us; 94us; 42us; 94us; 52us; 94us; 55us; 94us; 64us; 94us; 68us; 94us; 71us; 94us; 75us; 94us; 79us; 94us; 82us; 94us; 90us; 94us; 111us; 94us; 112us; 94us; 113us; 94us; 114us; 94us; 115us; 94us; 116us; 94us; 25us; 65535us; 0us; 95us; 11us; 95us; 15us; 95us; 20us; 95us; 23us; 95us; 26us; 95us; 30us; 95us; 35us; 95us; 39us; 95us; 42us; 95us; 52us; 95us; 55us; 95us; 64us; 95us; 68us; 95us; 71us; 95us; 75us; 95us; 79us; 95us; 82us; 95us; 90us; 95us; 111us; 95us; 112us; 95us; 113us; 95us; 114us; 95us; 115us; 95us; 116us; 95us; 25us; 65535us; 0us; 96us; 11us; 96us; 15us; 96us; 20us; 96us; 23us; 96us; 26us; 96us; 30us; 96us; 35us; 96us; 39us; 96us; 42us; 96us; 52us; 96us; 55us; 96us; 64us; 96us; 68us; 96us; 71us; 96us; 75us; 96us; 79us; 96us; 82us; 96us; 90us; 96us; 111us; 96us; 112us; 96us; 113us; 96us; 114us; 96us; 115us; 96us; 116us; 96us; 25us; 65535us; 0us; 100us; 11us; 100us; 15us; 100us; 20us; 100us; 23us; 100us; 26us; 100us; 30us; 100us; 35us; 100us; 39us; 100us; 42us; 100us; 52us; 100us; 55us; 100us; 64us; 100us; 68us; 100us; 71us; 100us; 75us; 100us; 79us; 100us; 82us; 100us; 90us; 100us; 111us; 100us; 112us; 100us; 113us; 100us; 114us; 100us; 115us; 100us; 116us; 100us; 25us; 65535us; 0us; 99us; 11us; 99us; 15us; 99us; 20us; 99us; 23us; 99us; 26us; 99us; 30us; 99us; 35us; 99us; 39us; 99us; 42us; 99us; 52us; 99us; 55us; 99us; 64us; 99us; 68us; 99us; 71us; 99us; 75us; 99us; 79us; 99us; 82us; 99us; 90us; 99us; 111us; 99us; 112us; 99us; 113us; 99us; 114us; 99us; 115us; 99us; 116us; 99us; 25us; 65535us; 0us; 97us; 11us; 97us; 15us; 97us; 20us; 97us; 23us; 97us; 26us; 97us; 30us; 97us; 35us; 97us; 39us; 97us; 42us; 97us; 52us; 97us; 55us; 97us; 64us; 97us; 68us; 97us; 71us; 97us; 75us; 97us; 79us; 97us; 82us; 97us; 90us; 97us; 111us; 97us; 112us; 97us; 113us; 97us; 114us; 97us; 115us; 97us; 116us; 97us; 25us; 65535us; 0us; 101us; 11us; 101us; 15us; 101us; 20us; 101us; 23us; 101us; 26us; 101us; 30us; 101us; 35us; 101us; 39us; 101us; 42us; 101us; 52us; 101us; 55us; 101us; 64us; 101us; 68us; 101us; 71us; 101us; 75us; 101us; 79us; 101us; 82us; 101us; 90us; 101us; 111us; 101us; 112us; 101us; 113us; 101us; 114us; 101us; 115us; 101us; 116us; 101us; 25us; 65535us; 0us; 102us; 11us; 102us; 15us; 102us; 20us; 102us; 23us; 102us; 26us; 102us; 30us; 102us; 35us; 102us; 39us; 102us; 42us; 102us; 52us; 102us; 55us; 102us; 64us; 102us; 68us; 102us; 71us; 102us; 75us; 102us; 79us; 102us; 82us; 102us; 90us; 102us; 111us; 102us; 112us; 102us; 113us; 102us; 114us; 102us; 115us; 102us; 116us; 102us; 25us; 65535us; 0us; 93us; 11us; 93us; 15us; 93us; 20us; 93us; 23us; 93us; 26us; 93us; 30us; 93us; 35us; 93us; 39us; 93us; 42us; 93us; 52us; 93us; 55us; 93us; 64us; 93us; 68us; 93us; 71us; 93us; 75us; 93us; 79us; 93us; 82us; 93us; 90us; 93us; 111us; 93us; 112us; 93us; 113us; 93us; 114us; 93us; 115us; 93us; 116us; 93us; 26us; 65535us; 0us; 58us; 11us; 58us; 15us; 58us; 20us; 58us; 23us; 58us; 26us; 58us; 30us; 58us; 35us; 58us; 39us; 58us; 42us; 58us; 52us; 58us; 55us; 58us; 60us; 61us; 64us; 58us; 68us; 58us; 71us; 58us; 75us; 58us; 79us; 58us; 82us; 58us; 90us; 58us; 111us; 58us; 112us; 58us; 113us; 58us; 114us; 58us; 115us; 58us; 116us; 58us; 25us; 65535us; 0us; 6us; 11us; 6us; 15us; 6us; 20us; 6us; 23us; 6us; 26us; 6us; 30us; 6us; 35us; 6us; 39us; 6us; 42us; 6us; 52us; 6us; 55us; 6us; 64us; 6us; 68us; 6us; 71us; 6us; 75us; 6us; 79us; 6us; 82us; 6us; 90us; 6us; 111us; 6us; 112us; 6us; 113us; 6us; 114us; 6us; 115us; 6us; 116us; 6us; 25us; 65535us; 0us; 5us; 11us; 5us; 15us; 5us; 20us; 5us; 23us; 5us; 26us; 5us; 30us; 5us; 35us; 5us; 39us; 5us; 42us; 5us; 52us; 5us; 55us; 5us; 64us; 5us; 68us; 5us; 71us; 5us; 75us; 5us; 79us; 5us; 82us; 5us; 90us; 5us; 111us; 5us; 112us; 5us; 113us; 5us; 114us; 5us; 115us; 5us; 116us; 5us; 2us; 65535us; 11us; 12us; 15us; 16us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 29us; 55us; 81us; 107us; 133us; 159us; 185us; 211us; 237us; 263us; 289us; 316us; 342us; 368us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 6us; 1us; 38us; 39us; 40us; 41us; 42us; 1us; 1us; 1us; 2us; 1us; 3us; 2us; 4us; 9us; 1us; 5us; 1us; 6us; 12us; 7us; 8us; 10us; 12us; 13us; 14us; 16us; 17us; 18us; 19us; 20us; 25us; 1us; 7us; 1us; 7us; 2us; 7us; 44us; 1us; 7us; 1us; 8us; 1us; 8us; 2us; 8us; 44us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 10us; 6us; 10us; 38us; 39us; 40us; 41us; 42us; 1us; 10us; 1us; 10us; 6us; 10us; 38us; 39us; 40us; 41us; 42us; 1us; 10us; 1us; 11us; 6us; 11us; 38us; 39us; 40us; 41us; 42us; 1us; 11us; 1us; 11us; 1us; 11us; 6us; 11us; 38us; 39us; 40us; 41us; 42us; 1us; 11us; 2us; 12us; 13us; 2us; 12us; 13us; 2us; 12us; 13us; 7us; 12us; 13us; 38us; 39us; 40us; 41us; 42us; 2us; 12us; 13us; 2us; 12us; 13us; 2us; 12us; 13us; 7us; 12us; 13us; 38us; 39us; 40us; 41us; 42us; 2us; 12us; 13us; 2us; 12us; 13us; 7us; 12us; 13us; 38us; 39us; 40us; 41us; 42us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 14us; 6us; 14us; 38us; 39us; 40us; 41us; 42us; 1us; 14us; 1us; 14us; 6us; 14us; 38us; 39us; 40us; 41us; 42us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 16us; 2us; 17us; 18us; 1us; 17us; 6us; 17us; 38us; 39us; 40us; 41us; 42us; 1us; 17us; 1us; 18us; 1us; 18us; 6us; 18us; 38us; 39us; 40us; 41us; 42us; 1us; 18us; 1us; 18us; 6us; 18us; 38us; 39us; 40us; 41us; 42us; 1us; 18us; 2us; 19us; 20us; 1us; 19us; 6us; 19us; 38us; 39us; 40us; 41us; 42us; 1us; 19us; 1us; 20us; 1us; 20us; 6us; 20us; 38us; 39us; 40us; 41us; 42us; 1us; 20us; 1us; 20us; 6us; 20us; 38us; 39us; 40us; 41us; 42us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 26us; 6us; 26us; 38us; 39us; 40us; 41us; 42us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 33us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 37us; 6us; 38us; 38us; 39us; 40us; 41us; 42us; 6us; 38us; 39us; 39us; 40us; 41us; 42us; 6us; 38us; 39us; 40us; 40us; 41us; 42us; 6us; 38us; 39us; 40us; 41us; 41us; 42us; 6us; 38us; 39us; 40us; 41us; 42us; 42us; 6us; 38us; 39us; 40us; 41us; 42us; 43us; 6us; 38us; 39us; 40us; 41us; 42us; 44us; 1us; 38us; 1us; 39us; 1us; 40us; 1us; 41us; 1us; 42us; 1us; 44us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 11us; 13us; 15us; 17us; 20us; 22us; 24us; 37us; 39us; 41us; 44us; 46us; 48us; 50us; 53us; 55us; 57us; 59us; 61us; 68us; 70us; 72us; 79us; 81us; 83us; 90us; 92us; 94us; 96us; 103us; 105us; 108us; 111us; 114us; 122us; 125us; 128us; 131us; 139us; 142us; 145us; 153us; 155us; 157us; 159us; 161us; 163us; 165us; 167us; 169us; 171us; 178us; 180us; 182us; 189us; 191us; 193us; 195us; 197us; 199us; 201us; 204us; 206us; 213us; 215us; 217us; 219us; 226us; 228us; 230us; 237us; 239us; 242us; 244us; 251us; 253us; 255us; 257us; 264us; 266us; 268us; 275us; 277us; 279us; 281us; 283us; 285us; 287us; 289us; 296us; 298us; 300us; 302us; 304us; 306us; 308us; 310us; 312us; 314us; 316us; 318us; 320us; 327us; 334us; 341us; 348us; 355us; 362us; 369us; 371us; 373us; 375us; 377us; 379us; |]
let _fsyacc_action_rows = 117
let _fsyacc_actionTableElements = [|11us; 32768us; 1us; 7us; 2us; 8us; 22us; 90us; 24us; 26us; 30us; 9us; 36us; 86us; 37us; 85us; 38us; 103us; 40us; 88us; 41us; 87us; 42us; 4us; 0us; 49152us; 6us; 32768us; 0us; 3us; 12us; 115us; 16us; 111us; 17us; 112us; 18us; 113us; 19us; 114us; 0us; 16385us; 0us; 16386us; 0us; 16387us; 1us; 16388us; 26us; 18us; 0us; 16389us; 0us; 16390us; 9us; 32768us; 3us; 19us; 5us; 10us; 6us; 14us; 7us; 33us; 9us; 89us; 11us; 48us; 13us; 59us; 14us; 63us; 15us; 74us; 1us; 32768us; 24us; 11us; 10us; 32768us; 1us; 7us; 2us; 8us; 22us; 90us; 24us; 26us; 30us; 9us; 36us; 86us; 37us; 85us; 38us; 103us; 40us; 88us; 41us; 87us; 2us; 32768us; 25us; 13us; 31us; 116us; 0us; 16391us; 1us; 32768us; 24us; 15us; 10us; 32768us; 1us; 7us; 2us; 8us; 22us; 90us; 24us; 26us; 30us; 9us; 36us; 86us; 37us; 85us; 38us; 103us; 40us; 88us; 41us; 87us; 2us; 32768us; 25us; 17us; 31us; 116us; 0us; 16392us; 0us; 16393us; 1us; 32768us; 24us; 20us; 10us; 32768us; 1us; 7us; 2us; 8us; 22us; 90us; 24us; 26us; 30us; 9us; 36us; 86us; 37us; 85us; 38us; 103us; 40us; 88us; 41us; 87us; 6us; 32768us; 12us; 115us; 16us; 111us; 17us; 112us; 18us; 113us; 19us; 114us; 25us; 22us; 1us; 32768us; 24us; 23us; 10us; 32768us; 1us; 7us; 2us; 8us; 22us; 90us; 24us; 26us; 30us; 9us; 36us; 86us; 37us; 85us; 38us; 103us; 40us; 88us; 41us; 87us; 6us; 32768us; 12us; 115us; 16us; 111us; 17us; 112us; 18us; 113us; 19us; 114us; 25us; 25us; 0us; 16394us; 10us; 32768us; 1us; 7us; 2us; 8us; 22us; 90us; 24us; 26us; 30us; 9us; 36us; 86us; 37us; 85us; 38us; 103us; 40us; 88us; 41us; 87us; 6us; 32768us; 12us; 115us; 16us; 111us; 17us; 112us; 18us; 113us; 19us; 114us; 25us; 28us; 1us; 32768us; 27us; 29us; 1us; 32768us; 24us; 30us; 10us; 32768us; 1us; 7us; 2us; 8us; 22us; 90us; 24us; 26us; 30us; 9us; 36us; 86us; 37us; 85us; 38us; 103us; 40us; 88us; 41us; 87us; 6us; 32768us; 12us; 115us; 16us; 111us; 17us; 112us; 18us; 113us; 19us; 114us; 25us; 32us; 0us; 16395us; 1us; 32768us; 29us; 34us; 1us; 32768us; 24us; 35us; 10us; 32768us; 1us; 7us; 2us; 8us; 22us; 90us; 24us; 26us; 30us; 9us; 36us; 86us; 37us; 85us; 38us; 103us; 40us; 88us; 41us; 87us; 6us; 32768us; 12us; 115us; 16us; 111us; 17us; 112us; 18us; 113us; 19us; 114us; 25us; 37us; 1us; 32768us; 27us; 38us; 1us; 32768us; 24us; 39us; 10us; 32768us; 1us; 7us; 2us; 8us; 22us; 90us; 24us; 26us; 30us; 9us; 36us; 86us; 37us; 85us; 38us; 103us; 40us; 88us; 41us; 87us; 6us; 32768us; 12us; 115us; 16us; 111us; 17us; 112us; 18us; 113us; 19us; 114us; 25us; 41us; 1us; 32768us; 24us; 42us; 10us; 32768us; 1us; 7us; 2us; 8us; 22us; 90us; 24us; 26us; 30us; 9us; 36us; 86us; 37us; 85us; 38us; 103us; 40us; 88us; 41us; 87us; 7us; 32768us; 12us; 115us; 16us; 111us; 17us; 112us; 18us; 113us; 19us; 114us; 25us; 44us; 39us; 46us; 1us; 32768us; 39us; 45us; 0us; 16396us; 1us; 32768us; 25us; 47us; 0us; 16397us; 1us; 32768us; 29us; 49us; 1us; 32768us; 24us; 50us; 1us; 32768us; 38us; 51us; 1us; 32768us; 10us; 52us; 10us; 32768us; 1us; 7us; 2us; 8us; 22us; 90us; 24us; 26us; 30us; 9us; 36us; 86us; 37us; 85us; 38us; 103us; 40us; 88us; 41us; 87us; 6us; 32768us; 12us; 115us; 16us; 111us; 17us; 112us; 18us; 113us; 19us; 114us; 25us; 54us; 1us; 32768us; 24us; 55us; 10us; 32768us; 1us; 7us; 2us; 8us; 22us; 90us; 24us; 26us; 30us; 9us; 36us; 86us; 37us; 85us; 38us; 103us; 40us; 88us; 41us; 87us; 6us; 32768us; 12us; 115us; 16us; 111us; 17us; 112us; 18us; 113us; 19us; 114us; 25us; 57us; 0us; 16398us; 0us; 16399us; 1us; 32768us; 24us; 60us; 2us; 32768us; 36us; 86us; 37us; 85us; 1us; 32768us; 25us; 62us; 0us; 16400us; 2us; 32768us; 24us; 64us; 27us; 67us; 10us; 32768us; 1us; 7us; 2us; 8us; 22us; 90us; 24us; 26us; 30us; 9us; 36us; 86us; 37us; 85us; 38us; 103us; 40us; 88us; 41us; 87us; 6us; 32768us; 12us; 115us; 16us; 111us; 17us; 112us; 18us; 113us; 19us; 114us; 25us; 66us; 0us; 16401us; 1us; 32768us; 24us; 68us; 10us; 32768us; 1us; 7us; 2us; 8us; 22us; 90us; 24us; 26us; 30us; 9us; 36us; 86us; 37us; 85us; 38us; 103us; 40us; 88us; 41us; 87us; 6us; 32768us; 12us; 115us; 16us; 111us; 17us; 112us; 18us; 113us; 19us; 114us; 25us; 70us; 1us; 32768us; 24us; 71us; 10us; 32768us; 1us; 7us; 2us; 8us; 22us; 90us; 24us; 26us; 30us; 9us; 36us; 86us; 37us; 85us; 38us; 103us; 40us; 88us; 41us; 87us; 6us; 32768us; 12us; 115us; 16us; 111us; 17us; 112us; 18us; 113us; 19us; 114us; 25us; 73us; 0us; 16402us; 2us; 32768us; 24us; 75us; 27us; 78us; 10us; 32768us; 1us; 7us; 2us; 8us; 22us; 90us; 24us; 26us; 30us; 9us; 36us; 86us; 37us; 85us; 38us; 103us; 40us; 88us; 41us; 87us; 6us; 32768us; 12us; 115us; 16us; 111us; 17us; 112us; 18us; 113us; 19us; 114us; 25us; 77us; 0us; 16403us; 1us; 32768us; 24us; 79us; 10us; 32768us; 1us; 7us; 2us; 8us; 22us; 90us; 24us; 26us; 30us; 9us; 36us; 86us; 37us; 85us; 38us; 103us; 40us; 88us; 41us; 87us; 6us; 32768us; 12us; 115us; 16us; 111us; 17us; 112us; 18us; 113us; 19us; 114us; 25us; 81us; 1us; 32768us; 24us; 82us; 10us; 32768us; 1us; 7us; 2us; 8us; 22us; 90us; 24us; 26us; 30us; 9us; 36us; 86us; 37us; 85us; 38us; 103us; 40us; 88us; 41us; 87us; 6us; 32768us; 12us; 115us; 16us; 111us; 17us; 112us; 18us; 113us; 19us; 114us; 25us; 84us; 0us; 16404us; 0us; 16405us; 0us; 16406us; 0us; 16407us; 0us; 16408us; 0us; 16409us; 10us; 32768us; 1us; 7us; 2us; 8us; 22us; 90us; 24us; 26us; 30us; 9us; 36us; 86us; 37us; 85us; 38us; 103us; 40us; 88us; 41us; 87us; 6us; 32768us; 12us; 115us; 16us; 111us; 17us; 112us; 18us; 113us; 19us; 114us; 23us; 92us; 0us; 16410us; 0us; 16411us; 0us; 16412us; 0us; 16413us; 0us; 16414us; 0us; 16415us; 0us; 16416us; 0us; 16417us; 0us; 16418us; 0us; 16419us; 0us; 16420us; 0us; 16421us; 3us; 16422us; 12us; 115us; 18us; 113us; 19us; 114us; 3us; 16423us; 12us; 115us; 18us; 113us; 19us; 114us; 0us; 16424us; 0us; 16425us; 0us; 16426us; 5us; 16427us; 12us; 115us; 16us; 111us; 17us; 112us; 18us; 113us; 19us; 114us; 5us; 16428us; 12us; 115us; 16us; 111us; 17us; 112us; 18us; 113us; 19us; 114us; 10us; 32768us; 1us; 7us; 2us; 8us; 22us; 90us; 24us; 26us; 30us; 9us; 36us; 86us; 37us; 85us; 38us; 103us; 40us; 88us; 41us; 87us; 10us; 32768us; 1us; 7us; 2us; 8us; 22us; 90us; 24us; 26us; 30us; 9us; 36us; 86us; 37us; 85us; 38us; 103us; 40us; 88us; 41us; 87us; 10us; 32768us; 1us; 7us; 2us; 8us; 22us; 90us; 24us; 26us; 30us; 9us; 36us; 86us; 37us; 85us; 38us; 103us; 40us; 88us; 41us; 87us; 10us; 32768us; 1us; 7us; 2us; 8us; 22us; 90us; 24us; 26us; 30us; 9us; 36us; 86us; 37us; 85us; 38us; 103us; 40us; 88us; 41us; 87us; 10us; 32768us; 1us; 7us; 2us; 8us; 22us; 90us; 24us; 26us; 30us; 9us; 36us; 86us; 37us; 85us; 38us; 103us; 40us; 88us; 41us; 87us; 10us; 32768us; 1us; 7us; 2us; 8us; 22us; 90us; 24us; 26us; 30us; 9us; 36us; 86us; 37us; 85us; 38us; 103us; 40us; 88us; 41us; 87us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 12us; 13us; 20us; 21us; 22us; 23us; 25us; 26us; 27us; 37us; 39us; 50us; 53us; 54us; 56us; 67us; 70us; 71us; 72us; 74us; 85us; 92us; 94us; 105us; 112us; 113us; 124us; 131us; 133us; 135us; 146us; 153us; 154us; 156us; 158us; 169us; 176us; 178us; 180us; 191us; 198us; 200us; 211us; 219us; 221us; 222us; 224us; 225us; 227us; 229us; 231us; 233us; 244us; 251us; 253us; 264us; 271us; 272us; 273us; 275us; 278us; 280us; 281us; 284us; 295us; 302us; 303us; 305us; 316us; 323us; 325us; 336us; 343us; 344us; 347us; 358us; 365us; 366us; 368us; 379us; 386us; 388us; 399us; 406us; 407us; 408us; 409us; 410us; 411us; 412us; 423us; 430us; 431us; 432us; 433us; 434us; 435us; 436us; 437us; 438us; 439us; 440us; 441us; 442us; 446us; 450us; 451us; 452us; 453us; 459us; 465us; 476us; 487us; 498us; 509us; 520us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 1us; 1us; 1us; 1us; 5us; 5us; 2us; 8us; 7us; 14us; 14us; 11us; 1us; 5us; 5us; 9us; 5us; 9us; 1us; 1us; 1us; 1us; 2us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 3us; 3us; 3us; 3us; 1us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 1us; 2us; 2us; 3us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 9us; 10us; 11us; 11us; 12us; 12us; 12us; 12us; 13us; 13us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 15us; 15us; 15us; 15us; 15us; 16us; 16us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 16387us; 65535us; 16389us; 16390us; 65535us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 16392us; 16393us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16394us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16395us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16396us; 65535us; 16397us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16398us; 16399us; 65535us; 65535us; 65535us; 16400us; 65535us; 65535us; 65535us; 16401us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16402us; 65535us; 65535us; 65535us; 16403us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16404us; 16405us; 16406us; 16407us; 16408us; 16409us; 65535us; 65535us; 16410us; 16411us; 16412us; 16413us; 16414us; 16415us; 16416us; 16417us; 16418us; 16419us; 16420us; 16421us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; |]
let _fsyacc_reductions ()  =    [| 
# 401 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : TexAst.Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 410 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "TexParser.fsy"
                                         _1 
                   )
# 58 "TexParser.fsy"
                 : TexAst.Expr));
# 421 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "TexParser.fsy"
                               failwithf ""
                   )
# 59 "TexParser.fsy"
                 : TexAst.Expr));
# 431 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'binaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "TexParser.fsy"
                                                   _1 
                   )
# 62 "TexParser.fsy"
                 : 'expression));
# 442 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'highPriorityFunction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "TexParser.fsy"
                                                _1 
                   )
# 63 "TexParser.fsy"
                 : 'expression));
# 453 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "TexParser.fsy"
                                   Constant(Pi) 
                   )
# 66 "TexParser.fsy"
                 : 'constant));
# 463 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "TexParser.fsy"
                                   Constant(E) 
                   )
# 67 "TexParser.fsy"
                 : 'constant));
# 473 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "TexParser.fsy"
                                                                      Sum(List.rev _4) 
                   )
# 70 "TexParser.fsy"
                 : 'sum));
# 484 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "TexParser.fsy"
                                                                      Prod(List.rev _4) 
                   )
# 73 "TexParser.fsy"
                 : 'prod));
# 495 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'highPriorityFunction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "TexParser.fsy"
                                                      Fact(_1) 
                   )
# 76 "TexParser.fsy"
                 : 'fact));
# 506 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "TexParser.fsy"
                                                                                          Div(_4, _7) 
                   )
# 79 "TexParser.fsy"
                 : 'frac));
# 518 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "TexParser.fsy"
                                                                                    Pow(_2, _6) 
                   )
# 82 "TexParser.fsy"
                 : 'power));
# 530 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _12 = (let data = parseState.GetInput(12) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _14 = (let data = parseState.GetInput(14) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "TexParser.fsy"
                                                                                                                           Integral(_12, _14, _5, _9) 
                   )
# 86 "TexParser.fsy"
                 : 'integral));
# 544 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _12 = (let data = parseState.GetInput(12) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _13 = (let data = parseState.GetInput(13) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "TexParser.fsy"
                                                                                                                           Integral(_12, _13, _5, _9) 
                   )
# 89 "TexParser.fsy"
                 : 'integral));
# 558 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "TexParser.fsy"
                                                                                                         Lim(_10, _5, _7) 
                   )
# 92 "TexParser.fsy"
                 : 'limit));
# 571 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'refValue)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "TexParser.fsy"
                                                                _1 
                   )
# 95 "TexParser.fsy"
                 : 'refPattern));
# 582 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'refValue)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "TexParser.fsy"
                                                             _4 
                   )
# 96 "TexParser.fsy"
                 : 'refPattern));
# 593 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "TexParser.fsy"
                                                                                                Sin(_4, Int(1)) 
                   )
# 99 "TexParser.fsy"
                 : 'trigonometry));
# 604 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "TexParser.fsy"
                                                                                                Sin(_8, _5) 
                   )
# 100 "TexParser.fsy"
                 : 'trigonometry));
# 616 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "TexParser.fsy"
                                                                                                Cos(_4, Int(1)) 
                   )
# 101 "TexParser.fsy"
                 : 'trigonometry));
# 627 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "TexParser.fsy"
                                                                                                Cos(_8, _5) 
                   )
# 102 "TexParser.fsy"
                 : 'trigonometry));
# 639 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string*int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "TexParser.fsy"
                                          analyzeDomainSpecificSingleSource (fst _1) (snd _1) |> DsAst 
                   )
# 105 "TexParser.fsy"
                 : 'refValue));
# 650 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : (string*int) list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "TexParser.fsy"
                                       analyzeDomainSpecificSources _1 |> DsAst 
                   )
# 106 "TexParser.fsy"
                 : 'refValue));
# 661 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "TexParser.fsy"
                                                        Int(_1) 
                   )
# 109 "TexParser.fsy"
                 : 'highPriorityFunction));
# 672 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "TexParser.fsy"
                                                        Float(_1) 
                   )
# 110 "TexParser.fsy"
                 : 'highPriorityFunction));
# 683 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "TexParser.fsy"
                                                        Float(Double.PositiveInfinity) 
                   )
# 111 "TexParser.fsy"
                 : 'highPriorityFunction));
# 693 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "TexParser.fsy"
                                                        _2 
                   )
# 112 "TexParser.fsy"
                 : 'highPriorityFunction));
# 704 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'trigonometry)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "TexParser.fsy"
                                                     _1 
                   )
# 113 "TexParser.fsy"
                 : 'highPriorityFunction));
# 715 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'sum)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "TexParser.fsy"
                                                     _1 
                   )
# 114 "TexParser.fsy"
                 : 'highPriorityFunction));
# 726 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'prod)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "TexParser.fsy"
                                                     _1 
                   )
# 115 "TexParser.fsy"
                 : 'highPriorityFunction));
# 737 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fact)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "TexParser.fsy"
                                                     _1 
                   )
# 116 "TexParser.fsy"
                 : 'highPriorityFunction));
# 748 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'integral)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "TexParser.fsy"
                                                     _1 
                   )
# 117 "TexParser.fsy"
                 : 'highPriorityFunction));
# 759 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'constant)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "TexParser.fsy"
                                                     _1 
                   )
# 118 "TexParser.fsy"
                 : 'highPriorityFunction));
# 770 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'power)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "TexParser.fsy"
                                                        _1 
                   )
# 119 "TexParser.fsy"
                 : 'highPriorityFunction));
# 781 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'frac)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "TexParser.fsy"
                                                        _1 
                   )
# 120 "TexParser.fsy"
                 : 'highPriorityFunction));
# 792 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'limit)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "TexParser.fsy"
                                                     _1 
                   )
# 121 "TexParser.fsy"
                 : 'highPriorityFunction));
# 803 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'refPattern)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "TexParser.fsy"
                                                     _1 
                   )
# 122 "TexParser.fsy"
                 : 'highPriorityFunction));
# 814 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "TexParser.fsy"
                                                     Var(_1) 
                   )
# 123 "TexParser.fsy"
                 : 'highPriorityFunction));
# 825 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "TexParser.fsy"
                                                        Plus(_1, _3) 
                   )
# 126 "TexParser.fsy"
                 : 'binaryExpression));
# 837 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "TexParser.fsy"
                                                        Sub(_1, _3)  
                   )
# 127 "TexParser.fsy"
                 : 'binaryExpression));
# 849 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "TexParser.fsy"
                                                        Mul(_1, _3)  
                   )
# 128 "TexParser.fsy"
                 : 'binaryExpression));
# 861 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "TexParser.fsy"
                                                        Div(_1, _3)  
                   )
# 129 "TexParser.fsy"
                 : 'binaryExpression));
# 873 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "TexParser.fsy"
                                                        Bmod(_1, _3) 
                   )
# 130 "TexParser.fsy"
                 : 'binaryExpression));
# 885 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "TexParser.fsy"
                                         [_1] 
                   )
# 133 "TexParser.fsy"
                 : 'argumentSet));
# 896 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "TexParser.fsy"
                                                       _3::_1 
                   )
# 134 "TexParser.fsy"
                 : 'argumentSet));
|]
# 909 "TexParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 45;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : TexAst.Expr =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
