// Implementation file for parser generated by fsyacc
module TexParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "TexParser.fsy"

open TexAst
open System
open System.Diagnostics
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing
open ErrorHandling

let mutable domainSpecificAnalyzer = Unchecked.defaultof<DomainSpecificContext -> obj>
let mutable errorLogger = Unchecked.defaultof<ErrorLogger>

let analyzeDomainSpecificLanguage token = domainSpecificAnalyzer token

let analyzeDomainSpecificSource token startPos = 
    try
      analyzeDomainSpecificLanguage token
    with
      | DomainSpecificParseException(fString, pos) -> failwithf "%s at pos: %u" fString (startPos)

let analyzeDomainSpecificSingleSource src pos = 
    analyzeDomainSpecificSource (SRefValueSrc(src)) pos |> SRefValue

let analyzeDomainSpecificSources sources = 
    let rec analyzeDomainSpecificSourcesInternal sources state = 
        match sources with
          | [] -> state
          | (src, pos)::t -> analyzeDomainSpecificSourcesInternal t ((analyzeDomainSpecificSource (MRefValueSrc(src)) pos)::state)
        
    analyzeDomainSpecificSourcesInternal sources [] 
    |> List.rev 
    |> MRefValue

let report msg pos = 
    let error = Error(msg, pos)
    errorLogger.ReportError(error)

let checkForArguments token argsOpt pos =
    match (token, argsOpt) with
        | (_, None) -> 
                       (ErrorTextFormatter.FunctionHasNoParameters token, pos) ||> report
                       [Int(1)]
        | (_, Some(args)) -> 
                             Debug.Assert((Seq.length args) <> 0)
                             match (token, Seq.length args) with
                                 | (SUM, _) | (PROD, _) -> args
                                 | (_, l) when l > 1 -> 
                                                        (ErrorTextFormatter.FunctionHasSeveralParameters token, pos) ||> report
                                                        [args.Head]
                                 | (_, _) -> args

let checkForArgument token argsOpt pos = checkForArguments token argsOpt pos |> Seq.head

let (|UnmatchedLeft|UnmatchedRight|UnmatchedBoth|MatchedBoth|) (actualLp, actualRp, expectedLp, expectedRp) = 
    let actualLp = fst actualLp
    let actualRp = fst actualRp
    if actualLp <> expectedLp && actualRp <> expectedRp then UnmatchedBoth
    elif actualLp <> expectedLp then UnmatchedLeft
    elif actualRp <> expectedRp then UnmatchedRight
    else MatchedBoth

let checkBalancedParen actualLp actualRp expectedLp expectedRp = 
    match (actualLp, actualRp, expectedLp, expectedRp) with
        | UnmatchedLeft   -> (ErrorTextFormatter.UnmatchedLeftBracket (fst actualLp), snd actualLp) ||> report
        | UnmatchedRight  -> (ErrorTextFormatter.UnmatchedRightBracket (fst actualRp), snd actualRp) ||> report
        | UnmatchedBoth   -> 
                              (ErrorTextFormatter.UnmatchedLeftBracket (fst actualLp), snd actualLp) ||> report
                              (ErrorTextFormatter.UnmatchedRightBracket (fst actualRp), snd actualRp) ||> report
        | MatchedBoth     -> ()

let getStartPosition (parseState: IParseState) position = 
    let lexbuf = parseState.ParserLocalStore.["LexBuffer"] :?> LexBuffer<char>
    let pos = parseState.InputStartPosition(position)
    {Line = pos.Line; Column = pos.Column}

let getEndPosition (parseState: IParseState) position = 
    let lexbuf = parseState.ParserLocalStore.["LexBuffer"] :?> LexBuffer<char>
    let pos = parseState.InputEndPosition(position)
    {Line = pos.Line; Column = pos.Column}


# 87 "TexParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | PI
  | EULERNUM
  | FRAC
  | SQRT
  | SUM
  | PROD
  | INTEGRAL
  | TIMES
  | INFTY
  | TO
  | LIM
  | BMOD
  | TEXT
  | SIN
  | COS
  | PLUS
  | SUB
  | MUL
  | DIV
  | LPAREN
  | RPAREN
  | LCURLY
  | RCURLY
  | EXCL
  | CARET
  | EQ
  | UNDERSCORE
  | SLASH
  | COMMA
  | MREFVAL of ((string*int) list)
  | SREFVAL of (string*int)
  | ID of (string)
  | DIFF of (string)
  | FLOAT of (float)
  | INT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_PI
    | TOKEN_EULERNUM
    | TOKEN_FRAC
    | TOKEN_SQRT
    | TOKEN_SUM
    | TOKEN_PROD
    | TOKEN_INTEGRAL
    | TOKEN_TIMES
    | TOKEN_INFTY
    | TOKEN_TO
    | TOKEN_LIM
    | TOKEN_BMOD
    | TOKEN_TEXT
    | TOKEN_SIN
    | TOKEN_COS
    | TOKEN_PLUS
    | TOKEN_SUB
    | TOKEN_MUL
    | TOKEN_DIV
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LCURLY
    | TOKEN_RCURLY
    | TOKEN_EXCL
    | TOKEN_CARET
    | TOKEN_EQ
    | TOKEN_UNDERSCORE
    | TOKEN_SLASH
    | TOKEN_COMMA
    | TOKEN_MREFVAL
    | TOKEN_SREFVAL
    | TOKEN_ID
    | TOKEN_DIFF
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_expression
    | NONTERM_constant
    | NONTERM_sumPrefix
    | NONTERM_sum
    | NONTERM_prodPrefix
    | NONTERM_prod
    | NONTERM_fact
    | NONTERM_power
    | NONTERM_fracPrefix
    | NONTERM_frac
    | NONTERM_integralPrefix
    | NONTERM_integral
    | NONTERM_intDiff
    | NONTERM_intCaret
    | NONTERM_intUnderscore
    | NONTERM_refPattern
    | NONTERM_refValue
    | NONTERM_highPriorityFunction
    | NONTERM_sinPrefix
    | NONTERM_cosPrefix
    | NONTERM_trigonometry
    | NONTERM_binaryExpression
    | NONTERM_binaryOperator
    | NONTERM_arguments
    | NONTERM_argumentSet
    | NONTERM_expr
    | NONTERM_recover
    | NONTERM_parens
    | NONTERM_errorRule

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | PI  -> 1 
  | EULERNUM  -> 2 
  | FRAC  -> 3 
  | SQRT  -> 4 
  | SUM  -> 5 
  | PROD  -> 6 
  | INTEGRAL  -> 7 
  | TIMES  -> 8 
  | INFTY  -> 9 
  | TO  -> 10 
  | LIM  -> 11 
  | BMOD  -> 12 
  | TEXT  -> 13 
  | SIN  -> 14 
  | COS  -> 15 
  | PLUS  -> 16 
  | SUB  -> 17 
  | MUL  -> 18 
  | DIV  -> 19 
  | LPAREN  -> 20 
  | RPAREN  -> 21 
  | LCURLY  -> 22 
  | RCURLY  -> 23 
  | EXCL  -> 24 
  | CARET  -> 25 
  | EQ  -> 26 
  | UNDERSCORE  -> 27 
  | SLASH  -> 28 
  | COMMA  -> 29 
  | MREFVAL _ -> 30 
  | SREFVAL _ -> 31 
  | ID _ -> 32 
  | DIFF _ -> 33 
  | FLOAT _ -> 34 
  | INT _ -> 35 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_PI 
  | 2 -> TOKEN_EULERNUM 
  | 3 -> TOKEN_FRAC 
  | 4 -> TOKEN_SQRT 
  | 5 -> TOKEN_SUM 
  | 6 -> TOKEN_PROD 
  | 7 -> TOKEN_INTEGRAL 
  | 8 -> TOKEN_TIMES 
  | 9 -> TOKEN_INFTY 
  | 10 -> TOKEN_TO 
  | 11 -> TOKEN_LIM 
  | 12 -> TOKEN_BMOD 
  | 13 -> TOKEN_TEXT 
  | 14 -> TOKEN_SIN 
  | 15 -> TOKEN_COS 
  | 16 -> TOKEN_PLUS 
  | 17 -> TOKEN_SUB 
  | 18 -> TOKEN_MUL 
  | 19 -> TOKEN_DIV 
  | 20 -> TOKEN_LPAREN 
  | 21 -> TOKEN_RPAREN 
  | 22 -> TOKEN_LCURLY 
  | 23 -> TOKEN_RCURLY 
  | 24 -> TOKEN_EXCL 
  | 25 -> TOKEN_CARET 
  | 26 -> TOKEN_EQ 
  | 27 -> TOKEN_UNDERSCORE 
  | 28 -> TOKEN_SLASH 
  | 29 -> TOKEN_COMMA 
  | 30 -> TOKEN_MREFVAL 
  | 31 -> TOKEN_SREFVAL 
  | 32 -> TOKEN_ID 
  | 33 -> TOKEN_DIFF 
  | 34 -> TOKEN_FLOAT 
  | 35 -> TOKEN_INT 
  | 38 -> TOKEN_end_of_input
  | 36 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_expression 
    | 3 -> NONTERM_expression 
    | 4 -> NONTERM_constant 
    | 5 -> NONTERM_constant 
    | 6 -> NONTERM_sumPrefix 
    | 7 -> NONTERM_sumPrefix 
    | 8 -> NONTERM_sum 
    | 9 -> NONTERM_sum 
    | 10 -> NONTERM_prodPrefix 
    | 11 -> NONTERM_prodPrefix 
    | 12 -> NONTERM_prod 
    | 13 -> NONTERM_prod 
    | 14 -> NONTERM_fact 
    | 15 -> NONTERM_power 
    | 16 -> NONTERM_fracPrefix 
    | 17 -> NONTERM_fracPrefix 
    | 18 -> NONTERM_frac 
    | 19 -> NONTERM_frac 
    | 20 -> NONTERM_frac 
    | 21 -> NONTERM_frac 
    | 22 -> NONTERM_integralPrefix 
    | 23 -> NONTERM_integralPrefix 
    | 24 -> NONTERM_integral 
    | 25 -> NONTERM_intDiff 
    | 26 -> NONTERM_intDiff 
    | 27 -> NONTERM_intCaret 
    | 28 -> NONTERM_intCaret 
    | 29 -> NONTERM_intUnderscore 
    | 30 -> NONTERM_intUnderscore 
    | 31 -> NONTERM_refPattern 
    | 32 -> NONTERM_refPattern 
    | 33 -> NONTERM_refValue 
    | 34 -> NONTERM_refValue 
    | 35 -> NONTERM_highPriorityFunction 
    | 36 -> NONTERM_highPriorityFunction 
    | 37 -> NONTERM_highPriorityFunction 
    | 38 -> NONTERM_highPriorityFunction 
    | 39 -> NONTERM_highPriorityFunction 
    | 40 -> NONTERM_highPriorityFunction 
    | 41 -> NONTERM_highPriorityFunction 
    | 42 -> NONTERM_highPriorityFunction 
    | 43 -> NONTERM_highPriorityFunction 
    | 44 -> NONTERM_highPriorityFunction 
    | 45 -> NONTERM_highPriorityFunction 
    | 46 -> NONTERM_highPriorityFunction 
    | 47 -> NONTERM_highPriorityFunction 
    | 48 -> NONTERM_highPriorityFunction 
    | 49 -> NONTERM_highPriorityFunction 
    | 50 -> NONTERM_sinPrefix 
    | 51 -> NONTERM_sinPrefix 
    | 52 -> NONTERM_cosPrefix 
    | 53 -> NONTERM_cosPrefix 
    | 54 -> NONTERM_trigonometry 
    | 55 -> NONTERM_trigonometry 
    | 56 -> NONTERM_trigonometry 
    | 57 -> NONTERM_trigonometry 
    | 58 -> NONTERM_trigonometry 
    | 59 -> NONTERM_binaryExpression 
    | 60 -> NONTERM_binaryExpression 
    | 61 -> NONTERM_binaryExpression 
    | 62 -> NONTERM_binaryExpression 
    | 63 -> NONTERM_binaryExpression 
    | 64 -> NONTERM_binaryExpression 
    | 65 -> NONTERM_binaryExpression 
    | 66 -> NONTERM_binaryExpression 
    | 67 -> NONTERM_binaryExpression 
    | 68 -> NONTERM_binaryExpression 
    | 69 -> NONTERM_binaryExpression 
    | 70 -> NONTERM_binaryOperator 
    | 71 -> NONTERM_binaryOperator 
    | 72 -> NONTERM_binaryOperator 
    | 73 -> NONTERM_binaryOperator 
    | 74 -> NONTERM_binaryOperator 
    | 75 -> NONTERM_arguments 
    | 76 -> NONTERM_arguments 
    | 77 -> NONTERM_argumentSet 
    | 78 -> NONTERM_argumentSet 
    | 79 -> NONTERM_expr 
    | 80 -> NONTERM_recover 
    | 81 -> NONTERM_parens 
    | 82 -> NONTERM_parens 
    | 83 -> NONTERM_parens 
    | 84 -> NONTERM_parens 
    | 85 -> NONTERM_errorRule 
    | 86 -> NONTERM_errorRule 
    | 87 -> NONTERM_errorRule 
    | 88 -> NONTERM_errorRule 
    | 89 -> NONTERM_errorRule 
    | 90 -> NONTERM_errorRule 
    | 91 -> NONTERM_errorRule 
    | 92 -> NONTERM_errorRule 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 38 
let _fsyacc_tagOfErrorTerminal = 36

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | PI  -> "PI" 
  | EULERNUM  -> "EULERNUM" 
  | FRAC  -> "FRAC" 
  | SQRT  -> "SQRT" 
  | SUM  -> "SUM" 
  | PROD  -> "PROD" 
  | INTEGRAL  -> "INTEGRAL" 
  | TIMES  -> "TIMES" 
  | INFTY  -> "INFTY" 
  | TO  -> "TO" 
  | LIM  -> "LIM" 
  | BMOD  -> "BMOD" 
  | TEXT  -> "TEXT" 
  | SIN  -> "SIN" 
  | COS  -> "COS" 
  | PLUS  -> "PLUS" 
  | SUB  -> "SUB" 
  | MUL  -> "MUL" 
  | DIV  -> "DIV" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | LCURLY  -> "LCURLY" 
  | RCURLY  -> "RCURLY" 
  | EXCL  -> "EXCL" 
  | CARET  -> "CARET" 
  | EQ  -> "EQ" 
  | UNDERSCORE  -> "UNDERSCORE" 
  | SLASH  -> "SLASH" 
  | COMMA  -> "COMMA" 
  | MREFVAL _ -> "MREFVAL" 
  | SREFVAL _ -> "SREFVAL" 
  | ID _ -> "ID" 
  | DIFF _ -> "DIFF" 
  | FLOAT _ -> "FLOAT" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | PI  -> (null : System.Object) 
  | EULERNUM  -> (null : System.Object) 
  | FRAC  -> (null : System.Object) 
  | SQRT  -> (null : System.Object) 
  | SUM  -> (null : System.Object) 
  | PROD  -> (null : System.Object) 
  | INTEGRAL  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | INFTY  -> (null : System.Object) 
  | TO  -> (null : System.Object) 
  | LIM  -> (null : System.Object) 
  | BMOD  -> (null : System.Object) 
  | TEXT  -> (null : System.Object) 
  | SIN  -> (null : System.Object) 
  | COS  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | SUB  -> (null : System.Object) 
  | MUL  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LCURLY  -> (null : System.Object) 
  | RCURLY  -> (null : System.Object) 
  | EXCL  -> (null : System.Object) 
  | CARET  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | UNDERSCORE  -> (null : System.Object) 
  | SLASH  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | MREFVAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SREFVAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DIFF _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 32us; 65535us; 0us; 2us; 2us; 92us; 51us; 52us; 52us; 92us; 80us; 92us; 81us; 92us; 82us; 92us; 83us; 92us; 84us; 92us; 85us; 92us; 86us; 92us; 87us; 92us; 88us; 92us; 89us; 92us; 90us; 92us; 91us; 92us; 92us; 92us; 93us; 80us; 94us; 81us; 95us; 82us; 96us; 83us; 97us; 84us; 98us; 85us; 99us; 86us; 100us; 87us; 101us; 87us; 102us; 88us; 108us; 89us; 109us; 90us; 110us; 90us; 111us; 90us; 114us; 91us; 32us; 65535us; 0us; 59us; 2us; 59us; 51us; 59us; 52us; 59us; 80us; 59us; 81us; 59us; 82us; 59us; 83us; 59us; 84us; 59us; 85us; 59us; 86us; 59us; 87us; 59us; 88us; 59us; 89us; 59us; 90us; 59us; 91us; 59us; 92us; 59us; 93us; 59us; 94us; 59us; 95us; 59us; 96us; 59us; 97us; 59us; 98us; 59us; 99us; 59us; 100us; 59us; 101us; 59us; 102us; 59us; 108us; 59us; 109us; 59us; 110us; 59us; 111us; 59us; 114us; 59us; 32us; 65535us; 0us; 11us; 2us; 11us; 51us; 11us; 52us; 11us; 80us; 11us; 81us; 11us; 82us; 11us; 83us; 11us; 84us; 11us; 85us; 11us; 86us; 11us; 87us; 11us; 88us; 11us; 89us; 11us; 90us; 11us; 91us; 11us; 92us; 11us; 93us; 11us; 94us; 11us; 95us; 11us; 96us; 11us; 97us; 11us; 98us; 11us; 99us; 11us; 100us; 11us; 101us; 11us; 102us; 11us; 108us; 11us; 109us; 11us; 110us; 11us; 111us; 11us; 114us; 11us; 32us; 65535us; 0us; 55us; 2us; 55us; 51us; 55us; 52us; 55us; 80us; 55us; 81us; 55us; 82us; 55us; 83us; 55us; 84us; 55us; 85us; 55us; 86us; 55us; 87us; 55us; 88us; 55us; 89us; 55us; 90us; 55us; 91us; 55us; 92us; 55us; 93us; 55us; 94us; 55us; 95us; 55us; 96us; 55us; 97us; 55us; 98us; 55us; 99us; 55us; 100us; 55us; 101us; 55us; 102us; 55us; 108us; 55us; 109us; 55us; 110us; 55us; 111us; 55us; 114us; 55us; 32us; 65535us; 0us; 15us; 2us; 15us; 51us; 15us; 52us; 15us; 80us; 15us; 81us; 15us; 82us; 15us; 83us; 15us; 84us; 15us; 85us; 15us; 86us; 15us; 87us; 15us; 88us; 15us; 89us; 15us; 90us; 15us; 91us; 15us; 92us; 15us; 93us; 15us; 94us; 15us; 95us; 15us; 96us; 15us; 97us; 15us; 98us; 15us; 99us; 15us; 100us; 15us; 101us; 15us; 102us; 15us; 108us; 15us; 109us; 15us; 110us; 15us; 111us; 15us; 114us; 15us; 32us; 65535us; 0us; 56us; 2us; 56us; 51us; 56us; 52us; 56us; 80us; 56us; 81us; 56us; 82us; 56us; 83us; 56us; 84us; 56us; 85us; 56us; 86us; 56us; 87us; 56us; 88us; 56us; 89us; 56us; 90us; 56us; 91us; 56us; 92us; 56us; 93us; 56us; 94us; 56us; 95us; 56us; 96us; 56us; 97us; 56us; 98us; 56us; 99us; 56us; 100us; 56us; 101us; 56us; 102us; 56us; 108us; 56us; 109us; 56us; 110us; 56us; 111us; 56us; 114us; 56us; 32us; 65535us; 0us; 57us; 2us; 57us; 51us; 57us; 52us; 57us; 80us; 57us; 81us; 57us; 82us; 57us; 83us; 57us; 84us; 57us; 85us; 57us; 86us; 57us; 87us; 57us; 88us; 57us; 89us; 57us; 90us; 57us; 91us; 57us; 92us; 57us; 93us; 57us; 94us; 57us; 95us; 57us; 96us; 57us; 97us; 57us; 98us; 57us; 99us; 57us; 100us; 57us; 101us; 57us; 102us; 57us; 108us; 57us; 109us; 57us; 110us; 57us; 111us; 57us; 114us; 57us; 32us; 65535us; 0us; 60us; 2us; 60us; 51us; 60us; 52us; 60us; 80us; 60us; 81us; 60us; 82us; 60us; 83us; 60us; 84us; 60us; 85us; 60us; 86us; 60us; 87us; 60us; 88us; 60us; 89us; 60us; 90us; 60us; 91us; 60us; 92us; 60us; 93us; 60us; 94us; 60us; 95us; 60us; 96us; 60us; 97us; 60us; 98us; 60us; 99us; 60us; 100us; 60us; 101us; 60us; 102us; 60us; 108us; 60us; 109us; 60us; 110us; 60us; 111us; 60us; 114us; 60us; 32us; 65535us; 0us; 23us; 2us; 23us; 51us; 23us; 52us; 23us; 80us; 23us; 81us; 23us; 82us; 23us; 83us; 23us; 84us; 23us; 85us; 23us; 86us; 23us; 87us; 23us; 88us; 23us; 89us; 23us; 90us; 23us; 91us; 23us; 92us; 23us; 93us; 23us; 94us; 23us; 95us; 23us; 96us; 23us; 97us; 23us; 98us; 23us; 99us; 23us; 100us; 23us; 101us; 23us; 102us; 23us; 108us; 23us; 109us; 23us; 110us; 23us; 111us; 23us; 114us; 23us; 32us; 65535us; 0us; 61us; 2us; 61us; 51us; 61us; 52us; 61us; 80us; 61us; 81us; 61us; 82us; 61us; 83us; 61us; 84us; 61us; 85us; 61us; 86us; 61us; 87us; 61us; 88us; 61us; 89us; 61us; 90us; 61us; 91us; 61us; 92us; 61us; 93us; 61us; 94us; 61us; 95us; 61us; 96us; 61us; 97us; 61us; 98us; 61us; 99us; 61us; 100us; 61us; 101us; 61us; 102us; 61us; 108us; 61us; 109us; 61us; 110us; 61us; 111us; 61us; 114us; 61us; 32us; 65535us; 0us; 29us; 2us; 29us; 51us; 29us; 52us; 29us; 80us; 29us; 81us; 29us; 82us; 29us; 83us; 29us; 84us; 29us; 85us; 29us; 86us; 29us; 87us; 29us; 88us; 29us; 89us; 29us; 90us; 29us; 91us; 29us; 92us; 29us; 93us; 29us; 94us; 29us; 95us; 29us; 96us; 29us; 97us; 29us; 98us; 29us; 99us; 29us; 100us; 29us; 101us; 29us; 102us; 29us; 108us; 29us; 109us; 29us; 110us; 29us; 111us; 29us; 114us; 29us; 32us; 65535us; 0us; 58us; 2us; 58us; 51us; 58us; 52us; 58us; 80us; 58us; 81us; 58us; 82us; 58us; 83us; 58us; 84us; 58us; 85us; 58us; 86us; 58us; 87us; 58us; 88us; 58us; 89us; 58us; 90us; 58us; 91us; 58us; 92us; 58us; 93us; 58us; 94us; 58us; 95us; 58us; 96us; 58us; 97us; 58us; 98us; 58us; 99us; 58us; 100us; 58us; 101us; 58us; 102us; 58us; 108us; 58us; 109us; 58us; 110us; 58us; 111us; 58us; 114us; 58us; 1us; 65535us; 34us; 35us; 2us; 65535us; 18us; 19us; 31us; 32us; 1us; 65535us; 29us; 30us; 32us; 65535us; 0us; 62us; 2us; 62us; 51us; 62us; 52us; 62us; 80us; 62us; 81us; 62us; 82us; 62us; 83us; 62us; 84us; 62us; 85us; 62us; 86us; 62us; 87us; 62us; 88us; 62us; 89us; 62us; 90us; 62us; 91us; 62us; 92us; 62us; 93us; 62us; 94us; 62us; 95us; 62us; 96us; 62us; 97us; 62us; 98us; 62us; 99us; 62us; 100us; 62us; 101us; 62us; 102us; 62us; 108us; 62us; 109us; 62us; 110us; 62us; 111us; 62us; 114us; 62us; 33us; 65535us; 0us; 41us; 2us; 41us; 43us; 44us; 51us; 41us; 52us; 41us; 80us; 41us; 81us; 41us; 82us; 41us; 83us; 41us; 84us; 41us; 85us; 41us; 86us; 41us; 87us; 41us; 88us; 41us; 89us; 41us; 90us; 41us; 91us; 41us; 92us; 41us; 93us; 41us; 94us; 41us; 95us; 41us; 96us; 41us; 97us; 41us; 98us; 41us; 99us; 41us; 100us; 41us; 101us; 41us; 102us; 41us; 108us; 41us; 109us; 41us; 110us; 41us; 111us; 41us; 114us; 41us; 32us; 65535us; 0us; 5us; 2us; 5us; 51us; 5us; 52us; 5us; 80us; 5us; 81us; 5us; 82us; 5us; 83us; 5us; 84us; 5us; 85us; 5us; 86us; 5us; 87us; 5us; 88us; 5us; 89us; 5us; 90us; 5us; 91us; 5us; 92us; 5us; 93us; 5us; 94us; 5us; 95us; 5us; 96us; 5us; 97us; 5us; 98us; 5us; 99us; 5us; 100us; 5us; 101us; 5us; 102us; 5us; 108us; 5us; 109us; 5us; 110us; 5us; 111us; 5us; 114us; 5us; 32us; 65535us; 0us; 69us; 2us; 69us; 51us; 69us; 52us; 69us; 80us; 69us; 81us; 69us; 82us; 69us; 83us; 69us; 84us; 69us; 85us; 69us; 86us; 69us; 87us; 69us; 88us; 69us; 89us; 69us; 90us; 69us; 91us; 69us; 92us; 69us; 93us; 69us; 94us; 69us; 95us; 69us; 96us; 69us; 97us; 69us; 98us; 69us; 99us; 69us; 100us; 69us; 101us; 69us; 102us; 69us; 108us; 69us; 109us; 69us; 110us; 69us; 111us; 69us; 114us; 69us; 32us; 65535us; 0us; 75us; 2us; 75us; 51us; 75us; 52us; 75us; 80us; 75us; 81us; 75us; 82us; 75us; 83us; 75us; 84us; 75us; 85us; 75us; 86us; 75us; 87us; 75us; 88us; 75us; 89us; 75us; 90us; 75us; 91us; 75us; 92us; 75us; 93us; 75us; 94us; 75us; 95us; 75us; 96us; 75us; 97us; 75us; 98us; 75us; 99us; 75us; 100us; 75us; 101us; 75us; 102us; 75us; 108us; 75us; 109us; 75us; 110us; 75us; 111us; 75us; 114us; 75us; 32us; 65535us; 0us; 54us; 2us; 54us; 51us; 54us; 52us; 54us; 80us; 54us; 81us; 54us; 82us; 54us; 83us; 54us; 84us; 54us; 85us; 54us; 86us; 54us; 87us; 54us; 88us; 54us; 89us; 54us; 90us; 54us; 91us; 54us; 92us; 54us; 93us; 54us; 94us; 54us; 95us; 54us; 96us; 54us; 97us; 54us; 98us; 54us; 99us; 54us; 100us; 54us; 101us; 54us; 102us; 54us; 108us; 54us; 109us; 54us; 110us; 54us; 111us; 54us; 114us; 54us; 32us; 65535us; 0us; 4us; 2us; 4us; 51us; 4us; 52us; 4us; 80us; 4us; 81us; 4us; 82us; 4us; 83us; 4us; 84us; 4us; 85us; 4us; 86us; 4us; 87us; 4us; 88us; 4us; 89us; 4us; 90us; 4us; 91us; 4us; 92us; 4us; 93us; 4us; 94us; 4us; 95us; 4us; 96us; 4us; 97us; 4us; 98us; 4us; 99us; 4us; 100us; 4us; 101us; 4us; 102us; 4us; 108us; 4us; 109us; 4us; 110us; 4us; 111us; 4us; 114us; 4us; 32us; 65535us; 0us; 100us; 2us; 101us; 51us; 100us; 52us; 101us; 80us; 101us; 81us; 101us; 82us; 101us; 83us; 101us; 84us; 101us; 85us; 101us; 86us; 101us; 87us; 101us; 88us; 101us; 89us; 101us; 90us; 101us; 91us; 101us; 92us; 101us; 93us; 100us; 94us; 100us; 95us; 100us; 96us; 100us; 97us; 100us; 98us; 100us; 99us; 100us; 100us; 100us; 101us; 100us; 102us; 100us; 108us; 100us; 109us; 100us; 110us; 100us; 111us; 100us; 114us; 100us; 49us; 65535us; 0us; 18us; 2us; 18us; 11us; 12us; 15us; 16us; 19us; 20us; 23us; 24us; 24us; 25us; 30us; 31us; 32us; 33us; 33us; 34us; 51us; 18us; 52us; 18us; 69us; 70us; 70us; 74us; 71us; 72us; 72us; 73us; 75us; 76us; 77us; 78us; 78us; 79us; 80us; 18us; 81us; 18us; 82us; 18us; 83us; 18us; 84us; 18us; 85us; 18us; 86us; 18us; 87us; 18us; 88us; 18us; 89us; 18us; 90us; 18us; 91us; 18us; 92us; 18us; 93us; 18us; 94us; 18us; 95us; 18us; 96us; 18us; 97us; 18us; 98us; 18us; 99us; 18us; 100us; 18us; 101us; 18us; 102us; 18us; 108us; 18us; 109us; 18us; 110us; 18us; 111us; 18us; 114us; 18us; 120us; 121us; 122us; 123us; 4us; 65535us; 108us; 112us; 109us; 112us; 110us; 112us; 111us; 112us; 15us; 65535us; 2us; 103us; 52us; 103us; 80us; 103us; 81us; 103us; 82us; 103us; 83us; 103us; 84us; 103us; 85us; 103us; 86us; 103us; 87us; 103us; 88us; 103us; 89us; 103us; 90us; 103us; 91us; 103us; 92us; 103us; 16us; 65535us; 2us; 102us; 8us; 122us; 52us; 102us; 80us; 102us; 81us; 102us; 82us; 102us; 83us; 102us; 84us; 102us; 85us; 102us; 86us; 102us; 87us; 102us; 88us; 102us; 89us; 102us; 90us; 102us; 91us; 102us; 92us; 102us; 50us; 65535us; 0us; 111us; 2us; 110us; 11us; 108us; 15us; 108us; 19us; 108us; 23us; 108us; 24us; 108us; 30us; 108us; 32us; 108us; 33us; 108us; 51us; 111us; 52us; 110us; 69us; 108us; 70us; 108us; 71us; 108us; 72us; 108us; 75us; 108us; 77us; 108us; 78us; 108us; 80us; 110us; 81us; 110us; 82us; 110us; 83us; 110us; 84us; 110us; 85us; 110us; 86us; 110us; 87us; 110us; 88us; 110us; 89us; 110us; 90us; 110us; 91us; 110us; 92us; 110us; 93us; 111us; 94us; 111us; 95us; 111us; 96us; 111us; 97us; 111us; 98us; 111us; 99us; 111us; 100us; 111us; 101us; 111us; 102us; 111us; 108us; 109us; 109us; 109us; 110us; 109us; 111us; 109us; 112us; 113us; 114us; 111us; 120us; 108us; 122us; 108us; 32us; 65535us; 0us; 64us; 2us; 64us; 51us; 64us; 52us; 64us; 80us; 64us; 81us; 64us; 82us; 64us; 83us; 64us; 84us; 64us; 85us; 64us; 86us; 64us; 87us; 64us; 88us; 64us; 89us; 64us; 90us; 64us; 91us; 64us; 92us; 64us; 93us; 64us; 94us; 64us; 95us; 64us; 96us; 64us; 97us; 64us; 98us; 64us; 99us; 64us; 100us; 64us; 101us; 64us; 102us; 64us; 108us; 64us; 109us; 64us; 110us; 64us; 111us; 64us; 114us; 64us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 36us; 69us; 102us; 135us; 168us; 201us; 234us; 267us; 300us; 333us; 366us; 399us; 401us; 404us; 406us; 439us; 473us; 506us; 539us; 572us; 605us; 638us; 671us; 721us; 726us; 742us; 759us; 810us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 11us; 1us; 59us; 60us; 61us; 62us; 63us; 64us; 67us; 68us; 69us; 91us; 1us; 1us; 1us; 2us; 2us; 3us; 14us; 1us; 4us; 1us; 5us; 13us; 6us; 10us; 16us; 22us; 32us; 37us; 50us; 52us; 85us; 86us; 87us; 88us; 89us; 1us; 6us; 1us; 7us; 2us; 8us; 9us; 1us; 8us; 1us; 10us; 1us; 11us; 2us; 12us; 13us; 1us; 12us; 1us; 14us; 2us; 15us; 90us; 1us; 15us; 1us; 15us; 1us; 16us; 1us; 17us; 4us; 18us; 19us; 20us; 21us; 3us; 18us; 19us; 20us; 1us; 18us; 1us; 19us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 25us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 33us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 37us; 2us; 38us; 81us; 11us; 38us; 59us; 60us; 61us; 62us; 63us; 64us; 67us; 68us; 69us; 91us; 2us; 38us; 82us; 1us; 39us; 1us; 40us; 1us; 41us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 45us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 53us; 3us; 54us; 55us; 56us; 2us; 54us; 56us; 1us; 55us; 1us; 55us; 1us; 55us; 1us; 56us; 2us; 57us; 58us; 1us; 57us; 1us; 58us; 1us; 58us; 1us; 58us; 11us; 59us; 59us; 60us; 61us; 62us; 63us; 64us; 67us; 68us; 69us; 91us; 12us; 59us; 60us; 60us; 61us; 62us; 63us; 64us; 65us; 67us; 68us; 69us; 91us; 11us; 59us; 60us; 61us; 61us; 62us; 63us; 64us; 67us; 68us; 69us; 91us; 11us; 59us; 60us; 61us; 62us; 62us; 63us; 64us; 67us; 68us; 69us; 91us; 11us; 59us; 60us; 61us; 62us; 63us; 63us; 64us; 67us; 68us; 69us; 91us; 11us; 59us; 60us; 61us; 62us; 63us; 64us; 64us; 67us; 68us; 69us; 91us; 11us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 67us; 68us; 69us; 91us; 11us; 59us; 60us; 61us; 62us; 63us; 64us; 66us; 67us; 68us; 69us; 91us; 11us; 59us; 60us; 61us; 62us; 63us; 64us; 67us; 68us; 68us; 69us; 91us; 11us; 59us; 60us; 61us; 62us; 63us; 64us; 67us; 68us; 69us; 77us; 91us; 12us; 59us; 60us; 61us; 62us; 63us; 64us; 67us; 68us; 69us; 77us; 91us; 92us; 11us; 59us; 60us; 61us; 62us; 63us; 64us; 67us; 68us; 69us; 78us; 91us; 11us; 59us; 60us; 61us; 62us; 63us; 64us; 67us; 68us; 69us; 79us; 91us; 2us; 59us; 70us; 3us; 60us; 65us; 71us; 2us; 61us; 72us; 1us; 62us; 2us; 63us; 73us; 2us; 64us; 74us; 2us; 65us; 71us; 1us; 66us; 2us; 66us; 67us; 1us; 68us; 1us; 69us; 1us; 70us; 1us; 72us; 1us; 73us; 1us; 74us; 2us; 75us; 76us; 4us; 75us; 76us; 76us; 92us; 4us; 75us; 76us; 91us; 92us; 3us; 75us; 76us; 92us; 2us; 75us; 78us; 1us; 75us; 1us; 78us; 1us; 80us; 1us; 81us; 1us; 82us; 1us; 83us; 1us; 84us; 2us; 85us; 86us; 1us; 85us; 2us; 87us; 88us; 1us; 87us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 16us; 18us; 20us; 23us; 25us; 27us; 41us; 43us; 45us; 48us; 50us; 52us; 54us; 57us; 59us; 61us; 64us; 66us; 68us; 70us; 72us; 77us; 81us; 83us; 85us; 87us; 89us; 91us; 93us; 95us; 97us; 99us; 101us; 103us; 105us; 107us; 109us; 111us; 113us; 115us; 117us; 119us; 121us; 123us; 125us; 127us; 129us; 131us; 133us; 136us; 148us; 151us; 153us; 155us; 157us; 159us; 161us; 163us; 165us; 167us; 169us; 171us; 173us; 175us; 177us; 179us; 181us; 185us; 188us; 190us; 192us; 194us; 196us; 199us; 201us; 203us; 205us; 207us; 219us; 232us; 244us; 256us; 268us; 280us; 292us; 304us; 316us; 328us; 341us; 353us; 365us; 368us; 372us; 375us; 377us; 380us; 383us; 386us; 388us; 391us; 393us; 395us; 397us; 399us; 401us; 403us; 406us; 411us; 416us; 420us; 423us; 425us; 427us; 429us; 431us; 433us; 435us; 437us; 440us; 442us; 445us; |]
let _fsyacc_action_rows = 124
let _fsyacc_actionTableElements = [|23us; 32768us; 1us; 6us; 2us; 7us; 3us; 22us; 5us; 10us; 6us; 14us; 7us; 28us; 12us; 107us; 14us; 66us; 15us; 68us; 16us; 104us; 17us; 99us; 18us; 105us; 19us; 106us; 20us; 51us; 21us; 117us; 22us; 118us; 23us; 119us; 28us; 8us; 30us; 47us; 31us; 46us; 32us; 63us; 34us; 49us; 35us; 48us; 0us; 49152us; 26us; 32768us; 0us; 3us; 1us; 6us; 2us; 7us; 3us; 22us; 5us; 10us; 6us; 14us; 7us; 28us; 8us; 96us; 12us; 98us; 14us; 66us; 15us; 68us; 16us; 93us; 17us; 94us; 18us; 95us; 19us; 97us; 20us; 51us; 21us; 117us; 22us; 118us; 23us; 119us; 28us; 8us; 30us; 47us; 31us; 46us; 32us; 63us; 34us; 49us; 35us; 48us; 36us; 115us; 0us; 16385us; 0us; 16386us; 1us; 16387us; 24us; 17us; 0us; 16388us; 0us; 16389us; 10us; 16473us; 3us; 21us; 5us; 9us; 6us; 13us; 7us; 27us; 9us; 50us; 13us; 42us; 14us; 65us; 15us; 67us; 32us; 120us; 36us; 115us; 0us; 16390us; 0us; 16391us; 4us; 16393us; 20us; 116us; 21us; 117us; 22us; 118us; 23us; 119us; 0us; 16392us; 0us; 16394us; 0us; 16395us; 4us; 16397us; 20us; 116us; 21us; 117us; 22us; 118us; 23us; 119us; 0us; 16396us; 0us; 16398us; 2us; 16474us; 25us; 37us; 36us; 38us; 4us; 32768us; 20us; 116us; 21us; 117us; 22us; 118us; 23us; 119us; 0us; 16399us; 0us; 16400us; 0us; 16401us; 4us; 16405us; 20us; 116us; 21us; 117us; 22us; 118us; 23us; 119us; 5us; 16404us; 20us; 116us; 21us; 117us; 22us; 118us; 23us; 119us; 36us; 26us; 0us; 16402us; 0us; 16403us; 0us; 16406us; 0us; 16407us; 2us; 32768us; 27us; 39us; 36us; 40us; 4us; 32768us; 20us; 116us; 21us; 117us; 22us; 118us; 23us; 119us; 2us; 32768us; 25us; 37us; 36us; 38us; 4us; 32768us; 20us; 116us; 21us; 117us; 22us; 118us; 23us; 119us; 4us; 32768us; 20us; 116us; 21us; 117us; 22us; 118us; 23us; 119us; 1us; 16410us; 33us; 36us; 0us; 16408us; 0us; 16409us; 0us; 16411us; 0us; 16412us; 0us; 16413us; 0us; 16414us; 0us; 16415us; 1us; 32768us; 22us; 43us; 2us; 32768us; 30us; 47us; 31us; 46us; 1us; 32768us; 23us; 45us; 0us; 16416us; 0us; 16417us; 0us; 16418us; 0us; 16419us; 0us; 16420us; 0us; 16421us; 20us; 16465us; 1us; 6us; 2us; 7us; 3us; 22us; 5us; 10us; 6us; 14us; 7us; 28us; 12us; 107us; 14us; 66us; 15us; 68us; 16us; 104us; 17us; 99us; 18us; 105us; 19us; 106us; 20us; 51us; 22us; 118us; 30us; 47us; 31us; 46us; 32us; 63us; 34us; 49us; 35us; 48us; 25us; 32768us; 1us; 6us; 2us; 7us; 3us; 22us; 5us; 10us; 6us; 14us; 7us; 28us; 8us; 96us; 12us; 98us; 14us; 66us; 15us; 68us; 16us; 93us; 17us; 94us; 18us; 95us; 19us; 97us; 20us; 51us; 21us; 53us; 22us; 118us; 23us; 119us; 28us; 8us; 30us; 47us; 31us; 46us; 32us; 63us; 34us; 49us; 35us; 48us; 36us; 115us; 0us; 16422us; 0us; 16423us; 0us; 16424us; 0us; 16425us; 0us; 16426us; 0us; 16427us; 0us; 16428us; 0us; 16429us; 0us; 16430us; 0us; 16431us; 0us; 16432us; 0us; 16433us; 0us; 16434us; 0us; 16435us; 0us; 16436us; 0us; 16437us; 5us; 32768us; 20us; 116us; 21us; 117us; 22us; 118us; 23us; 119us; 25us; 71us; 4us; 16438us; 20us; 116us; 21us; 117us; 22us; 118us; 23us; 119us; 4us; 32768us; 20us; 116us; 21us; 117us; 22us; 118us; 23us; 119us; 4us; 32768us; 20us; 116us; 21us; 117us; 22us; 118us; 23us; 119us; 0us; 16439us; 0us; 16440us; 5us; 32768us; 20us; 116us; 21us; 117us; 22us; 118us; 23us; 119us; 25us; 77us; 0us; 16441us; 4us; 32768us; 20us; 116us; 21us; 117us; 22us; 118us; 23us; 119us; 4us; 32768us; 20us; 116us; 21us; 117us; 22us; 118us; 23us; 119us; 0us; 16442us; 13us; 16443us; 3us; 22us; 5us; 10us; 6us; 14us; 7us; 28us; 8us; 96us; 12us; 98us; 14us; 66us; 15us; 68us; 18us; 95us; 19us; 97us; 30us; 47us; 31us; 46us; 36us; 115us; 13us; 16444us; 3us; 22us; 5us; 10us; 6us; 14us; 7us; 28us; 8us; 16449us; 12us; 16449us; 14us; 66us; 15us; 68us; 18us; 16449us; 19us; 16449us; 30us; 47us; 31us; 46us; 36us; 115us; 9us; 16445us; 3us; 22us; 5us; 10us; 6us; 14us; 7us; 28us; 14us; 66us; 15us; 68us; 30us; 47us; 31us; 46us; 36us; 115us; 9us; 16446us; 3us; 22us; 5us; 10us; 6us; 14us; 7us; 28us; 14us; 66us; 15us; 68us; 30us; 47us; 31us; 46us; 36us; 115us; 9us; 16447us; 3us; 22us; 5us; 10us; 6us; 14us; 7us; 28us; 14us; 66us; 15us; 68us; 30us; 47us; 31us; 46us; 36us; 115us; 9us; 16448us; 3us; 22us; 5us; 10us; 6us; 14us; 7us; 28us; 14us; 66us; 15us; 68us; 30us; 47us; 31us; 46us; 36us; 115us; 9us; 16449us; 3us; 22us; 5us; 10us; 6us; 14us; 7us; 28us; 14us; 66us; 15us; 68us; 30us; 47us; 31us; 46us; 36us; 115us; 22us; 16450us; 1us; 6us; 2us; 7us; 3us; 22us; 5us; 10us; 6us; 14us; 7us; 28us; 8us; 96us; 12us; 98us; 14us; 66us; 15us; 68us; 16us; 93us; 17us; 94us; 18us; 95us; 19us; 97us; 20us; 51us; 22us; 118us; 30us; 47us; 31us; 46us; 32us; 63us; 34us; 49us; 35us; 48us; 36us; 115us; 22us; 16452us; 1us; 6us; 2us; 7us; 3us; 22us; 5us; 10us; 6us; 14us; 7us; 28us; 8us; 96us; 12us; 98us; 14us; 66us; 15us; 68us; 16us; 93us; 17us; 94us; 18us; 95us; 19us; 97us; 20us; 51us; 22us; 118us; 30us; 47us; 31us; 46us; 32us; 63us; 34us; 49us; 35us; 48us; 36us; 115us; 23us; 16461us; 1us; 6us; 2us; 7us; 3us; 22us; 5us; 10us; 6us; 14us; 7us; 28us; 8us; 96us; 12us; 98us; 14us; 66us; 15us; 68us; 16us; 93us; 17us; 94us; 18us; 95us; 19us; 97us; 20us; 51us; 22us; 118us; 28us; 8us; 30us; 47us; 31us; 46us; 32us; 63us; 34us; 49us; 35us; 48us; 36us; 115us; 25us; 16461us; 0us; 16476us; 1us; 6us; 2us; 7us; 3us; 22us; 5us; 10us; 6us; 14us; 7us; 28us; 8us; 96us; 12us; 98us; 14us; 66us; 15us; 68us; 16us; 93us; 17us; 94us; 18us; 95us; 19us; 97us; 20us; 51us; 22us; 118us; 24us; 16476us; 28us; 16476us; 30us; 47us; 31us; 46us; 32us; 63us; 34us; 49us; 35us; 48us; 36us; 115us; 23us; 16462us; 1us; 6us; 2us; 7us; 3us; 22us; 5us; 10us; 6us; 14us; 7us; 28us; 8us; 96us; 12us; 98us; 14us; 66us; 15us; 68us; 16us; 93us; 17us; 94us; 18us; 95us; 19us; 97us; 20us; 51us; 22us; 118us; 28us; 8us; 30us; 47us; 31us; 46us; 32us; 63us; 34us; 49us; 35us; 48us; 36us; 115us; 9us; 16463us; 3us; 22us; 5us; 10us; 6us; 14us; 7us; 28us; 14us; 66us; 15us; 68us; 30us; 47us; 31us; 46us; 36us; 115us; 23us; 16454us; 1us; 6us; 2us; 7us; 3us; 22us; 5us; 10us; 6us; 14us; 7us; 28us; 12us; 107us; 14us; 66us; 15us; 68us; 16us; 104us; 17us; 99us; 18us; 105us; 19us; 106us; 20us; 51us; 21us; 117us; 22us; 118us; 23us; 119us; 28us; 8us; 30us; 47us; 31us; 46us; 32us; 63us; 34us; 49us; 35us; 48us; 23us; 16455us; 1us; 6us; 2us; 7us; 3us; 22us; 5us; 10us; 6us; 14us; 7us; 28us; 12us; 107us; 14us; 66us; 15us; 68us; 16us; 104us; 17us; 99us; 18us; 105us; 19us; 106us; 20us; 51us; 21us; 117us; 22us; 118us; 23us; 119us; 28us; 8us; 30us; 47us; 31us; 46us; 32us; 63us; 34us; 49us; 35us; 48us; 23us; 16456us; 1us; 6us; 2us; 7us; 3us; 22us; 5us; 10us; 6us; 14us; 7us; 28us; 12us; 107us; 14us; 66us; 15us; 68us; 16us; 104us; 17us; 99us; 18us; 105us; 19us; 106us; 20us; 51us; 21us; 117us; 22us; 118us; 23us; 119us; 28us; 8us; 30us; 47us; 31us; 46us; 32us; 63us; 34us; 49us; 35us; 48us; 23us; 32768us; 1us; 6us; 2us; 7us; 3us; 22us; 5us; 10us; 6us; 14us; 7us; 28us; 12us; 107us; 14us; 66us; 15us; 68us; 16us; 104us; 17us; 99us; 18us; 105us; 19us; 106us; 20us; 51us; 21us; 117us; 22us; 118us; 23us; 119us; 28us; 8us; 30us; 47us; 31us; 46us; 32us; 63us; 34us; 49us; 35us; 48us; 23us; 16457us; 1us; 6us; 2us; 7us; 3us; 22us; 5us; 10us; 6us; 14us; 7us; 28us; 12us; 107us; 14us; 66us; 15us; 68us; 16us; 104us; 17us; 99us; 18us; 105us; 19us; 106us; 20us; 51us; 21us; 117us; 22us; 118us; 23us; 119us; 28us; 8us; 30us; 47us; 31us; 46us; 32us; 63us; 34us; 49us; 35us; 48us; 23us; 16458us; 1us; 6us; 2us; 7us; 3us; 22us; 5us; 10us; 6us; 14us; 7us; 28us; 12us; 107us; 14us; 66us; 15us; 68us; 16us; 104us; 17us; 99us; 18us; 105us; 19us; 106us; 20us; 51us; 21us; 117us; 22us; 118us; 23us; 119us; 28us; 8us; 30us; 47us; 31us; 46us; 32us; 63us; 34us; 49us; 35us; 48us; 23us; 16455us; 1us; 6us; 2us; 7us; 3us; 22us; 5us; 10us; 6us; 14us; 7us; 28us; 12us; 107us; 14us; 66us; 15us; 68us; 16us; 104us; 17us; 99us; 18us; 105us; 19us; 106us; 20us; 51us; 21us; 117us; 22us; 118us; 23us; 119us; 28us; 8us; 30us; 47us; 31us; 46us; 32us; 63us; 34us; 49us; 35us; 48us; 23us; 32768us; 1us; 6us; 2us; 7us; 3us; 22us; 5us; 10us; 6us; 14us; 7us; 28us; 12us; 107us; 14us; 66us; 15us; 68us; 16us; 104us; 17us; 99us; 18us; 105us; 19us; 106us; 20us; 51us; 21us; 117us; 22us; 118us; 23us; 119us; 28us; 8us; 30us; 47us; 31us; 46us; 32us; 63us; 34us; 49us; 35us; 48us; 20us; 16451us; 1us; 6us; 2us; 7us; 3us; 22us; 5us; 10us; 6us; 14us; 7us; 28us; 12us; 107us; 14us; 66us; 15us; 68us; 16us; 104us; 17us; 99us; 18us; 105us; 19us; 106us; 20us; 51us; 22us; 118us; 30us; 47us; 31us; 46us; 32us; 63us; 34us; 49us; 35us; 48us; 23us; 32768us; 1us; 6us; 2us; 7us; 3us; 22us; 5us; 10us; 6us; 14us; 7us; 28us; 12us; 107us; 14us; 66us; 15us; 68us; 16us; 104us; 17us; 99us; 18us; 105us; 19us; 106us; 20us; 51us; 21us; 117us; 22us; 118us; 23us; 119us; 28us; 8us; 30us; 47us; 31us; 46us; 32us; 63us; 34us; 49us; 35us; 48us; 0us; 16453us; 0us; 16454us; 0us; 16456us; 0us; 16457us; 0us; 16458us; 23us; 32768us; 1us; 6us; 2us; 7us; 3us; 22us; 5us; 10us; 6us; 14us; 7us; 28us; 12us; 107us; 14us; 66us; 15us; 68us; 16us; 104us; 17us; 99us; 18us; 105us; 19us; 106us; 20us; 51us; 21us; 117us; 22us; 118us; 23us; 119us; 28us; 8us; 30us; 47us; 31us; 46us; 32us; 63us; 34us; 49us; 35us; 48us; 23us; 16460us; 1us; 6us; 2us; 7us; 3us; 22us; 5us; 10us; 6us; 14us; 7us; 28us; 12us; 107us; 14us; 66us; 15us; 68us; 16us; 104us; 17us; 99us; 18us; 105us; 19us; 106us; 20us; 51us; 21us; 117us; 22us; 118us; 23us; 119us; 28us; 8us; 30us; 47us; 31us; 46us; 32us; 63us; 34us; 49us; 35us; 48us; 20us; 16475us; 1us; 6us; 2us; 7us; 3us; 22us; 5us; 10us; 6us; 14us; 7us; 28us; 12us; 107us; 14us; 66us; 15us; 68us; 16us; 104us; 17us; 99us; 18us; 105us; 19us; 106us; 20us; 51us; 22us; 118us; 30us; 47us; 31us; 46us; 32us; 63us; 34us; 49us; 35us; 48us; 23us; 32768us; 1us; 6us; 2us; 7us; 3us; 22us; 5us; 10us; 6us; 14us; 7us; 28us; 12us; 107us; 14us; 66us; 15us; 68us; 16us; 104us; 17us; 99us; 18us; 105us; 19us; 106us; 20us; 51us; 21us; 117us; 22us; 118us; 23us; 119us; 28us; 8us; 30us; 47us; 31us; 46us; 32us; 63us; 34us; 49us; 35us; 48us; 5us; 32768us; 20us; 116us; 21us; 117us; 22us; 118us; 23us; 119us; 29us; 114us; 0us; 16459us; 23us; 32768us; 1us; 6us; 2us; 7us; 3us; 22us; 5us; 10us; 6us; 14us; 7us; 28us; 12us; 107us; 14us; 66us; 15us; 68us; 16us; 104us; 17us; 99us; 18us; 105us; 19us; 106us; 20us; 51us; 21us; 117us; 22us; 118us; 23us; 119us; 28us; 8us; 30us; 47us; 31us; 46us; 32us; 63us; 34us; 49us; 35us; 48us; 0us; 16464us; 0us; 16465us; 0us; 16466us; 0us; 16467us; 0us; 16468us; 2us; 16470us; 20us; 116us; 22us; 118us; 0us; 16469us; 2us; 16472us; 20us; 116us; 22us; 118us; 0us; 16471us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 24us; 25us; 52us; 53us; 54us; 56us; 57us; 58us; 69us; 70us; 71us; 76us; 77us; 78us; 79us; 84us; 85us; 86us; 89us; 94us; 95us; 96us; 97us; 102us; 108us; 109us; 110us; 111us; 112us; 115us; 120us; 123us; 128us; 133us; 135us; 136us; 137us; 138us; 139us; 140us; 141us; 142us; 144us; 147us; 149us; 150us; 151us; 152us; 153us; 154us; 155us; 176us; 202us; 203us; 204us; 205us; 206us; 207us; 208us; 209us; 210us; 211us; 212us; 213us; 214us; 215us; 216us; 217us; 218us; 224us; 229us; 234us; 239us; 240us; 241us; 247us; 248us; 253us; 258us; 259us; 273us; 287us; 297us; 307us; 317us; 327us; 337us; 360us; 383us; 407us; 433us; 457us; 467us; 491us; 515us; 539us; 563us; 587us; 611us; 635us; 659us; 680us; 704us; 705us; 706us; 707us; 708us; 709us; 733us; 757us; 778us; 802us; 808us; 809us; 833us; 834us; 835us; 836us; 837us; 838us; 841us; 842us; 845us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 1us; 1us; 1us; 2us; 1us; 2us; 1us; 2us; 1us; 2us; 1us; 2us; 3us; 2us; 1us; 3us; 3us; 2us; 1us; 2us; 1us; 7us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 5us; 1us; 1us; 1us; 1us; 2us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 2us; 1us; 2us; 4us; 3us; 2us; 4us; 3us; 3us; 3us; 3us; 3us; 3us; 2us; 2us; 2us; 3us; 2us; 1us; 1us; 1us; 1us; 1us; 3us; 2us; 1us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 2us; 3us; 2us; 1us; 1us; 2us; 2us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 8us; 9us; 10us; 10us; 11us; 11us; 11us; 11us; 12us; 12us; 13us; 14us; 14us; 15us; 15us; 16us; 16us; 17us; 17us; 18us; 18us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 20us; 20us; 21us; 21us; 22us; 22us; 22us; 22us; 22us; 23us; 23us; 23us; 23us; 23us; 23us; 23us; 23us; 23us; 23us; 23us; 24us; 24us; 24us; 24us; 24us; 25us; 25us; 26us; 26us; 27us; 28us; 29us; 29us; 29us; 29us; 30us; 30us; 30us; 30us; 30us; 30us; 30us; 30us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 65535us; 16388us; 16389us; 65535us; 16390us; 16391us; 65535us; 16392us; 16394us; 16395us; 65535us; 16396us; 16398us; 65535us; 65535us; 16399us; 16400us; 16401us; 65535us; 65535us; 16402us; 16403us; 16406us; 16407us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16408us; 16409us; 16411us; 16412us; 16413us; 16414us; 16415us; 65535us; 65535us; 65535us; 16416us; 16417us; 16418us; 16419us; 16420us; 16421us; 65535us; 65535us; 65535us; 16423us; 16424us; 16425us; 16426us; 16427us; 16428us; 16429us; 16430us; 16431us; 16432us; 16433us; 16434us; 16435us; 16436us; 16437us; 65535us; 65535us; 65535us; 65535us; 16439us; 16440us; 65535us; 16441us; 65535us; 65535us; 16442us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16453us; 16454us; 16456us; 16457us; 16458us; 65535us; 65535us; 65535us; 65535us; 65535us; 16459us; 65535us; 16464us; 16465us; 16466us; 16467us; 16468us; 65535us; 16469us; 65535us; 16471us; |]
let _fsyacc_reductions ()  =    [| 
# 474 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : TexAst.Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 483 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "TexParser.fsy"
                                         _1 
                   )
# 116 "TexParser.fsy"
                 : TexAst.Expr));
# 494 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'binaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "TexParser.fsy"
                                                   _1 
                   )
# 119 "TexParser.fsy"
                 : 'expression));
# 505 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'highPriorityFunction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "TexParser.fsy"
                                                 _1 
                   )
# 120 "TexParser.fsy"
                 : 'expression));
# 516 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "TexParser.fsy"
                                   Constant(Pi) 
                   )
# 124 "TexParser.fsy"
                 : 'constant));
# 526 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "TexParser.fsy"
                                   Constant(E) 
                   )
# 125 "TexParser.fsy"
                 : 'constant));
# 536 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "TexParser.fsy"
                                      
                   )
# 128 "TexParser.fsy"
                 : 'sumPrefix));
# 546 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "TexParser.fsy"
                                       (ErrorTextFormatter.FunctionHasNoSlashSymbol TokenInternal.SUM, getStartPosition parseState 1) ||> report 
                   )
# 129 "TexParser.fsy"
                 : 'sumPrefix));
# 556 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'sumPrefix)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'arguments)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "TexParser.fsy"
                                                 
                                                  let args = checkForArguments TokenInternal.SUM _2 (getStartPosition parseState 2)
                                                  Sum(List.rev args)
                                                
                   )
# 132 "TexParser.fsy"
                 : 'sum));
# 571 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'sumPrefix)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "TexParser.fsy"
                                      
                                 (ErrorTextFormatter.FunctionHasNoParameters TokenInternal.SUM, getEndPosition parseState 1) ||> report
                                 Sum([Int(1)])
                               
                   )
# 136 "TexParser.fsy"
                 : 'sum));
# 585 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "TexParser.fsy"
                                       
                   )
# 142 "TexParser.fsy"
                 : 'prodPrefix));
# 595 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "TexParser.fsy"
                                        (ErrorTextFormatter.FunctionHasNoSlashSymbol TokenInternal.PROD, getStartPosition parseState 1) ||> report 
                   )
# 143 "TexParser.fsy"
                 : 'prodPrefix));
# 605 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'prodPrefix)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'arguments)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "TexParser.fsy"
                                                   
                                                   let args = checkForArguments TokenInternal.PROD _2 (getStartPosition parseState 2)
                                                   Prod(List.rev args) 
                                                 
                   )
# 146 "TexParser.fsy"
                 : 'prod));
# 620 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'prodPrefix)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "TexParser.fsy"
                                                  
                                                   (ErrorTextFormatter.FunctionHasNoParameters TokenInternal.PROD, getEndPosition parseState 1) ||> report
                                                   Prod([Int(1)])
                                                 
                   )
# 150 "TexParser.fsy"
                 : 'prod));
# 634 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'highPriorityFunction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "TexParser.fsy"
                                                      Fact(_1) 
                   )
# 156 "TexParser.fsy"
                 : 'fact));
# 645 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arguments)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'intCaret)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'arguments)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "TexParser.fsy"
                                                           
                                                        let arg1 = checkForArgument TokenInternal.POW _1 (getStartPosition parseState 1)
                                                        let arg2 = checkForArgument TokenInternal.POW _3 (getStartPosition parseState 3)
                                                        Pow(arg1, arg2) 
                                                      
                   )
# 159 "TexParser.fsy"
                 : 'power));
# 662 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "TexParser.fsy"
                                       
                   )
# 166 "TexParser.fsy"
                 : 'fracPrefix));
# 672 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "TexParser.fsy"
                                        (ErrorTextFormatter.FunctionHasNoSlashSymbol TokenInternal.FRAC, getStartPosition parseState 1) ||> report 
                   )
# 167 "TexParser.fsy"
                 : 'fracPrefix));
# 682 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fracPrefix)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'arguments)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'arguments)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "TexParser.fsy"
                                                              
                                                              let arg1 = checkForArgument TokenInternal.FRAC _2 (getStartPosition parseState 2)
                                                              let arg2 = checkForArgument TokenInternal.FRAC _3 (getStartPosition parseState 3)
                                                              Div(arg1, arg2) 
                                                            
                   )
# 170 "TexParser.fsy"
                 : 'frac));
# 699 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fracPrefix)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'arguments)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "TexParser.fsy"
                                                          
                                                              let arg = checkForArgument TokenInternal.FRAC _2 (getStartPosition parseState 2)
                                                              (ErrorTextFormatter.FracMissingSecondArg, getEndPosition parseState 2) ||> report
                                                              Div(arg, Int(1))
                                                            
                   )
# 175 "TexParser.fsy"
                 : 'frac));
# 715 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fracPrefix)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'arguments)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 180 "TexParser.fsy"
                                                             
                                                              let arg = checkForArgument TokenInternal.FRAC _2 (getStartPosition parseState 2)
                                                              (ErrorTextFormatter.FracMissingSecondArg, getEndPosition parseState 2) ||> report
                                                              Div(arg, Int(1))
                                                            
                   )
# 180 "TexParser.fsy"
                 : 'frac));
# 731 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fracPrefix)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 185 "TexParser.fsy"
                                                          
                                                              (ErrorTextFormatter.FunctionHasNoParameters TokenInternal.FRAC, getEndPosition parseState 1) ||> report
                                                              Div(Int(1), Int(1))
                                                            
                   )
# 185 "TexParser.fsy"
                 : 'frac));
# 745 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 191 "TexParser.fsy"
                                           
                   )
# 191 "TexParser.fsy"
                 : 'integralPrefix));
# 755 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 192 "TexParser.fsy"
                                      (ErrorTextFormatter.FunctionHasNoSlashSymbol TokenInternal.INTEGRAL, getStartPosition parseState 1) ||> report 
                   )
# 192 "TexParser.fsy"
                 : 'integralPrefix));
# 765 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'integralPrefix)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'intUnderscore)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'arguments)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'intCaret)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'arguments)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'arguments)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'intDiff)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 195 "TexParser.fsy"
                                                                                                         
                                           let arg1 = checkForArgument TokenInternal.INTEGRAL _6 (getStartPosition parseState 6)
                                           let arg2 = checkForArgument TokenInternal.INTEGRAL _3 (getStartPosition parseState 3)
                                           let arg3 = checkForArgument TokenInternal.INTEGRAL _5 (getStartPosition parseState 5)
                                           Integral(arg1, _7, arg2, arg3) 
                                         
                   )
# 195 "TexParser.fsy"
                 : 'integral));
# 787 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 203 "TexParser.fsy"
                                  _1 
                   )
# 203 "TexParser.fsy"
                 : 'intDiff));
# 798 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 204 "TexParser.fsy"
                                  
                                  (ErrorTextFormatter.MissingDiffSyntax, getStartPosition parseState 1) ||> report
                                  "x"
                                
                   )
# 204 "TexParser.fsy"
                 : 'intDiff));
# 811 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 210 "TexParser.fsy"
                                  
                   )
# 210 "TexParser.fsy"
                 : 'intCaret));
# 821 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 211 "TexParser.fsy"
                                                  (ErrorTextFormatter.MissingCaretSymbol, getStartPosition parseState 1) ||> report 
                   )
# 211 "TexParser.fsy"
                 : 'intCaret));
# 831 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 213 "TexParser.fsy"
                                       
                   )
# 213 "TexParser.fsy"
                 : 'intUnderscore));
# 841 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 214 "TexParser.fsy"
                                                  (ErrorTextFormatter.MissingUnderscoreSymbol, getStartPosition parseState 1) ||> report 
                   )
# 214 "TexParser.fsy"
                 : 'intUnderscore));
# 851 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'refValue)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 220 "TexParser.fsy"
                                                                _1 
                   )
# 220 "TexParser.fsy"
                 : 'refPattern));
# 862 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'refValue)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 221 "TexParser.fsy"
                                                             _4 
                   )
# 221 "TexParser.fsy"
                 : 'refPattern));
# 873 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string*int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 224 "TexParser.fsy"
                                          analyzeDomainSpecificSingleSource (fst _1) (snd _1) |> DsAst 
                   )
# 224 "TexParser.fsy"
                 : 'refValue));
# 884 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : (string*int) list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 225 "TexParser.fsy"
                                       analyzeDomainSpecificSources _1 |> DsAst 
                   )
# 225 "TexParser.fsy"
                 : 'refValue));
# 895 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 228 "TexParser.fsy"
                                                        Int(_1) 
                   )
# 228 "TexParser.fsy"
                 : 'highPriorityFunction));
# 906 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 229 "TexParser.fsy"
                                                        Float(_1) 
                   )
# 229 "TexParser.fsy"
                 : 'highPriorityFunction));
# 917 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 230 "TexParser.fsy"
                                                        Float(Double.PositiveInfinity) 
                   )
# 230 "TexParser.fsy"
                 : 'highPriorityFunction));
# 927 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 231 "TexParser.fsy"
                                                        _2 
                   )
# 231 "TexParser.fsy"
                 : 'highPriorityFunction));
# 938 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'trigonometry)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 232 "TexParser.fsy"
                                                     _1 
                   )
# 232 "TexParser.fsy"
                 : 'highPriorityFunction));
# 949 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'sum)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 233 "TexParser.fsy"
                                                     _1 
                   )
# 233 "TexParser.fsy"
                 : 'highPriorityFunction));
# 960 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'prod)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 234 "TexParser.fsy"
                                                     _1 
                   )
# 234 "TexParser.fsy"
                 : 'highPriorityFunction));
# 971 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fact)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 235 "TexParser.fsy"
                                                     _1 
                   )
# 235 "TexParser.fsy"
                 : 'highPriorityFunction));
# 982 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'integral)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 236 "TexParser.fsy"
                                                     _1 
                   )
# 236 "TexParser.fsy"
                 : 'highPriorityFunction));
# 993 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'constant)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 237 "TexParser.fsy"
                                                     _1 
                   )
# 237 "TexParser.fsy"
                 : 'highPriorityFunction));
# 1004 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'power)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 238 "TexParser.fsy"
                                                        _1 
                   )
# 238 "TexParser.fsy"
                 : 'highPriorityFunction));
# 1015 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'frac)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 239 "TexParser.fsy"
                                                        _1 
                   )
# 239 "TexParser.fsy"
                 : 'highPriorityFunction));
# 1026 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'refPattern)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 241 "TexParser.fsy"
                                                     _1 
                   )
# 241 "TexParser.fsy"
                 : 'highPriorityFunction));
# 1037 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 242 "TexParser.fsy"
                                                     Var(_1) 
                   )
# 242 "TexParser.fsy"
                 : 'highPriorityFunction));
# 1048 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'errorRule)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 243 "TexParser.fsy"
                                                        _1 
                   )
# 243 "TexParser.fsy"
                 : 'highPriorityFunction));
# 1059 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 247 "TexParser.fsy"
                                      
                   )
# 247 "TexParser.fsy"
                 : 'sinPrefix));
# 1069 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 248 "TexParser.fsy"
                                       (ErrorTextFormatter.FunctionHasNoSlashSymbol TokenInternal.SIN, getStartPosition parseState 1) ||> report 
                   )
# 248 "TexParser.fsy"
                 : 'sinPrefix));
# 1079 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 251 "TexParser.fsy"
                                      
                   )
# 251 "TexParser.fsy"
                 : 'cosPrefix));
# 1089 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 252 "TexParser.fsy"
                                       (ErrorTextFormatter.FunctionHasNoSlashSymbol TokenInternal.COS, getStartPosition parseState 1) ||> report 
                   )
# 252 "TexParser.fsy"
                 : 'cosPrefix));
# 1099 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'sinPrefix)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'arguments)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 255 "TexParser.fsy"
                                                               
                                                                  let arg = checkForArgument TokenInternal.SIN _2 (getStartPosition parseState 2)
                                                                  Sin(arg, Int(1)) 
                                                                
                   )
# 255 "TexParser.fsy"
                 : 'trigonometry));
# 1114 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'sinPrefix)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'arguments)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'arguments)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 259 "TexParser.fsy"
                                                                  
                                                                  let arg1 = checkForArgument TokenInternal.SIN _3 (getStartPosition parseState 3)
                                                                  let arg2 = checkForArgument TokenInternal.SIN _4 (getStartPosition parseState 4)
                                                                  Sin(arg1, arg2)
                                                                
                   )
# 259 "TexParser.fsy"
                 : 'trigonometry));
# 1131 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'sinPrefix)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'arguments)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'arguments)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 264 "TexParser.fsy"
                                                                  
                                                                  (ErrorTextFormatter.MissingCaretSymbol, getEndPosition parseState 1) ||> report
                                                                  let arg1 = checkForArgument TokenInternal.SIN _2 (getStartPosition parseState 2)
                                                                  let arg2 = checkForArgument TokenInternal.SIN _3 (getStartPosition parseState 3)
                                                                  Sin(arg1, arg2)
                                                                
                   )
# 264 "TexParser.fsy"
                 : 'trigonometry));
# 1149 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'cosPrefix)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'arguments)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 270 "TexParser.fsy"
                                                                  
                                                                  let arg = checkForArgument TokenInternal.COS _2 (getStartPosition parseState 2)
                                                                  Cos(arg, Int(1))
                                                                
                   )
# 270 "TexParser.fsy"
                 : 'trigonometry));
# 1164 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'cosPrefix)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'arguments)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'arguments)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 274 "TexParser.fsy"
                                                                  
                                                                  (ErrorTextFormatter.MissingCaretSymbol, getEndPosition parseState 1) ||> report
                                                                  let arg1 = checkForArgument TokenInternal.COS _3 (getStartPosition parseState 3)
                                                                  let arg2 = checkForArgument TokenInternal.COS _4 (getStartPosition parseState 4)
                                                                  Cos(arg1, arg2)
                                                                
                   )
# 274 "TexParser.fsy"
                 : 'trigonometry));
# 1182 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 282 "TexParser.fsy"
                                                          Plus(_1, _3) 
                   )
# 282 "TexParser.fsy"
                 : 'binaryExpression));
# 1194 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 283 "TexParser.fsy"
                                                          Sub(_1, _3)  
                   )
# 283 "TexParser.fsy"
                 : 'binaryExpression));
# 1206 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 284 "TexParser.fsy"
                                                          Mul(_1, _3)  
                   )
# 284 "TexParser.fsy"
                 : 'binaryExpression));
# 1218 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 285 "TexParser.fsy"
                                                          Mul(_1, _3)  
                   )
# 285 "TexParser.fsy"
                 : 'binaryExpression));
# 1230 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 286 "TexParser.fsy"
                                                          Div(_1, _3)  
                   )
# 286 "TexParser.fsy"
                 : 'binaryExpression));
# 1242 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 287 "TexParser.fsy"
                                                          Bmod(_1, _3) 
                   )
# 287 "TexParser.fsy"
                 : 'binaryExpression));
# 1254 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 288 "TexParser.fsy"
                                                         Neg(_2)    
                   )
# 288 "TexParser.fsy"
                 : 'binaryExpression));
# 1265 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'binaryOperator)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 290 "TexParser.fsy"
                                                                    
                                                            (ErrorTextFormatter.MissingFirstOperand, getStartPosition parseState 1) ||> report
                                                            Plus(_2, _2)
                                                        
                   )
# 290 "TexParser.fsy"
                 : 'binaryExpression));
# 1280 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'binaryOperator)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 294 "TexParser.fsy"
                                                                       
                                                            (ErrorTextFormatter.MissingSecondOperand, getEndPosition parseState 2) ||> report
                                                            Plus(_1, _1)
                                                        
                   )
# 294 "TexParser.fsy"
                 : 'binaryExpression));
# 1295 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 298 "TexParser.fsy"
                                                                           
                                                 (ErrorTextFormatter.MaybeMissingBinaryOperator, getStartPosition parseState 2) ||> report
                                                 Plus(_1, _3)
                                              
                   )
# 298 "TexParser.fsy"
                 : 'binaryExpression));
# 1311 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 302 "TexParser.fsy"
                                                             
                                                 let lexeme, sPos, ePos, exVal = _2
                                                 (ErrorTextFormatter.MaybeMissingBinaryOperator, getStartPosition parseState 2) ||> report
                                                 
                                                 Plus(_1, exVal)
                                              
                   )
# 302 "TexParser.fsy"
                 : 'binaryExpression));
# 1328 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 310 "TexParser.fsy"
                                                 
                   )
# 310 "TexParser.fsy"
                 : 'binaryOperator));
# 1338 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 311 "TexParser.fsy"
                                                 
                   )
# 311 "TexParser.fsy"
                 : 'binaryOperator));
# 1348 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 312 "TexParser.fsy"
                                                 
                   )
# 312 "TexParser.fsy"
                 : 'binaryOperator));
# 1358 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 313 "TexParser.fsy"
                                                 
                   )
# 313 "TexParser.fsy"
                 : 'binaryOperator));
# 1368 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 314 "TexParser.fsy"
                                                 
                   )
# 314 "TexParser.fsy"
                 : 'binaryOperator));
# 1378 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'parens)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'parens)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 317 "TexParser.fsy"
                                                                           
                                                       checkBalancedParen (_1, getStartPosition parseState 1) (_3, getStartPosition parseState 3) ParenToken.LCURLY ParenToken.RCURLY 
                                                       Some(_2) 
                                                     
                   )
# 317 "TexParser.fsy"
                 : 'arguments));
# 1394 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'parens)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'parens)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 321 "TexParser.fsy"
                                                      
                                                       checkBalancedParen (_1, getStartPosition parseState 1) (_2, getStartPosition parseState 2) ParenToken.LCURLY ParenToken.RCURLY 
                                                       None 
                                                     
                   )
# 321 "TexParser.fsy"
                 : 'arguments));
# 1409 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 327 "TexParser.fsy"
                                                                 [_1] 
                   )
# 327 "TexParser.fsy"
                 : 'argumentSet));
# 1420 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 328 "TexParser.fsy"
                                                                            _3::_1 
                   )
# 328 "TexParser.fsy"
                 : 'argumentSet));
# 1432 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 331 "TexParser.fsy"
                                                               
                                          let lexbuf = parseState.ParserLocalStore.["LexBuffer"] :?> LexBuffer<char>
                                          let posis = parseState.GetInput(1)
                                          let posix = parseState.InputStartPosition(1)
                                          (new string(lexbuf.Lexeme), posix.Line, posix.Column, _1) 
                                      
                   )
# 331 "TexParser.fsy"
                 : 'expr));
# 1448 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 339 "TexParser.fsy"
                                                     
                                      let lexbuf = parseState.ParserLocalStore.["LexBuffer"] :?> LexBuffer<char>
                                      (new string(lexbuf.Lexeme), lexbuf.StartPos.Line, lexbuf.StartPos.Column) 
                                  
                   )
# 339 "TexParser.fsy"
                 : 'recover));
# 1461 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 345 "TexParser.fsy"
                                     ParenToken.LPAREN 
                   )
# 345 "TexParser.fsy"
                 : 'parens));
# 1471 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 346 "TexParser.fsy"
                                     ParenToken.RPAREN 
                   )
# 346 "TexParser.fsy"
                 : 'parens));
# 1481 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 347 "TexParser.fsy"
                                     ParenToken.LCURLY 
                   )
# 347 "TexParser.fsy"
                 : 'parens));
# 1491 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 348 "TexParser.fsy"
                                     ParenToken.RCURLY 
                   )
# 348 "TexParser.fsy"
                 : 'parens));
# 1501 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'arguments)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 351 "TexParser.fsy"
                                                                              
                                                                               (ErrorTextFormatter.UnexpectedFunctionName _2, getStartPosition parseState 2) ||> report
                                                                               Int(1)
                                                                             
                   )
# 351 "TexParser.fsy"
                 : 'errorRule));
# 1516 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 355 "TexParser.fsy"
                                                                    
                                                                     (ErrorTextFormatter.UnexpectedFunctionName _2, getStartPosition parseState 2) ||> report
                                                                     Int(1)
                                                                   
                   )
# 355 "TexParser.fsy"
                 : 'errorRule));
# 1530 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'arguments)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 359 "TexParser.fsy"
                                                                              
                                                                     let lexeme, sPos, ePos = _2
                                                                     let posix = getStartPosition parseState 2
                                                                     (ErrorTextFormatter.UnexpectedFunctionName lexeme, getStartPosition parseState 2) ||> report
                                                                     Int(1)
                                                                   
                   )
# 359 "TexParser.fsy"
                 : 'errorRule));
# 1547 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 365 "TexParser.fsy"
                                                                    
                                                                     let lexeme, sPos, ePos = _2
                                                                     (ErrorTextFormatter.UnexpectedFunctionName lexeme, getStartPosition parseState 2) ||> report
                                                                     Int(1)
                                                                   
                   )
# 365 "TexParser.fsy"
                 : 'errorRule));
# 1562 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 370 "TexParser.fsy"
                                                              
                                                              (ErrorTextFormatter.UnexpectedSlash, getStartPosition parseState 1) ||> report
                                                              Int(1)
                                                            
                   )
# 370 "TexParser.fsy"
                 : 'errorRule));
# 1575 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arguments)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 374 "TexParser.fsy"
                                                                  
                                                                   (ErrorTextFormatter.InvalidLRBracketExpression, getStartPosition parseState 1) ||> report
                                                                   match _1 with | Some(x) -> x.Head | None -> Int(1)
                                                                 
                   )
# 374 "TexParser.fsy"
                 : 'errorRule));
# 1589 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'parens)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 378 "TexParser.fsy"
                                                                        
                                              (ErrorTextFormatter.UnmatchedRightBracket _2, getStartPosition parseState 2) ||> report
                                              _1
                                            
                   )
# 378 "TexParser.fsy"
                 : 'errorRule));
# 1604 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'parens)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 382 "TexParser.fsy"
                                                                     
                                                                         (ErrorTextFormatter.UnmatchedLeftBracket _1, getStartPosition parseState 1) ||> report
                                                                         _2
                                                                       
                   )
# 382 "TexParser.fsy"
                 : 'errorRule));
|]
# 1620 "TexParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 39;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : TexAst.Expr =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
