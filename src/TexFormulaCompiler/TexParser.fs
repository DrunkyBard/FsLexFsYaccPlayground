// Implementation file for parser generated by fsyacc
module TexParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "TexParser.fsy"

open TexAst
open System
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing
open ErrorHandling

let mutable domainSpecificAnalyzer = Unchecked.defaultof<DomainSpecificContext -> obj>
let mutable errorLogger = Unchecked.defaultof<ErrorLogger>

let analyzeDomainSpecificLanguage token = domainSpecificAnalyzer token

let analyzeDomainSpecificSource token startPos = 
    try
      analyzeDomainSpecificLanguage token
    with
      | DomainSpecificParseException(fString, pos) -> failwithf "%s at pos: %u" fString (startPos)

let analyzeDomainSpecificSingleSource src pos = 
    analyzeDomainSpecificSource (SRefValueSrc(src)) pos |> SRefValue

let isSome = function
    | Some(_) -> true
    | None -> false

let analyzeDomainSpecificSources sources = 
    let rec analyzeDomainSpecificSourcesInternal sources state = 
        match sources with
          | [] -> state
          | (src, pos)::t -> analyzeDomainSpecificSourcesInternal t ((analyzeDomainSpecificSource (MRefValueSrc(src)) pos)::state)
        
    analyzeDomainSpecificSourcesInternal sources [] 
    |> List.rev 
    |> MRefValue

let report (parseState : IParseState) sym = 
    let lexbuf = parseState.ParserLocalStore.["LexBuffer"] :?> LexBuffer<char>
    let errorMsg = sprintf "Unexpected symbol: %s. %s symbol required" (new String(lexbuf.Lexeme)) sym
    let error = Error(errorMsg, {Line = lexbuf.StartPos.Line; Column = lexbuf.StartPos.Column})
    errorLogger.ReportError(error)


# 49 "TexParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | PI
  | EULERNUM
  | FRAC
  | SQRT
  | SUM
  | PROD
  | INTEGRAL
  | TIMES
  | INFTY
  | TO
  | LIM
  | BMOD
  | TEXT
  | SIN
  | COS
  | PLUS
  | SUB
  | MUL
  | DIV
  | LPAREN
  | RPAREN
  | LCURLY
  | RCURLY
  | EXCL
  | CARET
  | EQ
  | UNDERSCORE
  | SLASH
  | COMMA
  | MREFVAL of ((string*int) list)
  | SREFVAL of (string*int)
  | ID of (string)
  | DIFF of (string)
  | FLOAT of (float)
  | INT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_PI
    | TOKEN_EULERNUM
    | TOKEN_FRAC
    | TOKEN_SQRT
    | TOKEN_SUM
    | TOKEN_PROD
    | TOKEN_INTEGRAL
    | TOKEN_TIMES
    | TOKEN_INFTY
    | TOKEN_TO
    | TOKEN_LIM
    | TOKEN_BMOD
    | TOKEN_TEXT
    | TOKEN_SIN
    | TOKEN_COS
    | TOKEN_PLUS
    | TOKEN_SUB
    | TOKEN_MUL
    | TOKEN_DIV
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LCURLY
    | TOKEN_RCURLY
    | TOKEN_EXCL
    | TOKEN_CARET
    | TOKEN_EQ
    | TOKEN_UNDERSCORE
    | TOKEN_SLASH
    | TOKEN_COMMA
    | TOKEN_MREFVAL
    | TOKEN_SREFVAL
    | TOKEN_ID
    | TOKEN_DIFF
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_expression
    | NONTERM_constant
    | NONTERM_sum
    | NONTERM_noname
    | NONTERM_prod
    | NONTERM_fact
    | NONTERM_frac
    | NONTERM_power
    | NONTERM_integral
    | NONTERM_limit
    | NONTERM_refPattern
    | NONTERM_refValue
    | NONTERM_highPriorityFunction
    | NONTERM_trigonometry
    | NONTERM_trigName
    | NONTERM_binaryExpression
    | NONTERM_sym
    | NONTERM_binaryOperator
    | NONTERM_argumentSet
    | NONTERM_expr
    | NONTERM_recover
    | NONTERM_lCurly
    | NONTERM_rCurly
    | NONTERM_lParen
    | NONTERM_rParen
    | NONTERM_caret
    | NONTERM_errRule

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | PI  -> 1 
  | EULERNUM  -> 2 
  | FRAC  -> 3 
  | SQRT  -> 4 
  | SUM  -> 5 
  | PROD  -> 6 
  | INTEGRAL  -> 7 
  | TIMES  -> 8 
  | INFTY  -> 9 
  | TO  -> 10 
  | LIM  -> 11 
  | BMOD  -> 12 
  | TEXT  -> 13 
  | SIN  -> 14 
  | COS  -> 15 
  | PLUS  -> 16 
  | SUB  -> 17 
  | MUL  -> 18 
  | DIV  -> 19 
  | LPAREN  -> 20 
  | RPAREN  -> 21 
  | LCURLY  -> 22 
  | RCURLY  -> 23 
  | EXCL  -> 24 
  | CARET  -> 25 
  | EQ  -> 26 
  | UNDERSCORE  -> 27 
  | SLASH  -> 28 
  | COMMA  -> 29 
  | MREFVAL _ -> 30 
  | SREFVAL _ -> 31 
  | ID _ -> 32 
  | DIFF _ -> 33 
  | FLOAT _ -> 34 
  | INT _ -> 35 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_PI 
  | 2 -> TOKEN_EULERNUM 
  | 3 -> TOKEN_FRAC 
  | 4 -> TOKEN_SQRT 
  | 5 -> TOKEN_SUM 
  | 6 -> TOKEN_PROD 
  | 7 -> TOKEN_INTEGRAL 
  | 8 -> TOKEN_TIMES 
  | 9 -> TOKEN_INFTY 
  | 10 -> TOKEN_TO 
  | 11 -> TOKEN_LIM 
  | 12 -> TOKEN_BMOD 
  | 13 -> TOKEN_TEXT 
  | 14 -> TOKEN_SIN 
  | 15 -> TOKEN_COS 
  | 16 -> TOKEN_PLUS 
  | 17 -> TOKEN_SUB 
  | 18 -> TOKEN_MUL 
  | 19 -> TOKEN_DIV 
  | 20 -> TOKEN_LPAREN 
  | 21 -> TOKEN_RPAREN 
  | 22 -> TOKEN_LCURLY 
  | 23 -> TOKEN_RCURLY 
  | 24 -> TOKEN_EXCL 
  | 25 -> TOKEN_CARET 
  | 26 -> TOKEN_EQ 
  | 27 -> TOKEN_UNDERSCORE 
  | 28 -> TOKEN_SLASH 
  | 29 -> TOKEN_COMMA 
  | 30 -> TOKEN_MREFVAL 
  | 31 -> TOKEN_SREFVAL 
  | 32 -> TOKEN_ID 
  | 33 -> TOKEN_DIFF 
  | 34 -> TOKEN_FLOAT 
  | 35 -> TOKEN_INT 
  | 38 -> TOKEN_end_of_input
  | 36 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_expression 
    | 3 -> NONTERM_expression 
    | 4 -> NONTERM_constant 
    | 5 -> NONTERM_constant 
    | 6 -> NONTERM_sum 
    | 7 -> NONTERM_sum 
    | 8 -> NONTERM_sum 
    | 9 -> NONTERM_sum 
    | 10 -> NONTERM_sum 
    | 11 -> NONTERM_noname 
    | 12 -> NONTERM_prod 
    | 13 -> NONTERM_fact 
    | 14 -> NONTERM_frac 
    | 15 -> NONTERM_power 
    | 16 -> NONTERM_power 
    | 17 -> NONTERM_power 
    | 18 -> NONTERM_integral 
    | 19 -> NONTERM_integral 
    | 20 -> NONTERM_limit 
    | 21 -> NONTERM_refPattern 
    | 22 -> NONTERM_refPattern 
    | 23 -> NONTERM_refValue 
    | 24 -> NONTERM_refValue 
    | 25 -> NONTERM_highPriorityFunction 
    | 26 -> NONTERM_highPriorityFunction 
    | 27 -> NONTERM_highPriorityFunction 
    | 28 -> NONTERM_highPriorityFunction 
    | 29 -> NONTERM_highPriorityFunction 
    | 30 -> NONTERM_highPriorityFunction 
    | 31 -> NONTERM_highPriorityFunction 
    | 32 -> NONTERM_highPriorityFunction 
    | 33 -> NONTERM_highPriorityFunction 
    | 34 -> NONTERM_highPriorityFunction 
    | 35 -> NONTERM_highPriorityFunction 
    | 36 -> NONTERM_highPriorityFunction 
    | 37 -> NONTERM_highPriorityFunction 
    | 38 -> NONTERM_highPriorityFunction 
    | 39 -> NONTERM_highPriorityFunction 
    | 40 -> NONTERM_highPriorityFunction 
    | 41 -> NONTERM_trigonometry 
    | 42 -> NONTERM_trigonometry 
    | 43 -> NONTERM_trigonometry 
    | 44 -> NONTERM_trigonometry 
    | 45 -> NONTERM_trigonometry 
    | 46 -> NONTERM_trigName 
    | 47 -> NONTERM_trigName 
    | 48 -> NONTERM_binaryExpression 
    | 49 -> NONTERM_binaryExpression 
    | 50 -> NONTERM_binaryExpression 
    | 51 -> NONTERM_binaryExpression 
    | 52 -> NONTERM_binaryExpression 
    | 53 -> NONTERM_binaryExpression 
    | 54 -> NONTERM_binaryExpression 
    | 55 -> NONTERM_binaryExpression 
    | 56 -> NONTERM_binaryExpression 
    | 57 -> NONTERM_binaryExpression 
    | 58 -> NONTERM_sym 
    | 59 -> NONTERM_sym 
    | 60 -> NONTERM_binaryOperator 
    | 61 -> NONTERM_binaryOperator 
    | 62 -> NONTERM_binaryOperator 
    | 63 -> NONTERM_binaryOperator 
    | 64 -> NONTERM_binaryOperator 
    | 65 -> NONTERM_argumentSet 
    | 66 -> NONTERM_argumentSet 
    | 67 -> NONTERM_argumentSet 
    | 68 -> NONTERM_argumentSet 
    | 69 -> NONTERM_expr 
    | 70 -> NONTERM_recover 
    | 71 -> NONTERM_lCurly 
    | 72 -> NONTERM_lCurly 
    | 73 -> NONTERM_rCurly 
    | 74 -> NONTERM_rCurly 
    | 75 -> NONTERM_lParen 
    | 76 -> NONTERM_lParen 
    | 77 -> NONTERM_rParen 
    | 78 -> NONTERM_rParen 
    | 79 -> NONTERM_caret 
    | 80 -> NONTERM_caret 
    | 81 -> NONTERM_errRule 
    | 82 -> NONTERM_errRule 
    | 83 -> NONTERM_errRule 
    | 84 -> NONTERM_errRule 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 38 
let _fsyacc_tagOfErrorTerminal = 36

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | PI  -> "PI" 
  | EULERNUM  -> "EULERNUM" 
  | FRAC  -> "FRAC" 
  | SQRT  -> "SQRT" 
  | SUM  -> "SUM" 
  | PROD  -> "PROD" 
  | INTEGRAL  -> "INTEGRAL" 
  | TIMES  -> "TIMES" 
  | INFTY  -> "INFTY" 
  | TO  -> "TO" 
  | LIM  -> "LIM" 
  | BMOD  -> "BMOD" 
  | TEXT  -> "TEXT" 
  | SIN  -> "SIN" 
  | COS  -> "COS" 
  | PLUS  -> "PLUS" 
  | SUB  -> "SUB" 
  | MUL  -> "MUL" 
  | DIV  -> "DIV" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | LCURLY  -> "LCURLY" 
  | RCURLY  -> "RCURLY" 
  | EXCL  -> "EXCL" 
  | CARET  -> "CARET" 
  | EQ  -> "EQ" 
  | UNDERSCORE  -> "UNDERSCORE" 
  | SLASH  -> "SLASH" 
  | COMMA  -> "COMMA" 
  | MREFVAL _ -> "MREFVAL" 
  | SREFVAL _ -> "SREFVAL" 
  | ID _ -> "ID" 
  | DIFF _ -> "DIFF" 
  | FLOAT _ -> "FLOAT" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | PI  -> (null : System.Object) 
  | EULERNUM  -> (null : System.Object) 
  | FRAC  -> (null : System.Object) 
  | SQRT  -> (null : System.Object) 
  | SUM  -> (null : System.Object) 
  | PROD  -> (null : System.Object) 
  | INTEGRAL  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | INFTY  -> (null : System.Object) 
  | TO  -> (null : System.Object) 
  | LIM  -> (null : System.Object) 
  | BMOD  -> (null : System.Object) 
  | TEXT  -> (null : System.Object) 
  | SIN  -> (null : System.Object) 
  | COS  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | SUB  -> (null : System.Object) 
  | MUL  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LCURLY  -> (null : System.Object) 
  | RCURLY  -> (null : System.Object) 
  | EXCL  -> (null : System.Object) 
  | CARET  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | UNDERSCORE  -> (null : System.Object) 
  | SLASH  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | MREFVAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SREFVAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DIFF _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 73us; 65535us; 0us; 2us; 2us; 55us; 10us; 52us; 11us; 55us; 14us; 52us; 15us; 55us; 19us; 54us; 22us; 52us; 23us; 55us; 25us; 55us; 26us; 55us; 27us; 55us; 28us; 55us; 29us; 55us; 30us; 55us; 31us; 55us; 32us; 55us; 33us; 55us; 34us; 55us; 35us; 55us; 36us; 55us; 37us; 55us; 38us; 55us; 39us; 55us; 40us; 55us; 41us; 55us; 42us; 55us; 43us; 55us; 44us; 55us; 45us; 55us; 46us; 55us; 47us; 55us; 48us; 55us; 49us; 55us; 50us; 55us; 51us; 55us; 52us; 55us; 53us; 55us; 54us; 55us; 55us; 55us; 56us; 27us; 57us; 55us; 60us; 52us; 61us; 55us; 65us; 25us; 67us; 26us; 69us; 28us; 72us; 29us; 74us; 30us; 77us; 31us; 81us; 32us; 84us; 33us; 86us; 34us; 95us; 35us; 97us; 36us; 109us; 37us; 124us; 38us; 127us; 39us; 129us; 40us; 132us; 41us; 135us; 42us; 137us; 43us; 140us; 44us; 144us; 45us; 145us; 46us; 146us; 47us; 147us; 48us; 148us; 49us; 149us; 50us; 150us; 51us; 151us; 51us; 153us; 55us; 160us; 53us; 73us; 65535us; 0us; 116us; 2us; 116us; 10us; 116us; 11us; 116us; 14us; 116us; 15us; 116us; 19us; 116us; 22us; 116us; 23us; 116us; 25us; 116us; 26us; 116us; 27us; 116us; 28us; 116us; 29us; 116us; 30us; 116us; 31us; 116us; 32us; 116us; 33us; 116us; 34us; 116us; 35us; 116us; 36us; 116us; 37us; 116us; 38us; 116us; 39us; 116us; 40us; 116us; 41us; 116us; 42us; 116us; 43us; 116us; 44us; 116us; 45us; 116us; 46us; 116us; 47us; 116us; 48us; 116us; 49us; 116us; 50us; 116us; 51us; 116us; 52us; 116us; 53us; 116us; 54us; 116us; 55us; 116us; 56us; 116us; 57us; 116us; 60us; 116us; 61us; 116us; 65us; 116us; 67us; 116us; 69us; 116us; 72us; 116us; 74us; 116us; 77us; 116us; 81us; 116us; 84us; 116us; 86us; 116us; 95us; 116us; 97us; 116us; 109us; 116us; 124us; 116us; 127us; 116us; 129us; 116us; 132us; 116us; 135us; 116us; 137us; 116us; 140us; 116us; 144us; 116us; 145us; 116us; 146us; 116us; 147us; 116us; 148us; 116us; 149us; 116us; 150us; 116us; 151us; 116us; 153us; 116us; 160us; 116us; 73us; 65535us; 0us; 112us; 2us; 112us; 10us; 112us; 11us; 112us; 14us; 112us; 15us; 112us; 19us; 112us; 22us; 112us; 23us; 112us; 25us; 112us; 26us; 112us; 27us; 112us; 28us; 112us; 29us; 112us; 30us; 112us; 31us; 112us; 32us; 112us; 33us; 112us; 34us; 112us; 35us; 112us; 36us; 112us; 37us; 112us; 38us; 112us; 39us; 112us; 40us; 112us; 41us; 112us; 42us; 112us; 43us; 112us; 44us; 112us; 45us; 112us; 46us; 112us; 47us; 112us; 48us; 112us; 49us; 112us; 50us; 112us; 51us; 112us; 52us; 112us; 53us; 112us; 54us; 112us; 55us; 112us; 56us; 112us; 57us; 112us; 60us; 112us; 61us; 112us; 65us; 112us; 67us; 112us; 69us; 112us; 72us; 112us; 74us; 112us; 77us; 112us; 81us; 112us; 84us; 112us; 86us; 112us; 95us; 112us; 97us; 112us; 109us; 112us; 124us; 112us; 127us; 112us; 129us; 112us; 132us; 112us; 135us; 112us; 137us; 112us; 140us; 112us; 144us; 112us; 145us; 112us; 146us; 112us; 147us; 112us; 148us; 112us; 149us; 112us; 150us; 112us; 151us; 112us; 153us; 112us; 160us; 112us; 0us; 65535us; 73us; 65535us; 0us; 113us; 2us; 113us; 10us; 113us; 11us; 113us; 14us; 113us; 15us; 113us; 19us; 113us; 22us; 113us; 23us; 113us; 25us; 113us; 26us; 113us; 27us; 113us; 28us; 113us; 29us; 113us; 30us; 113us; 31us; 113us; 32us; 113us; 33us; 113us; 34us; 113us; 35us; 113us; 36us; 113us; 37us; 113us; 38us; 113us; 39us; 113us; 40us; 113us; 41us; 113us; 42us; 113us; 43us; 113us; 44us; 113us; 45us; 113us; 46us; 113us; 47us; 113us; 48us; 113us; 49us; 113us; 50us; 113us; 51us; 113us; 52us; 113us; 53us; 113us; 54us; 113us; 55us; 113us; 56us; 113us; 57us; 113us; 60us; 113us; 61us; 113us; 65us; 113us; 67us; 113us; 69us; 113us; 72us; 113us; 74us; 113us; 77us; 113us; 81us; 113us; 84us; 113us; 86us; 113us; 95us; 113us; 97us; 113us; 109us; 113us; 124us; 113us; 127us; 113us; 129us; 113us; 132us; 113us; 135us; 113us; 137us; 113us; 140us; 113us; 144us; 113us; 145us; 113us; 146us; 113us; 147us; 113us; 148us; 113us; 149us; 113us; 150us; 113us; 151us; 113us; 153us; 113us; 160us; 113us; 73us; 65535us; 0us; 114us; 2us; 114us; 10us; 114us; 11us; 114us; 14us; 114us; 15us; 114us; 19us; 114us; 22us; 114us; 23us; 114us; 25us; 114us; 26us; 114us; 27us; 114us; 28us; 114us; 29us; 114us; 30us; 114us; 31us; 114us; 32us; 114us; 33us; 114us; 34us; 114us; 35us; 114us; 36us; 114us; 37us; 114us; 38us; 114us; 39us; 114us; 40us; 114us; 41us; 114us; 42us; 114us; 43us; 114us; 44us; 114us; 45us; 114us; 46us; 114us; 47us; 114us; 48us; 114us; 49us; 114us; 50us; 114us; 51us; 114us; 52us; 114us; 53us; 114us; 54us; 114us; 55us; 114us; 56us; 114us; 57us; 114us; 60us; 114us; 61us; 114us; 65us; 114us; 67us; 114us; 69us; 114us; 72us; 114us; 74us; 114us; 77us; 114us; 81us; 114us; 84us; 114us; 86us; 114us; 95us; 114us; 97us; 114us; 109us; 114us; 124us; 114us; 127us; 114us; 129us; 114us; 132us; 114us; 135us; 114us; 137us; 114us; 140us; 114us; 144us; 114us; 145us; 114us; 146us; 114us; 147us; 114us; 148us; 114us; 149us; 114us; 150us; 114us; 151us; 114us; 153us; 114us; 160us; 114us; 73us; 65535us; 0us; 118us; 2us; 118us; 10us; 118us; 11us; 118us; 14us; 118us; 15us; 118us; 19us; 118us; 22us; 118us; 23us; 118us; 25us; 118us; 26us; 118us; 27us; 118us; 28us; 118us; 29us; 118us; 30us; 118us; 31us; 118us; 32us; 118us; 33us; 118us; 34us; 118us; 35us; 118us; 36us; 118us; 37us; 118us; 38us; 118us; 39us; 118us; 40us; 118us; 41us; 118us; 42us; 118us; 43us; 118us; 44us; 118us; 45us; 118us; 46us; 118us; 47us; 118us; 48us; 118us; 49us; 118us; 50us; 118us; 51us; 118us; 52us; 118us; 53us; 118us; 54us; 118us; 55us; 118us; 56us; 118us; 57us; 118us; 60us; 118us; 61us; 118us; 65us; 118us; 67us; 118us; 69us; 118us; 72us; 118us; 74us; 118us; 77us; 118us; 81us; 118us; 84us; 118us; 86us; 118us; 95us; 118us; 97us; 118us; 109us; 118us; 124us; 118us; 127us; 118us; 129us; 118us; 132us; 118us; 135us; 118us; 137us; 118us; 140us; 118us; 144us; 118us; 145us; 118us; 146us; 118us; 147us; 118us; 148us; 118us; 149us; 118us; 150us; 118us; 151us; 118us; 153us; 118us; 160us; 118us; 73us; 65535us; 0us; 117us; 2us; 117us; 10us; 117us; 11us; 117us; 14us; 117us; 15us; 117us; 19us; 117us; 22us; 117us; 23us; 117us; 25us; 117us; 26us; 117us; 27us; 117us; 28us; 117us; 29us; 117us; 30us; 117us; 31us; 117us; 32us; 117us; 33us; 117us; 34us; 117us; 35us; 117us; 36us; 117us; 37us; 117us; 38us; 117us; 39us; 117us; 40us; 117us; 41us; 117us; 42us; 117us; 43us; 117us; 44us; 117us; 45us; 117us; 46us; 117us; 47us; 117us; 48us; 117us; 49us; 117us; 50us; 117us; 51us; 117us; 52us; 117us; 53us; 117us; 54us; 117us; 55us; 117us; 56us; 117us; 57us; 117us; 60us; 117us; 61us; 117us; 65us; 117us; 67us; 117us; 69us; 117us; 72us; 117us; 74us; 117us; 77us; 117us; 81us; 117us; 84us; 117us; 86us; 117us; 95us; 117us; 97us; 117us; 109us; 117us; 124us; 117us; 127us; 117us; 129us; 117us; 132us; 117us; 135us; 117us; 137us; 117us; 140us; 117us; 144us; 117us; 145us; 117us; 146us; 117us; 147us; 117us; 148us; 117us; 149us; 117us; 150us; 117us; 151us; 117us; 153us; 117us; 160us; 117us; 73us; 65535us; 0us; 115us; 2us; 115us; 10us; 115us; 11us; 115us; 14us; 115us; 15us; 115us; 19us; 115us; 22us; 115us; 23us; 115us; 25us; 115us; 26us; 115us; 27us; 115us; 28us; 115us; 29us; 115us; 30us; 115us; 31us; 115us; 32us; 115us; 33us; 115us; 34us; 115us; 35us; 115us; 36us; 115us; 37us; 115us; 38us; 115us; 39us; 115us; 40us; 115us; 41us; 115us; 42us; 115us; 43us; 115us; 44us; 115us; 45us; 115us; 46us; 115us; 47us; 115us; 48us; 115us; 49us; 115us; 50us; 115us; 51us; 115us; 52us; 115us; 53us; 115us; 54us; 115us; 55us; 115us; 56us; 115us; 57us; 115us; 60us; 115us; 61us; 115us; 65us; 115us; 67us; 115us; 69us; 115us; 72us; 115us; 74us; 115us; 77us; 115us; 81us; 115us; 84us; 115us; 86us; 115us; 95us; 115us; 97us; 115us; 109us; 115us; 124us; 115us; 127us; 115us; 129us; 115us; 132us; 115us; 135us; 115us; 137us; 115us; 140us; 115us; 144us; 115us; 145us; 115us; 146us; 115us; 147us; 115us; 148us; 115us; 149us; 115us; 150us; 115us; 151us; 115us; 153us; 115us; 160us; 115us; 73us; 65535us; 0us; 119us; 2us; 119us; 10us; 119us; 11us; 119us; 14us; 119us; 15us; 119us; 19us; 119us; 22us; 119us; 23us; 119us; 25us; 119us; 26us; 119us; 27us; 119us; 28us; 119us; 29us; 119us; 30us; 119us; 31us; 119us; 32us; 119us; 33us; 119us; 34us; 119us; 35us; 119us; 36us; 119us; 37us; 119us; 38us; 119us; 39us; 119us; 40us; 119us; 41us; 119us; 42us; 119us; 43us; 119us; 44us; 119us; 45us; 119us; 46us; 119us; 47us; 119us; 48us; 119us; 49us; 119us; 50us; 119us; 51us; 119us; 52us; 119us; 53us; 119us; 54us; 119us; 55us; 119us; 56us; 119us; 57us; 119us; 60us; 119us; 61us; 119us; 65us; 119us; 67us; 119us; 69us; 119us; 72us; 119us; 74us; 119us; 77us; 119us; 81us; 119us; 84us; 119us; 86us; 119us; 95us; 119us; 97us; 119us; 109us; 119us; 124us; 119us; 127us; 119us; 129us; 119us; 132us; 119us; 135us; 119us; 137us; 119us; 140us; 119us; 144us; 119us; 145us; 119us; 146us; 119us; 147us; 119us; 148us; 119us; 149us; 119us; 150us; 119us; 151us; 119us; 153us; 119us; 160us; 119us; 73us; 65535us; 0us; 120us; 2us; 120us; 10us; 120us; 11us; 120us; 14us; 120us; 15us; 120us; 19us; 120us; 22us; 120us; 23us; 120us; 25us; 120us; 26us; 120us; 27us; 120us; 28us; 120us; 29us; 120us; 30us; 120us; 31us; 120us; 32us; 120us; 33us; 120us; 34us; 120us; 35us; 120us; 36us; 120us; 37us; 120us; 38us; 120us; 39us; 120us; 40us; 120us; 41us; 120us; 42us; 120us; 43us; 120us; 44us; 120us; 45us; 120us; 46us; 120us; 47us; 120us; 48us; 120us; 49us; 120us; 50us; 120us; 51us; 120us; 52us; 120us; 53us; 120us; 54us; 120us; 55us; 120us; 56us; 120us; 57us; 120us; 60us; 120us; 61us; 120us; 65us; 120us; 67us; 120us; 69us; 120us; 72us; 120us; 74us; 120us; 77us; 120us; 81us; 120us; 84us; 120us; 86us; 120us; 95us; 120us; 97us; 120us; 109us; 120us; 124us; 120us; 127us; 120us; 129us; 120us; 132us; 120us; 135us; 120us; 137us; 120us; 140us; 120us; 144us; 120us; 145us; 120us; 146us; 120us; 147us; 120us; 148us; 120us; 149us; 120us; 150us; 120us; 151us; 120us; 153us; 120us; 160us; 120us; 74us; 65535us; 0us; 99us; 2us; 99us; 10us; 99us; 11us; 99us; 14us; 99us; 15us; 99us; 19us; 99us; 22us; 99us; 23us; 99us; 25us; 99us; 26us; 99us; 27us; 99us; 28us; 99us; 29us; 99us; 30us; 99us; 31us; 99us; 32us; 99us; 33us; 99us; 34us; 99us; 35us; 99us; 36us; 99us; 37us; 99us; 38us; 99us; 39us; 99us; 40us; 99us; 41us; 99us; 42us; 99us; 43us; 99us; 44us; 99us; 45us; 99us; 46us; 99us; 47us; 99us; 48us; 99us; 49us; 99us; 50us; 99us; 51us; 99us; 52us; 99us; 53us; 99us; 54us; 99us; 55us; 99us; 56us; 99us; 57us; 99us; 60us; 99us; 61us; 99us; 65us; 99us; 67us; 99us; 69us; 99us; 72us; 99us; 74us; 99us; 77us; 99us; 81us; 99us; 84us; 99us; 86us; 99us; 95us; 99us; 97us; 99us; 101us; 102us; 109us; 99us; 124us; 99us; 127us; 99us; 129us; 99us; 132us; 99us; 135us; 99us; 137us; 99us; 140us; 99us; 144us; 99us; 145us; 99us; 146us; 99us; 147us; 99us; 148us; 99us; 149us; 99us; 150us; 99us; 151us; 99us; 153us; 99us; 160us; 99us; 73us; 65535us; 0us; 5us; 2us; 5us; 10us; 5us; 11us; 5us; 14us; 5us; 15us; 5us; 19us; 5us; 22us; 5us; 23us; 5us; 25us; 5us; 26us; 5us; 27us; 5us; 28us; 5us; 29us; 5us; 30us; 5us; 31us; 5us; 32us; 5us; 33us; 5us; 34us; 5us; 35us; 5us; 36us; 5us; 37us; 5us; 38us; 5us; 39us; 5us; 40us; 5us; 41us; 5us; 42us; 5us; 43us; 5us; 44us; 5us; 45us; 5us; 46us; 5us; 47us; 5us; 48us; 5us; 49us; 5us; 50us; 5us; 51us; 5us; 52us; 5us; 53us; 5us; 54us; 5us; 55us; 5us; 56us; 5us; 57us; 5us; 60us; 5us; 61us; 5us; 65us; 5us; 67us; 5us; 69us; 5us; 72us; 5us; 74us; 5us; 77us; 5us; 81us; 5us; 84us; 5us; 86us; 5us; 95us; 5us; 97us; 5us; 109us; 5us; 124us; 5us; 127us; 5us; 129us; 5us; 132us; 5us; 135us; 5us; 137us; 5us; 140us; 5us; 144us; 5us; 145us; 5us; 146us; 5us; 147us; 5us; 148us; 5us; 149us; 5us; 150us; 5us; 151us; 5us; 153us; 5us; 160us; 5us; 73us; 65535us; 0us; 111us; 2us; 111us; 10us; 111us; 11us; 111us; 14us; 111us; 15us; 111us; 19us; 111us; 22us; 111us; 23us; 111us; 25us; 111us; 26us; 111us; 27us; 111us; 28us; 111us; 29us; 111us; 30us; 111us; 31us; 111us; 32us; 111us; 33us; 111us; 34us; 111us; 35us; 111us; 36us; 111us; 37us; 111us; 38us; 111us; 39us; 111us; 40us; 111us; 41us; 111us; 42us; 111us; 43us; 111us; 44us; 111us; 45us; 111us; 46us; 111us; 47us; 111us; 48us; 111us; 49us; 111us; 50us; 111us; 51us; 111us; 52us; 111us; 53us; 111us; 54us; 111us; 55us; 111us; 56us; 111us; 57us; 111us; 60us; 111us; 61us; 111us; 65us; 111us; 67us; 111us; 69us; 111us; 72us; 111us; 74us; 111us; 77us; 111us; 81us; 111us; 84us; 111us; 86us; 111us; 95us; 111us; 97us; 111us; 109us; 111us; 124us; 111us; 127us; 111us; 129us; 111us; 132us; 111us; 135us; 111us; 137us; 111us; 140us; 111us; 144us; 111us; 145us; 111us; 146us; 111us; 147us; 111us; 148us; 111us; 149us; 111us; 150us; 111us; 151us; 111us; 153us; 111us; 160us; 111us; 3us; 65535us; 18us; 139us; 19us; 139us; 20us; 139us; 73us; 65535us; 0us; 4us; 2us; 4us; 10us; 4us; 11us; 4us; 14us; 4us; 15us; 4us; 19us; 4us; 22us; 4us; 23us; 4us; 25us; 4us; 26us; 4us; 27us; 4us; 28us; 4us; 29us; 4us; 30us; 4us; 31us; 4us; 32us; 4us; 33us; 4us; 34us; 4us; 35us; 4us; 36us; 4us; 37us; 4us; 38us; 4us; 39us; 4us; 40us; 4us; 41us; 4us; 42us; 4us; 43us; 4us; 44us; 4us; 45us; 4us; 46us; 4us; 47us; 4us; 48us; 4us; 49us; 4us; 50us; 4us; 51us; 4us; 52us; 4us; 53us; 4us; 54us; 4us; 55us; 4us; 56us; 4us; 57us; 4us; 60us; 4us; 61us; 4us; 65us; 4us; 67us; 4us; 69us; 4us; 72us; 4us; 74us; 4us; 77us; 4us; 81us; 4us; 84us; 4us; 86us; 4us; 95us; 4us; 97us; 4us; 109us; 4us; 124us; 4us; 127us; 4us; 129us; 4us; 132us; 4us; 135us; 4us; 137us; 4us; 140us; 4us; 144us; 4us; 145us; 4us; 146us; 4us; 147us; 4us; 148us; 4us; 149us; 4us; 150us; 4us; 151us; 4us; 153us; 4us; 160us; 4us; 32us; 65535us; 2us; 153us; 25us; 153us; 26us; 153us; 27us; 153us; 28us; 153us; 29us; 153us; 30us; 153us; 31us; 153us; 32us; 153us; 33us; 153us; 34us; 153us; 35us; 153us; 36us; 153us; 37us; 153us; 38us; 153us; 39us; 153us; 40us; 153us; 41us; 153us; 42us; 153us; 43us; 153us; 44us; 153us; 45us; 153us; 46us; 153us; 47us; 153us; 48us; 153us; 49us; 153us; 50us; 153us; 51us; 153us; 52us; 153us; 53us; 153us; 54us; 153us; 55us; 153us; 73us; 65535us; 0us; 150us; 2us; 151us; 10us; 150us; 11us; 150us; 14us; 150us; 15us; 150us; 19us; 150us; 22us; 150us; 23us; 150us; 25us; 151us; 26us; 151us; 27us; 151us; 28us; 151us; 29us; 151us; 30us; 151us; 31us; 151us; 32us; 151us; 33us; 151us; 34us; 151us; 35us; 151us; 36us; 151us; 37us; 151us; 38us; 151us; 39us; 151us; 40us; 151us; 41us; 151us; 42us; 151us; 43us; 151us; 44us; 151us; 45us; 151us; 46us; 151us; 47us; 151us; 48us; 151us; 49us; 151us; 50us; 151us; 51us; 151us; 52us; 151us; 53us; 151us; 54us; 151us; 55us; 151us; 56us; 150us; 57us; 150us; 60us; 150us; 61us; 150us; 65us; 150us; 67us; 150us; 69us; 150us; 72us; 150us; 74us; 150us; 77us; 150us; 81us; 150us; 84us; 150us; 86us; 150us; 95us; 150us; 97us; 150us; 109us; 150us; 124us; 150us; 127us; 150us; 129us; 150us; 132us; 150us; 135us; 150us; 137us; 150us; 140us; 150us; 144us; 150us; 145us; 150us; 146us; 150us; 147us; 150us; 148us; 150us; 149us; 150us; 150us; 150us; 151us; 150us; 153us; 150us; 160us; 150us; 5us; 65535us; 10us; 11us; 14us; 15us; 22us; 23us; 56us; 57us; 60us; 61us; 38us; 65535us; 2us; 152us; 11us; 161us; 15us; 161us; 23us; 161us; 25us; 152us; 26us; 152us; 27us; 152us; 28us; 152us; 29us; 152us; 30us; 152us; 31us; 152us; 32us; 152us; 33us; 152us; 34us; 152us; 35us; 152us; 36us; 152us; 37us; 152us; 38us; 152us; 39us; 152us; 40us; 152us; 41us; 152us; 42us; 152us; 43us; 152us; 44us; 152us; 45us; 152us; 46us; 152us; 47us; 152us; 48us; 152us; 49us; 152us; 50us; 152us; 51us; 152us; 52us; 152us; 53us; 152us; 54us; 152us; 55us; 152us; 57us; 161us; 61us; 161us; 153us; 154us; 63us; 65535us; 2us; 167us; 8us; 13us; 9us; 164us; 10us; 167us; 11us; 167us; 13us; 164us; 15us; 167us; 21us; 164us; 23us; 167us; 25us; 167us; 26us; 167us; 27us; 167us; 28us; 167us; 29us; 167us; 30us; 167us; 31us; 167us; 32us; 167us; 33us; 167us; 34us; 167us; 35us; 167us; 36us; 167us; 37us; 167us; 38us; 167us; 39us; 167us; 40us; 167us; 41us; 167us; 42us; 167us; 43us; 167us; 44us; 167us; 45us; 167us; 46us; 167us; 47us; 167us; 48us; 167us; 49us; 167us; 50us; 167us; 51us; 167us; 52us; 167us; 53us; 167us; 54us; 167us; 55us; 167us; 57us; 167us; 59us; 164us; 61us; 167us; 64us; 164us; 66us; 164us; 70us; 164us; 71us; 164us; 76us; 164us; 80us; 164us; 83us; 164us; 85us; 164us; 89us; 167us; 92us; 164us; 96us; 164us; 100us; 164us; 102us; 167us; 123us; 165us; 126us; 164us; 128us; 164us; 131us; 165us; 134us; 164us; 136us; 164us; 139us; 164us; 22us; 65535us; 9us; 10us; 13us; 14us; 21us; 22us; 59us; 60us; 64us; 65us; 66us; 67us; 70us; 74us; 71us; 72us; 76us; 77us; 80us; 81us; 83us; 84us; 85us; 86us; 92us; 93us; 96us; 97us; 100us; 101us; 123us; 124us; 126us; 127us; 128us; 129us; 131us; 132us; 134us; 135us; 136us; 137us; 139us; 140us; 40us; 65535us; 2us; 169us; 10us; 17us; 11us; 12us; 15us; 16us; 23us; 24us; 25us; 66us; 26us; 68us; 27us; 70us; 28us; 70us; 29us; 73us; 30us; 75us; 31us; 78us; 32us; 82us; 33us; 85us; 34us; 87us; 35us; 96us; 36us; 98us; 37us; 169us; 38us; 125us; 39us; 128us; 40us; 130us; 41us; 133us; 42us; 136us; 43us; 138us; 44us; 141us; 45us; 169us; 46us; 169us; 47us; 169us; 48us; 169us; 49us; 169us; 50us; 169us; 51us; 169us; 52us; 169us; 53us; 169us; 54us; 169us; 55us; 169us; 57us; 58us; 61us; 62us; 89us; 90us; 102us; 103us; 0us; 65535us; 0us; 65535us; 2us; 65535us; 123us; 126us; 131us; 134us; 73us; 65535us; 0us; 122us; 2us; 122us; 10us; 122us; 11us; 122us; 14us; 122us; 15us; 122us; 19us; 122us; 22us; 122us; 23us; 122us; 25us; 122us; 26us; 122us; 27us; 122us; 28us; 122us; 29us; 122us; 30us; 122us; 31us; 122us; 32us; 122us; 33us; 122us; 34us; 122us; 35us; 122us; 36us; 122us; 37us; 122us; 38us; 122us; 39us; 122us; 40us; 122us; 41us; 122us; 42us; 122us; 43us; 122us; 44us; 122us; 45us; 122us; 46us; 122us; 47us; 122us; 48us; 122us; 49us; 122us; 50us; 122us; 51us; 122us; 52us; 122us; 53us; 122us; 54us; 122us; 55us; 122us; 56us; 122us; 57us; 122us; 60us; 122us; 61us; 122us; 65us; 122us; 67us; 122us; 69us; 122us; 72us; 122us; 74us; 122us; 77us; 122us; 81us; 122us; 84us; 122us; 86us; 122us; 95us; 122us; 97us; 122us; 109us; 122us; 124us; 122us; 127us; 122us; 129us; 122us; 132us; 122us; 135us; 122us; 137us; 122us; 140us; 122us; 144us; 122us; 145us; 122us; 146us; 122us; 147us; 122us; 148us; 122us; 149us; 122us; 150us; 122us; 151us; 122us; 153us; 122us; 160us; 122us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 77us; 151us; 225us; 226us; 300us; 374us; 448us; 522us; 596us; 670us; 744us; 819us; 893us; 967us; 971us; 1045us; 1078us; 1152us; 1158us; 1197us; 1261us; 1284us; 1325us; 1326us; 1327us; 1330us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 12us; 1us; 10us; 17us; 48us; 49us; 50us; 51us; 52us; 55us; 56us; 57us; 82us; 1us; 1us; 1us; 2us; 2us; 3us; 13us; 1us; 4us; 1us; 5us; 14us; 6us; 7us; 8us; 12us; 14us; 18us; 19us; 20us; 22us; 27us; 41us; 42us; 43us; 44us; 2us; 6us; 8us; 2us; 6us; 8us; 4us; 6us; 66us; 67us; 68us; 1us; 6us; 1us; 7us; 1us; 7us; 4us; 7us; 66us; 67us; 68us; 1us; 7us; 1us; 8us; 2us; 9us; 45us; 4us; 9us; 45us; 67us; 70us; 3us; 9us; 45us; 70us; 1us; 9us; 1us; 9us; 4us; 9us; 66us; 67us; 68us; 1us; 9us; 12us; 10us; 14us; 17us; 48us; 49us; 50us; 51us; 52us; 55us; 56us; 57us; 82us; 12us; 10us; 14us; 17us; 48us; 49us; 50us; 51us; 52us; 55us; 56us; 57us; 82us; 16us; 10us; 15us; 16us; 17us; 48us; 49us; 50us; 51us; 52us; 55us; 56us; 57us; 65us; 81us; 82us; 84us; 15us; 10us; 15us; 16us; 17us; 48us; 49us; 50us; 51us; 52us; 55us; 56us; 57us; 81us; 82us; 84us; 12us; 10us; 15us; 17us; 48us; 49us; 50us; 51us; 52us; 55us; 56us; 57us; 82us; 12us; 10us; 16us; 17us; 48us; 49us; 50us; 51us; 52us; 55us; 56us; 57us; 82us; 12us; 10us; 17us; 17us; 48us; 49us; 50us; 51us; 52us; 55us; 56us; 57us; 82us; 13us; 10us; 17us; 18us; 19us; 48us; 49us; 50us; 51us; 52us; 55us; 56us; 57us; 82us; 13us; 10us; 17us; 18us; 19us; 48us; 49us; 50us; 51us; 52us; 55us; 56us; 57us; 82us; 13us; 10us; 17us; 18us; 19us; 48us; 49us; 50us; 51us; 52us; 55us; 56us; 57us; 82us; 12us; 10us; 17us; 20us; 48us; 49us; 50us; 51us; 52us; 55us; 56us; 57us; 82us; 12us; 10us; 17us; 20us; 48us; 49us; 50us; 51us; 52us; 55us; 56us; 57us; 82us; 13us; 10us; 17us; 28us; 48us; 49us; 50us; 51us; 52us; 55us; 56us; 57us; 82us; 83us; 12us; 10us; 17us; 41us; 48us; 49us; 50us; 51us; 52us; 55us; 56us; 57us; 82us; 12us; 10us; 17us; 42us; 48us; 49us; 50us; 51us; 52us; 55us; 56us; 57us; 82us; 12us; 10us; 17us; 42us; 48us; 49us; 50us; 51us; 52us; 55us; 56us; 57us; 82us; 12us; 10us; 17us; 43us; 48us; 49us; 50us; 51us; 52us; 55us; 56us; 57us; 82us; 12us; 10us; 17us; 44us; 48us; 49us; 50us; 51us; 52us; 55us; 56us; 57us; 82us; 12us; 10us; 17us; 44us; 48us; 49us; 50us; 51us; 52us; 55us; 56us; 57us; 82us; 12us; 10us; 17us; 45us; 48us; 49us; 50us; 51us; 52us; 55us; 56us; 57us; 82us; 12us; 10us; 17us; 48us; 48us; 49us; 50us; 51us; 52us; 55us; 56us; 57us; 82us; 13us; 10us; 17us; 48us; 49us; 49us; 50us; 51us; 52us; 53us; 55us; 56us; 57us; 82us; 12us; 10us; 17us; 48us; 49us; 50us; 50us; 51us; 52us; 55us; 56us; 57us; 82us; 12us; 10us; 17us; 48us; 49us; 50us; 51us; 51us; 52us; 55us; 56us; 57us; 82us; 12us; 10us; 17us; 48us; 49us; 50us; 51us; 52us; 52us; 55us; 56us; 57us; 82us; 12us; 10us; 17us; 48us; 49us; 50us; 51us; 52us; 53us; 55us; 56us; 57us; 82us; 12us; 10us; 17us; 48us; 49us; 50us; 51us; 52us; 54us; 55us; 56us; 57us; 82us; 12us; 10us; 17us; 48us; 49us; 50us; 51us; 52us; 55us; 56us; 57us; 65us; 82us; 12us; 10us; 17us; 48us; 49us; 50us; 51us; 52us; 55us; 56us; 57us; 66us; 82us; 12us; 10us; 17us; 48us; 49us; 50us; 51us; 52us; 55us; 56us; 57us; 67us; 82us; 12us; 10us; 17us; 48us; 49us; 50us; 51us; 52us; 55us; 56us; 57us; 69us; 82us; 5us; 10us; 15us; 16us; 81us; 84us; 4us; 10us; 66us; 67us; 68us; 1us; 10us; 1us; 12us; 1us; 12us; 4us; 12us; 66us; 67us; 68us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 14us; 2us; 14us; 82us; 1us; 14us; 2us; 14us; 82us; 4us; 15us; 16us; 81us; 84us; 4us; 15us; 16us; 81us; 82us; 1us; 15us; 1us; 15us; 2us; 15us; 82us; 1us; 16us; 2us; 16us; 82us; 2us; 17us; 59us; 1us; 17us; 2us; 17us; 82us; 2us; 18us; 19us; 2us; 18us; 19us; 2us; 18us; 19us; 3us; 18us; 19us; 82us; 2us; 18us; 19us; 2us; 18us; 19us; 3us; 18us; 19us; 82us; 2us; 18us; 19us; 2us; 18us; 82us; 1us; 18us; 1us; 19us; 1us; 19us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 20us; 2us; 20us; 82us; 1us; 20us; 2us; 20us; 82us; 1us; 21us; 1us; 22us; 1us; 22us; 1us; 22us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 26us; 1us; 27us; 2us; 28us; 83us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 33us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 37us; 1us; 38us; 1us; 39us; 1us; 40us; 2us; 41us; 42us; 1us; 41us; 2us; 41us; 82us; 1us; 42us; 1us; 42us; 2us; 42us; 82us; 1us; 42us; 2us; 42us; 82us; 2us; 43us; 44us; 1us; 43us; 2us; 43us; 82us; 1us; 44us; 1us; 44us; 2us; 44us; 82us; 1us; 44us; 2us; 44us; 82us; 1us; 45us; 1us; 45us; 2us; 45us; 82us; 1us; 46us; 1us; 47us; 2us; 48us; 60us; 3us; 49us; 53us; 61us; 2us; 50us; 62us; 2us; 51us; 63us; 2us; 52us; 64us; 2us; 53us; 61us; 1us; 54us; 2us; 54us; 55us; 1us; 56us; 1us; 57us; 1us; 57us; 1us; 58us; 1us; 60us; 1us; 62us; 1us; 63us; 1us; 64us; 1us; 66us; 1us; 68us; 1us; 70us; 1us; 71us; 1us; 72us; 2us; 72us; 80us; 1us; 73us; 1us; 74us; 1us; 79us; 1us; 82us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 17us; 19us; 21us; 24us; 26us; 28us; 43us; 46us; 49us; 54us; 56us; 58us; 60us; 65us; 67us; 69us; 72us; 77us; 81us; 83us; 85us; 90us; 92us; 105us; 118us; 135us; 151us; 164us; 177us; 190us; 204us; 218us; 232us; 245us; 258us; 272us; 285us; 298us; 311us; 324us; 337us; 350us; 363us; 376us; 390us; 403us; 416us; 429us; 442us; 455us; 468us; 481us; 494us; 507us; 513us; 518us; 520us; 522us; 524us; 529us; 531us; 533us; 535us; 537us; 540us; 542us; 545us; 550us; 555us; 557us; 559us; 562us; 564us; 567us; 570us; 572us; 575us; 578us; 581us; 584us; 588us; 591us; 594us; 598us; 601us; 604us; 606us; 608us; 610us; 612us; 614us; 616us; 618us; 620us; 623us; 625us; 628us; 630us; 632us; 634us; 636us; 638us; 640us; 642us; 644us; 646us; 648us; 651us; 653us; 655us; 657us; 659us; 661us; 663us; 665us; 667us; 669us; 671us; 673us; 675us; 677us; 680us; 682us; 685us; 687us; 689us; 692us; 694us; 697us; 700us; 702us; 705us; 707us; 709us; 712us; 714us; 717us; 719us; 721us; 724us; 726us; 728us; 731us; 735us; 738us; 741us; 744us; 747us; 749us; 752us; 754us; 756us; 758us; 760us; 762us; 764us; 766us; 768us; 770us; 772us; 774us; 776us; 778us; 781us; 783us; 785us; 787us; |]
let _fsyacc_action_rows = 170
let _fsyacc_actionTableElements = [|16us; 32768us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 28us; 8us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 18us; 0us; 49152us; 20us; 32768us; 0us; 3us; 1us; 6us; 2us; 7us; 12us; 148us; 16us; 144us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 109us; 22us; 56us; 23us; 166us; 25us; 76us; 28us; 8us; 29us; 155us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 20us; 0us; 16385us; 0us; 16386us; 1us; 16387us; 24us; 63us; 0us; 16388us; 0us; 16389us; 10us; 32768us; 3us; 64us; 5us; 9us; 6us; 59us; 7us; 79us; 9us; 108us; 11us; 91us; 13us; 100us; 14us; 123us; 15us; 131us; 36us; 162us; 2us; 32768us; 22us; 163us; 36us; 162us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 23us; 166us; 28us; 8us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 20us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 23us; 166us; 28us; 8us; 29us; 160us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 19us; 0us; 16390us; 2us; 32768us; 22us; 163us; 36us; 162us; 16us; 32768us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 28us; 8us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 18us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 23us; 166us; 28us; 8us; 29us; 160us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 19us; 0us; 16391us; 0us; 16392us; 3us; 32768us; 5us; 21us; 14us; 142us; 15us; 143us; 19us; 16454us; 1us; 6us; 2us; 7us; 5us; 21us; 12us; 159us; 14us; 142us; 15us; 143us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 28us; 8us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 18us; 3us; 16454us; 5us; 21us; 14us; 142us; 15us; 143us; 2us; 32768us; 22us; 163us; 36us; 162us; 16us; 32768us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 28us; 8us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 18us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 23us; 166us; 28us; 8us; 29us; 160us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 19us; 0us; 16393us; 19us; 32768us; 1us; 6us; 2us; 7us; 12us; 148us; 16us; 144us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 109us; 22us; 56us; 23us; 166us; 25us; 76us; 28us; 8us; 29us; 155us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 20us; 19us; 32768us; 1us; 6us; 2us; 7us; 12us; 148us; 16us; 144us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 109us; 22us; 56us; 23us; 166us; 25us; 76us; 28us; 8us; 29us; 155us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 20us; 19us; 16449us; 0us; 16468us; 1us; 6us; 2us; 7us; 12us; 148us; 16us; 144us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 109us; 21us; 16468us; 24us; 16468us; 25us; 76us; 28us; 8us; 30us; 105us; 31us; 104us; 33us; 16468us; 34us; 107us; 35us; 106us; 36us; 20us; 19us; 16468us; 1us; 6us; 2us; 7us; 12us; 148us; 16us; 144us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 109us; 22us; 56us; 23us; 166us; 25us; 76us; 28us; 8us; 29us; 155us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 20us; 19us; 32768us; 1us; 6us; 2us; 7us; 12us; 148us; 16us; 144us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 109us; 22us; 56us; 23us; 166us; 25us; 76us; 28us; 8us; 29us; 155us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 20us; 19us; 32768us; 1us; 6us; 2us; 7us; 12us; 148us; 16us; 144us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 109us; 22us; 56us; 23us; 166us; 25us; 76us; 28us; 8us; 29us; 155us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 20us; 19us; 32768us; 1us; 6us; 2us; 7us; 12us; 148us; 16us; 144us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 109us; 22us; 56us; 23us; 166us; 25us; 76us; 28us; 8us; 29us; 155us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 20us; 19us; 32768us; 1us; 6us; 2us; 7us; 12us; 148us; 16us; 144us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 109us; 22us; 56us; 23us; 166us; 25us; 76us; 28us; 8us; 29us; 155us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 20us; 19us; 32768us; 1us; 6us; 2us; 7us; 12us; 148us; 16us; 144us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 109us; 22us; 56us; 23us; 166us; 25us; 76us; 28us; 8us; 29us; 155us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 20us; 20us; 32768us; 1us; 6us; 2us; 7us; 12us; 148us; 16us; 144us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 109us; 22us; 56us; 23us; 166us; 25us; 76us; 28us; 8us; 29us; 155us; 30us; 105us; 31us; 104us; 32us; 121us; 33us; 89us; 34us; 107us; 35us; 106us; 36us; 20us; 19us; 32768us; 1us; 6us; 2us; 7us; 12us; 148us; 16us; 144us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 109us; 22us; 56us; 23us; 166us; 25us; 76us; 28us; 8us; 29us; 155us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 20us; 19us; 32768us; 1us; 6us; 2us; 7us; 12us; 148us; 16us; 144us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 109us; 22us; 56us; 23us; 166us; 25us; 76us; 28us; 8us; 29us; 155us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 20us; 20us; 16467us; 1us; 6us; 2us; 7us; 12us; 148us; 16us; 144us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 109us; 21us; 110us; 22us; 56us; 23us; 166us; 25us; 76us; 28us; 8us; 29us; 155us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 20us; 19us; 32768us; 1us; 6us; 2us; 7us; 12us; 148us; 16us; 144us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 109us; 22us; 56us; 23us; 166us; 25us; 76us; 28us; 8us; 29us; 155us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 20us; 19us; 32768us; 1us; 6us; 2us; 7us; 12us; 148us; 16us; 144us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 109us; 22us; 56us; 23us; 166us; 25us; 76us; 28us; 8us; 29us; 155us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 20us; 19us; 32768us; 1us; 6us; 2us; 7us; 12us; 148us; 16us; 144us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 109us; 22us; 56us; 23us; 166us; 25us; 76us; 28us; 8us; 29us; 155us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 20us; 19us; 32768us; 1us; 6us; 2us; 7us; 12us; 148us; 16us; 144us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 109us; 22us; 56us; 23us; 166us; 25us; 76us; 28us; 8us; 29us; 155us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 20us; 19us; 32768us; 1us; 6us; 2us; 7us; 12us; 148us; 16us; 144us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 109us; 22us; 56us; 23us; 166us; 25us; 76us; 28us; 8us; 29us; 155us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 20us; 19us; 32768us; 1us; 6us; 2us; 7us; 12us; 148us; 16us; 144us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 109us; 22us; 56us; 23us; 166us; 25us; 76us; 28us; 8us; 29us; 155us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 20us; 19us; 32768us; 1us; 6us; 2us; 7us; 12us; 148us; 16us; 144us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 109us; 22us; 56us; 23us; 166us; 25us; 76us; 28us; 8us; 29us; 155us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 20us; 13us; 16432us; 1us; 6us; 2us; 7us; 12us; 148us; 18us; 146us; 19us; 147us; 20us; 109us; 25us; 76us; 28us; 8us; 30us; 105us; 31us; 104us; 34us; 107us; 35us; 106us; 36us; 20us; 13us; 16433us; 1us; 6us; 2us; 7us; 12us; 16437us; 18us; 16437us; 19us; 16437us; 20us; 109us; 25us; 76us; 28us; 8us; 30us; 105us; 31us; 104us; 34us; 107us; 35us; 106us; 36us; 20us; 10us; 16434us; 1us; 6us; 2us; 7us; 20us; 109us; 25us; 76us; 28us; 8us; 30us; 105us; 31us; 104us; 34us; 107us; 35us; 106us; 36us; 20us; 10us; 16435us; 1us; 6us; 2us; 7us; 20us; 109us; 25us; 76us; 28us; 8us; 30us; 105us; 31us; 104us; 34us; 107us; 35us; 106us; 36us; 20us; 10us; 16436us; 1us; 6us; 2us; 7us; 20us; 109us; 25us; 76us; 28us; 8us; 30us; 105us; 31us; 104us; 34us; 107us; 35us; 106us; 36us; 20us; 10us; 16437us; 1us; 6us; 2us; 7us; 20us; 109us; 25us; 76us; 28us; 8us; 30us; 105us; 31us; 104us; 34us; 107us; 35us; 106us; 36us; 20us; 19us; 16438us; 1us; 6us; 2us; 7us; 12us; 148us; 16us; 144us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 109us; 22us; 56us; 23us; 166us; 25us; 76us; 28us; 8us; 29us; 155us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 20us; 15us; 16449us; 1us; 6us; 2us; 7us; 12us; 148us; 16us; 144us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 109us; 25us; 76us; 28us; 8us; 30us; 105us; 31us; 104us; 34us; 107us; 35us; 106us; 36us; 20us; 16us; 16450us; 1us; 6us; 2us; 7us; 12us; 148us; 16us; 144us; 17us; 145us; 18us; 146us; 19us; 147us; 20us; 109us; 25us; 76us; 28us; 8us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 20us; 10us; 16451us; 1us; 6us; 2us; 7us; 20us; 109us; 25us; 76us; 28us; 8us; 30us; 105us; 31us; 104us; 34us; 107us; 35us; 106us; 36us; 20us; 10us; 16453us; 1us; 6us; 2us; 7us; 20us; 109us; 25us; 76us; 28us; 8us; 30us; 105us; 31us; 104us; 34us; 107us; 35us; 106us; 36us; 20us; 16us; 32768us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 28us; 8us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 18us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 23us; 166us; 28us; 8us; 29us; 160us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 19us; 0us; 16394us; 2us; 32768us; 22us; 163us; 36us; 162us; 16us; 32768us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 28us; 8us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 18us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 23us; 166us; 28us; 8us; 29us; 160us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 19us; 0us; 16396us; 0us; 16397us; 2us; 32768us; 22us; 163us; 36us; 162us; 16us; 32768us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 28us; 8us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 18us; 2us; 16466us; 22us; 163us; 36us; 162us; 16us; 32768us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 28us; 8us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 18us; 0us; 16398us; 16us; 32768us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 28us; 8us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 18us; 3us; 16465us; 22us; 163us; 25us; 71us; 36us; 162us; 2us; 32768us; 22us; 163us; 36us; 162us; 16us; 32768us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 28us; 8us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 18us; 0us; 16399us; 16us; 32768us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 28us; 8us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 18us; 0us; 16400us; 2us; 16443us; 22us; 163us; 36us; 162us; 16us; 32768us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 28us; 8us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 18us; 0us; 16401us; 1us; 32768us; 27us; 80us; 2us; 32768us; 22us; 163us; 36us; 162us; 16us; 32768us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 28us; 8us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 18us; 1us; 16466us; 25us; 83us; 2us; 32768us; 22us; 163us; 36us; 162us; 16us; 32768us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 28us; 8us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 18us; 2us; 16466us; 22us; 163us; 36us; 162us; 16us; 32768us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 28us; 8us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 18us; 1us; 16466us; 33us; 88us; 0us; 16402us; 2us; 32768us; 23us; 166us; 36us; 162us; 0us; 16403us; 1us; 32768us; 27us; 92us; 2us; 32768us; 22us; 163us; 36us; 162us; 1us; 32768us; 32us; 94us; 1us; 32768us; 10us; 95us; 16us; 32768us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 28us; 8us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 18us; 2us; 16466us; 22us; 163us; 36us; 162us; 16us; 32768us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 28us; 8us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 18us; 0us; 16404us; 0us; 16405us; 2us; 32768us; 22us; 163us; 36us; 162us; 2us; 32768us; 30us; 105us; 31us; 104us; 2us; 32768us; 23us; 166us; 36us; 162us; 0us; 16406us; 0us; 16407us; 0us; 16408us; 0us; 16409us; 0us; 16410us; 0us; 16411us; 16us; 32768us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 28us; 8us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 18us; 0us; 16412us; 0us; 16413us; 0us; 16414us; 0us; 16415us; 0us; 16416us; 0us; 16417us; 0us; 16418us; 0us; 16419us; 0us; 16420us; 0us; 16421us; 0us; 16422us; 0us; 16423us; 0us; 16424us; 3us; 32768us; 22us; 163us; 25us; 168us; 36us; 162us; 16us; 32768us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 28us; 8us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 18us; 0us; 16425us; 2us; 32768us; 22us; 163us; 36us; 162us; 16us; 32768us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 28us; 8us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 18us; 2us; 16466us; 22us; 163us; 36us; 162us; 16us; 32768us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 28us; 8us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 18us; 0us; 16426us; 3us; 32768us; 22us; 163us; 25us; 168us; 36us; 162us; 16us; 32768us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 28us; 8us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 18us; 0us; 16427us; 2us; 32768us; 22us; 163us; 36us; 162us; 16us; 32768us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 28us; 8us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 18us; 2us; 16466us; 22us; 163us; 36us; 162us; 16us; 32768us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 28us; 8us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 18us; 0us; 16428us; 2us; 32768us; 22us; 163us; 36us; 162us; 16us; 32768us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 28us; 8us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 18us; 0us; 16429us; 0us; 16430us; 0us; 16431us; 16us; 16444us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 28us; 8us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 18us; 16us; 16445us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 28us; 8us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 18us; 16us; 16446us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 28us; 8us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 18us; 16us; 16447us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 28us; 8us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 18us; 16us; 16448us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 28us; 8us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 18us; 16us; 16445us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 28us; 8us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 18us; 16us; 32768us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 28us; 8us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 18us; 16us; 16439us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 28us; 8us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 18us; 0us; 16440us; 16us; 32768us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 28us; 8us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 18us; 0us; 16441us; 0us; 16442us; 0us; 16444us; 0us; 16446us; 0us; 16447us; 0us; 16448us; 16us; 32768us; 1us; 6us; 2us; 7us; 12us; 159us; 16us; 156us; 17us; 149us; 18us; 157us; 19us; 158us; 20us; 109us; 22us; 69us; 28us; 8us; 30us; 105us; 31us; 104us; 32us; 121us; 34us; 107us; 35us; 106us; 36us; 18us; 0us; 16452us; 0us; 16454us; 0us; 16455us; 0us; 16456us; 0us; 16456us; 0us; 16457us; 0us; 16458us; 0us; 16463us; 0us; 16466us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 17us; 18us; 39us; 40us; 41us; 43us; 44us; 45us; 56us; 59us; 77us; 96us; 97us; 100us; 117us; 136us; 137us; 138us; 142us; 162us; 166us; 169us; 186us; 205us; 206us; 226us; 246us; 266us; 286us; 306us; 326us; 346us; 366us; 386us; 407us; 427us; 447us; 468us; 488us; 508us; 528us; 548us; 568us; 588us; 608us; 622us; 636us; 647us; 658us; 669us; 680us; 700us; 716us; 733us; 744us; 755us; 772us; 791us; 792us; 795us; 812us; 831us; 832us; 833us; 836us; 853us; 856us; 873us; 874us; 891us; 895us; 898us; 915us; 916us; 933us; 934us; 937us; 954us; 955us; 957us; 960us; 977us; 979us; 982us; 999us; 1002us; 1019us; 1021us; 1022us; 1025us; 1026us; 1028us; 1031us; 1033us; 1035us; 1052us; 1055us; 1072us; 1073us; 1074us; 1077us; 1080us; 1083us; 1084us; 1085us; 1086us; 1087us; 1088us; 1089us; 1106us; 1107us; 1108us; 1109us; 1110us; 1111us; 1112us; 1113us; 1114us; 1115us; 1116us; 1117us; 1118us; 1119us; 1123us; 1140us; 1141us; 1144us; 1161us; 1164us; 1181us; 1182us; 1186us; 1203us; 1204us; 1207us; 1224us; 1227us; 1244us; 1245us; 1248us; 1265us; 1266us; 1267us; 1268us; 1285us; 1302us; 1319us; 1336us; 1353us; 1370us; 1387us; 1404us; 1405us; 1422us; 1423us; 1424us; 1425us; 1426us; 1427us; 1428us; 1445us; 1446us; 1447us; 1448us; 1449us; 1450us; 1451us; 1452us; 1453us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 1us; 1us; 1us; 5us; 5us; 4us; 5us; 4us; 1us; 5us; 2us; 8us; 7us; 6us; 5us; 14us; 14us; 11us; 1us; 5us; 1us; 1us; 1us; 1us; 2us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 5us; 9us; 5us; 9us; 5us; 1us; 1us; 3us; 3us; 3us; 3us; 3us; 2us; 2us; 2us; 2us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 3us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 2us; 2us; 2us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 5us; 6us; 7us; 8us; 9us; 9us; 9us; 10us; 10us; 11us; 12us; 12us; 13us; 13us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 15us; 15us; 15us; 15us; 15us; 16us; 16us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 18us; 18us; 19us; 19us; 19us; 19us; 19us; 20us; 20us; 20us; 20us; 21us; 22us; 23us; 23us; 24us; 24us; 25us; 25us; 26us; 26us; 27us; 27us; 28us; 28us; 28us; 28us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 65535us; 16388us; 16389us; 65535us; 65535us; 65535us; 65535us; 16390us; 65535us; 65535us; 65535us; 16391us; 16392us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16393us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16394us; 65535us; 65535us; 65535us; 16396us; 16397us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16402us; 65535us; 16403us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16405us; 65535us; 65535us; 65535us; 16406us; 16407us; 16408us; 16409us; 16410us; 16411us; 65535us; 16412us; 16413us; 16414us; 16415us; 16416us; 16417us; 16418us; 16419us; 16420us; 16421us; 16422us; 16423us; 16424us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16430us; 16431us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16440us; 65535us; 16441us; 16442us; 16444us; 16446us; 16447us; 16448us; 65535us; 16452us; 16454us; 16455us; 16456us; 65535us; 16457us; 16458us; 16463us; 16466us; |]
let _fsyacc_reductions ()  =    [| 
# 426 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : TexAst.Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 435 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "TexParser.fsy"
                                         _1 
                   )
# 79 "TexParser.fsy"
                 : TexAst.Expr));
# 446 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'binaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "TexParser.fsy"
                                                   _1 
                   )
# 86 "TexParser.fsy"
                 : 'expression));
# 457 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'highPriorityFunction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "TexParser.fsy"
                                                                   _1 
                   )
# 87 "TexParser.fsy"
                 : 'expression));
# 468 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "TexParser.fsy"
                                   Constant(Pi) 
                   )
# 95 "TexParser.fsy"
                 : 'constant));
# 478 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "TexParser.fsy"
                                   Constant(E) 
                   )
# 96 "TexParser.fsy"
                 : 'constant));
# 488 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "TexParser.fsy"
                                                                       Sum(List.rev _4) 
                   )
# 99 "TexParser.fsy"
                 : 'sum));
# 501 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "TexParser.fsy"
                                                                                     
                                                                                        let wrongLexeme, sPos, ePos = _2
                                                                                        let errorMsg = sprintf "Unexpected symbol: %s. Required SUM op" wrongLexeme
                                                                                        let error = Error(errorMsg, {Line = sPos; Column = ePos})
                                                                                        errorLogger.ReportError(error)
                                                                                        Sum(List.rev _4) 
                                                                                      
                   )
# 100 "TexParser.fsy"
                 : 'sum));
# 521 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "TexParser.fsy"
                                                                    
                                                        report parseState "SUM should have parameters"
                                                        Sum([Int(1)])
                                                    
                   )
# 107 "TexParser.fsy"
                 : 'sum));
# 536 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "TexParser.fsy"
                                                                                 
                                                                                     report parseState "SUM operation should starts with SLASH"
                                                                                     Sum(List.rev _4)
                                                                                  
                   )
# 111 "TexParser.fsy"
                 : 'sum));
# 552 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "TexParser.fsy"
                                                                                         
                                                                  let pos = parseState.InputStartPosition(2)
                                                                  let posis = parseState.GetInput(2)
                                                                  let posis1 = parseState.GetInput(1)
                                                                  let posis2 = parseState.InputStartPosition(1)
                                                                  let posis3 = parseState.InputEndPosition(1)
                                                                  let errorMsg = "Unexpected left curly brace expression"
                                                                  let error = Error(errorMsg, {Line = pos.Line; Column = pos.Column})
                                                                  errorLogger.ReportError(error)
                                                                  Sum(List.rev _3)
                                                              
                   )
# 115 "TexParser.fsy"
                 : 'sum));
# 575 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "TexParser.fsy"
                                      report parseState "unexpected NAME"
                   )
# 137 "TexParser.fsy"
                 : 'noname));
# 585 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "TexParser.fsy"
                                                                      Prod(List.rev _4) 
                   )
# 140 "TexParser.fsy"
                 : 'prod));
# 598 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'highPriorityFunction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "TexParser.fsy"
                                                      Fact(_1) 
                   )
# 143 "TexParser.fsy"
                 : 'fact));
# 609 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "TexParser.fsy"
                                                                                          Div(_4, _7) 
                   )
# 146 "TexParser.fsy"
                 : 'frac));
# 625 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "TexParser.fsy"
                                                                                                                        
                                                                                                  let a = 1
                                                                                                  Pow(_2, _6) 
                                                                                               
                   )
# 149 "TexParser.fsy"
                 : 'power));
# 643 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "TexParser.fsy"
                                                                                                                  
                                                                                                  report parseState "MISSING CARET111"
                                                                                                  Pow(_2, _5) 
                                                                                               
                   )
# 153 "TexParser.fsy"
                 : 'power));
# 661 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "TexParser.fsy"
                                                                        
                                                                      report parseState "Right curly unmatched"
                                                                      Pow(Int(1), _4) 
                                                                  
                   )
# 161 "TexParser.fsy"
                 : 'power));
# 678 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _11 = (let data = parseState.GetInput(11) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _12 = (let data = parseState.GetInput(12) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _13 = (let data = parseState.GetInput(13) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _14 = (let data = parseState.GetInput(14) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "TexParser.fsy"
                                                                                                                           Integral(_12, _14, _5, _9) 
                   )
# 169 "TexParser.fsy"
                 : 'integral));
# 698 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _11 = (let data = parseState.GetInput(11) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _12 = (let data = parseState.GetInput(12) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _13 = (let data = parseState.GetInput(13) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _14 = (let data = parseState.GetInput(14) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "TexParser.fsy"
                                                                                                                           Integral(_12, _13, _5, _9) 
                   )
# 172 "TexParser.fsy"
                 : 'integral));
# 718 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _11 = (let data = parseState.GetInput(11) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "TexParser.fsy"
                                                                                                         Lim(_10, _5, _7) 
                   )
# 175 "TexParser.fsy"
                 : 'limit));
# 735 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'refValue)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "TexParser.fsy"
                                                                _1 
                   )
# 178 "TexParser.fsy"
                 : 'refPattern));
# 746 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'refValue)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 "TexParser.fsy"
                                                             _4 
                   )
# 179 "TexParser.fsy"
                 : 'refPattern));
# 759 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string*int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 184 "TexParser.fsy"
                                          analyzeDomainSpecificSingleSource (fst _1) (snd _1) |> DsAst 
                   )
# 184 "TexParser.fsy"
                 : 'refValue));
# 770 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : (string*int) list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 185 "TexParser.fsy"
                                       analyzeDomainSpecificSources _1 |> DsAst 
                   )
# 185 "TexParser.fsy"
                 : 'refValue));
# 781 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 188 "TexParser.fsy"
                                                        Int(_1) 
                   )
# 188 "TexParser.fsy"
                 : 'highPriorityFunction));
# 792 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 189 "TexParser.fsy"
                                                        Float(_1) 
                   )
# 189 "TexParser.fsy"
                 : 'highPriorityFunction));
# 803 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 190 "TexParser.fsy"
                                                        Float(Double.PositiveInfinity) 
                   )
# 190 "TexParser.fsy"
                 : 'highPriorityFunction));
# 813 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 191 "TexParser.fsy"
                                                        _2 
                   )
# 191 "TexParser.fsy"
                 : 'highPriorityFunction));
# 824 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'trigonometry)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 192 "TexParser.fsy"
                                                     _1 
                   )
# 192 "TexParser.fsy"
                 : 'highPriorityFunction));
# 835 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'sum)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 193 "TexParser.fsy"
                                                     _1 
                   )
# 193 "TexParser.fsy"
                 : 'highPriorityFunction));
# 846 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'prod)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 194 "TexParser.fsy"
                                                     _1 
                   )
# 194 "TexParser.fsy"
                 : 'highPriorityFunction));
# 857 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fact)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 195 "TexParser.fsy"
                                                     _1 
                   )
# 195 "TexParser.fsy"
                 : 'highPriorityFunction));
# 868 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'integral)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 196 "TexParser.fsy"
                                                     _1 
                   )
# 196 "TexParser.fsy"
                 : 'highPriorityFunction));
# 879 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'constant)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 197 "TexParser.fsy"
                                                     _1 
                   )
# 197 "TexParser.fsy"
                 : 'highPriorityFunction));
# 890 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'power)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 198 "TexParser.fsy"
                                                        _1 
                   )
# 198 "TexParser.fsy"
                 : 'highPriorityFunction));
# 901 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'frac)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 199 "TexParser.fsy"
                                                        _1 
                   )
# 199 "TexParser.fsy"
                 : 'highPriorityFunction));
# 912 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'limit)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 200 "TexParser.fsy"
                                                     _1 
                   )
# 200 "TexParser.fsy"
                 : 'highPriorityFunction));
# 923 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'refPattern)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 201 "TexParser.fsy"
                                                     _1 
                   )
# 201 "TexParser.fsy"
                 : 'highPriorityFunction));
# 934 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 202 "TexParser.fsy"
                                                     Var(_1) 
                   )
# 202 "TexParser.fsy"
                 : 'highPriorityFunction));
# 945 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'errRule)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 203 "TexParser.fsy"
                                         _1 
                   )
# 203 "TexParser.fsy"
                 : 'highPriorityFunction));
# 956 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 211 "TexParser.fsy"
                                                                                                Sin(_4, Int(1)) 
                   )
# 211 "TexParser.fsy"
                 : 'trigonometry));
# 969 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'caret)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 212 "TexParser.fsy"
                                                                                                Sin(_8, _5) 
                   )
# 212 "TexParser.fsy"
                 : 'trigonometry));
# 986 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 213 "TexParser.fsy"
                                                                                                Cos(_4, Int(1)) 
                   )
# 213 "TexParser.fsy"
                 : 'trigonometry));
# 999 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'caret)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 214 "TexParser.fsy"
                                                                                                Cos(_8, _5) 
                   )
# 214 "TexParser.fsy"
                 : 'trigonometry));
# 1016 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'trigName)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 215 "TexParser.fsy"
                                                                                     
                                                                                          report parseState "SIN/COS operation should starts with SLASH"
                                                                                          Sin(_4, Int(1))
                                                                                       
                   )
# 215 "TexParser.fsy"
                 : 'trigonometry));
# 1033 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 221 "TexParser.fsy"
                                
                   )
# 221 "TexParser.fsy"
                 : 'trigName));
# 1043 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 222 "TexParser.fsy"
                             
                   )
# 222 "TexParser.fsy"
                 : 'trigName));
# 1053 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 225 "TexParser.fsy"
                                                          
                                                          let p = 1
                                                          Plus(_1, _3)
                                                        
                   )
# 225 "TexParser.fsy"
                 : 'binaryExpression));
# 1068 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 229 "TexParser.fsy"
                                                          Sub(_1, _3)  
                   )
# 229 "TexParser.fsy"
                 : 'binaryExpression));
# 1080 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 230 "TexParser.fsy"
                                                          Mul(_1, _3)  
                   )
# 230 "TexParser.fsy"
                 : 'binaryExpression));
# 1092 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 231 "TexParser.fsy"
                                                          Div(_1, _3)  
                   )
# 231 "TexParser.fsy"
                 : 'binaryExpression));
# 1104 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 232 "TexParser.fsy"
                                                          Bmod(_1, _3) 
                   )
# 232 "TexParser.fsy"
                 : 'binaryExpression));
# 1116 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 233 "TexParser.fsy"
                                                       Neg(_2) 
                   )
# 233 "TexParser.fsy"
                 : 'binaryExpression));
# 1127 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'binaryOperator)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 245 "TexParser.fsy"
                                                                      
                                                            report parseState "First operand" 
                                                            Plus(_2, _2)
                                                        
                   )
# 245 "TexParser.fsy"
                 : 'binaryExpression));
# 1142 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'binaryOperator)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 249 "TexParser.fsy"
                                                                         
                                                            report parseState "Second operand" 
                                                            Plus(_1, _1)
                                                        
                   )
# 249 "TexParser.fsy"
                 : 'binaryExpression));
# 1157 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 253 "TexParser.fsy"
                                                                       
                                                 let lexeme, sPos, ePos, exVal = _2
                                                 let errorMsg = "MAYBE missing binary operator?"
                                                 let error = Error(errorMsg, {Line = sPos; Column = ePos})
                                                 errorLogger.ReportError(error)
                                                 
                                                 Plus(_1, exVal)
                                              
                   )
# 253 "TexParser.fsy"
                 : 'binaryExpression));
# 1176 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'sym)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 261 "TexParser.fsy"
                                                                           
                                                 let lexeme, sPos, ePos, exVal = _3
                                                 let errorMsg = "MAYBE missing binary operator????"
                                                 let error = Error(errorMsg, {Line = sPos; Column = ePos})
                                                 errorLogger.ReportError(error)
                                                 
                                                 Plus(_1, exVal)
                                              
                   )
# 261 "TexParser.fsy"
                 : 'binaryExpression));
# 1196 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 271 "TexParser.fsy"
                                 
                   )
# 271 "TexParser.fsy"
                 : 'sym));
# 1206 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 272 "TexParser.fsy"
                                 
                   )
# 272 "TexParser.fsy"
                 : 'sym));
# 1216 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 276 "TexParser.fsy"
                                                 
                   )
# 276 "TexParser.fsy"
                 : 'binaryOperator));
# 1226 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 277 "TexParser.fsy"
                                                 
                   )
# 277 "TexParser.fsy"
                 : 'binaryOperator));
# 1236 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 278 "TexParser.fsy"
                                                 
                   )
# 278 "TexParser.fsy"
                 : 'binaryOperator));
# 1246 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 279 "TexParser.fsy"
                                                 
                   )
# 279 "TexParser.fsy"
                 : 'binaryOperator));
# 1256 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 280 "TexParser.fsy"
                                                 
                   )
# 280 "TexParser.fsy"
                 : 'binaryOperator));
# 1266 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 283 "TexParser.fsy"
                                                              
                                                                let a = 1
                                                                //report parseState "argPassed"
                                                                [_1]
                                                               
                   )
# 283 "TexParser.fsy"
                 : 'argumentSet));
# 1281 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 288 "TexParser.fsy"
                                                       
                                                          //report parseState "argPassed"
                                                          _3::_1 
                                                        
                   )
# 288 "TexParser.fsy"
                 : 'argumentSet));
# 1296 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 313 "TexParser.fsy"
                                                                               
                                                            let lexbuf = parseState.ParserLocalStore.["LexBuffer"] :?> LexBuffer<char>
                                                            let errorMsg = sprintf "Unexpected symbol: %s. Comma symbol required" (new String(lexbuf.Lexeme))
                                                            let error = Error(errorMsg, {Line = lexbuf.StartPos.Line; Column = lexbuf.StartPos.Column})
                                                            errorLogger.ReportError(error)
                                                            
                                                            _3::_1
                                                        
                   )
# 313 "TexParser.fsy"
                 : 'argumentSet));
# 1315 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 321 "TexParser.fsy"
                                                                      
                                                            let lexeme, sPos, ePos, exVal = _2
                                                            let errorMsg = "Expected comma symbol"
                                                            let error = Error(errorMsg, {Line = sPos; Column = ePos})
                                                            errorLogger.ReportError(error)
                                                            
                                                            exVal::_1
                                                        
                   )
# 321 "TexParser.fsy"
                 : 'argumentSet));
# 1334 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 331 "TexParser.fsy"
                                                                
                                          let lexbuf = parseState.ParserLocalStore.["LexBuffer"] :?> LexBuffer<char>
                                          let posis = parseState.GetInput(1)
                                          let posix = parseState.InputStartPosition(1)
                                          (new string(lexbuf.Lexeme), posix.Line, posix.Column, _1) 
                                      
                   )
# 331 "TexParser.fsy"
                 : 'expr));
# 1350 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 339 "TexParser.fsy"
                                                     
                                      let lexbuf = parseState.ParserLocalStore.["LexBuffer"] :?> LexBuffer<char>
                                      (new string(lexbuf.Lexeme), lexbuf.StartPos.Line, lexbuf.StartPos.Column) 
                                  
                   )
# 339 "TexParser.fsy"
                 : 'recover));
# 1363 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 353 "TexParser.fsy"
                                       LCURLY 
                   )
# 353 "TexParser.fsy"
                 : 'lCurly));
# 1373 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 354 "TexParser.fsy"
                                    
                                       report parseState "Left curly brace" 
                                       LCURLY 
                                     
                   )
# 354 "TexParser.fsy"
                 : 'lCurly));
# 1387 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 360 "TexParser.fsy"
                                     Some(RCURLY) 
                   )
# 360 "TexParser.fsy"
                 : 'rCurly));
# 1397 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 361 "TexParser.fsy"
                                                   
                                                        report parseState "Right curly brace" 
                                                        None
                                                    
                   )
# 361 "TexParser.fsy"
                 : 'rCurly));
# 1411 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 367 "TexParser.fsy"
                                     LPAREN 
                   )
# 367 "TexParser.fsy"
                 : 'lParen));
# 1421 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 368 "TexParser.fsy"
                                       
                                       report parseState "Left paren" 
                                       LPAREN 
                                     
                   )
# 368 "TexParser.fsy"
                 : 'lParen));
# 1435 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 374 "TexParser.fsy"
                                     RPAREN 
                   )
# 374 "TexParser.fsy"
                 : 'rParen));
# 1445 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 375 "TexParser.fsy"
                                       
                                       report parseState "Right paren" 
                                       RPAREN 
                                     
                   )
# 375 "TexParser.fsy"
                 : 'rParen));
# 1459 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 381 "TexParser.fsy"
                                   CARET 
                   )
# 381 "TexParser.fsy"
                 : 'caret));
# 1469 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 382 "TexParser.fsy"
                                    
                                       report parseState "MISSING CARET"
                                       CARET
                                   
                   )
# 382 "TexParser.fsy"
                 : 'caret));
# 1483 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 389 "TexParser.fsy"
                                                                               
                                                                                report parseState "LCURLY RCURLY expression"
                                                                                _2
                                                                              
                   )
# 389 "TexParser.fsy"
                 : 'errRule));
# 1498 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 393 "TexParser.fsy"
                                                                        
                                                 if isSome _2 then report parseState "Unexpected RCURLY"
                                                 //match _2 with
                                                 //    | Some(RCURLY) -> report parseState "Unexpected RCURLY"
                                                 //    | _ -> report parseState "Unexpected SYMBOLLLL"
                                                 
                                                 _1
                                             
                   )
# 393 "TexParser.fsy"
                 : 'errRule));
# 1517 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 405 "TexParser.fsy"
                                                                         
                                                  report parseState "LPAREN WITHOUT RPAREN"
                                                  _2
                                              
                   )
# 405 "TexParser.fsy"
                 : 'errRule));
# 1531 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 409 "TexParser.fsy"
                                                                         
                                                  report parseState "LCURLY WITHOUT RCURLY"
                                                  _2
                                              
                   )
# 409 "TexParser.fsy"
                 : 'errRule));
|]
# 1546 "TexParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 39;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : TexAst.Expr =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
