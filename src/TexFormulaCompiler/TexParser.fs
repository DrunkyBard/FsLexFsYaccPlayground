// Implementation file for parser generated by fsyacc
module TexParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "TexParser.fsy"

open TexAst
open System
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing
open ErrorHandling

let mutable domainSpecificAnalyzer = Unchecked.defaultof<DomainSpecificContext -> obj>
let mutable errorLogger = Unchecked.defaultof<ErrorLogger>

let analyzeDomainSpecificLanguage token = domainSpecificAnalyzer token

let analyzeDomainSpecificSource token startPos = 
    try
      analyzeDomainSpecificLanguage token
    with
      | DomainSpecificParseException(fString, pos) -> failwithf "%s at pos: %u" fString (startPos)

let analyzeDomainSpecificSingleSource src pos = 
    analyzeDomainSpecificSource (SRefValueSrc(src)) pos |> SRefValue

let analyzeDomainSpecificSources sources = 
    let rec analyzeDomainSpecificSourcesInternal sources state = 
        match sources with
          | [] -> state
          | (src, pos)::t -> analyzeDomainSpecificSourcesInternal t ((analyzeDomainSpecificSource (MRefValueSrc(src)) pos)::state)
        
    analyzeDomainSpecificSourcesInternal sources [] 
    |> List.rev 
    |> MRefValue

let report (parseState : IParseState) sym = 
    let lexbuf = parseState.ParserLocalStore.["LexBuffer"] :?> LexBuffer<char>
    let errorMsg = sprintf "Unexpected symbol: %s. %s symbol required" (new String(lexbuf.Lexeme)) sym
    let error = Error(errorMsg, {Line = lexbuf.StartPos.Line; Column = lexbuf.StartPos.Column})
    errorLogger.ReportError(error)


# 45 "TexParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | PI
  | EULERNUM
  | FRAC
  | SQRT
  | SUM
  | PROD
  | INTEGRAL
  | TIMES
  | INFTY
  | TO
  | LIM
  | BMOD
  | TEXT
  | SIN
  | COS
  | PLUS
  | SUB
  | MUL
  | DIV
  | LPAREN
  | RPAREN
  | LCURLY
  | RCURLY
  | EXCL
  | CARET
  | EQ
  | UNDERSCORE
  | SLASH
  | COMMA
  | MREFVAL of ((string*int) list)
  | SREFVAL of (string*int)
  | ID of (string)
  | DIFF of (string)
  | FLOAT of (float)
  | INT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_PI
    | TOKEN_EULERNUM
    | TOKEN_FRAC
    | TOKEN_SQRT
    | TOKEN_SUM
    | TOKEN_PROD
    | TOKEN_INTEGRAL
    | TOKEN_TIMES
    | TOKEN_INFTY
    | TOKEN_TO
    | TOKEN_LIM
    | TOKEN_BMOD
    | TOKEN_TEXT
    | TOKEN_SIN
    | TOKEN_COS
    | TOKEN_PLUS
    | TOKEN_SUB
    | TOKEN_MUL
    | TOKEN_DIV
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LCURLY
    | TOKEN_RCURLY
    | TOKEN_EXCL
    | TOKEN_CARET
    | TOKEN_EQ
    | TOKEN_UNDERSCORE
    | TOKEN_SLASH
    | TOKEN_COMMA
    | TOKEN_MREFVAL
    | TOKEN_SREFVAL
    | TOKEN_ID
    | TOKEN_DIFF
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_expression
    | NONTERM_constant
    | NONTERM_sum
    | NONTERM_noname
    | NONTERM_prod
    | NONTERM_fact
    | NONTERM_frac
    | NONTERM_power
    | NONTERM_integral
    | NONTERM_limit
    | NONTERM_refPattern
    | NONTERM_refValue
    | NONTERM_highPriorityFunction
    | NONTERM_trigonometry
    | NONTERM_trigName
    | NONTERM_binaryExpression
    | NONTERM_binaryOperator
    | NONTERM_argumentSet
    | NONTERM_missingBinary
    | NONTERM_lCurly
    | NONTERM_rCurly
    | NONTERM_lParen
    | NONTERM_rParen
    | NONTERM_errRule

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | PI  -> 1 
  | EULERNUM  -> 2 
  | FRAC  -> 3 
  | SQRT  -> 4 
  | SUM  -> 5 
  | PROD  -> 6 
  | INTEGRAL  -> 7 
  | TIMES  -> 8 
  | INFTY  -> 9 
  | TO  -> 10 
  | LIM  -> 11 
  | BMOD  -> 12 
  | TEXT  -> 13 
  | SIN  -> 14 
  | COS  -> 15 
  | PLUS  -> 16 
  | SUB  -> 17 
  | MUL  -> 18 
  | DIV  -> 19 
  | LPAREN  -> 20 
  | RPAREN  -> 21 
  | LCURLY  -> 22 
  | RCURLY  -> 23 
  | EXCL  -> 24 
  | CARET  -> 25 
  | EQ  -> 26 
  | UNDERSCORE  -> 27 
  | SLASH  -> 28 
  | COMMA  -> 29 
  | MREFVAL _ -> 30 
  | SREFVAL _ -> 31 
  | ID _ -> 32 
  | DIFF _ -> 33 
  | FLOAT _ -> 34 
  | INT _ -> 35 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_PI 
  | 2 -> TOKEN_EULERNUM 
  | 3 -> TOKEN_FRAC 
  | 4 -> TOKEN_SQRT 
  | 5 -> TOKEN_SUM 
  | 6 -> TOKEN_PROD 
  | 7 -> TOKEN_INTEGRAL 
  | 8 -> TOKEN_TIMES 
  | 9 -> TOKEN_INFTY 
  | 10 -> TOKEN_TO 
  | 11 -> TOKEN_LIM 
  | 12 -> TOKEN_BMOD 
  | 13 -> TOKEN_TEXT 
  | 14 -> TOKEN_SIN 
  | 15 -> TOKEN_COS 
  | 16 -> TOKEN_PLUS 
  | 17 -> TOKEN_SUB 
  | 18 -> TOKEN_MUL 
  | 19 -> TOKEN_DIV 
  | 20 -> TOKEN_LPAREN 
  | 21 -> TOKEN_RPAREN 
  | 22 -> TOKEN_LCURLY 
  | 23 -> TOKEN_RCURLY 
  | 24 -> TOKEN_EXCL 
  | 25 -> TOKEN_CARET 
  | 26 -> TOKEN_EQ 
  | 27 -> TOKEN_UNDERSCORE 
  | 28 -> TOKEN_SLASH 
  | 29 -> TOKEN_COMMA 
  | 30 -> TOKEN_MREFVAL 
  | 31 -> TOKEN_SREFVAL 
  | 32 -> TOKEN_ID 
  | 33 -> TOKEN_DIFF 
  | 34 -> TOKEN_FLOAT 
  | 35 -> TOKEN_INT 
  | 38 -> TOKEN_end_of_input
  | 36 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_expression 
    | 3 -> NONTERM_expression 
    | 4 -> NONTERM_constant 
    | 5 -> NONTERM_constant 
    | 6 -> NONTERM_sum 
    | 7 -> NONTERM_sum 
    | 8 -> NONTERM_sum 
    | 9 -> NONTERM_noname 
    | 10 -> NONTERM_prod 
    | 11 -> NONTERM_fact 
    | 12 -> NONTERM_frac 
    | 13 -> NONTERM_power 
    | 14 -> NONTERM_power 
    | 15 -> NONTERM_integral 
    | 16 -> NONTERM_integral 
    | 17 -> NONTERM_limit 
    | 18 -> NONTERM_refPattern 
    | 19 -> NONTERM_refPattern 
    | 20 -> NONTERM_refValue 
    | 21 -> NONTERM_refValue 
    | 22 -> NONTERM_highPriorityFunction 
    | 23 -> NONTERM_highPriorityFunction 
    | 24 -> NONTERM_highPriorityFunction 
    | 25 -> NONTERM_highPriorityFunction 
    | 26 -> NONTERM_highPriorityFunction 
    | 27 -> NONTERM_highPriorityFunction 
    | 28 -> NONTERM_highPriorityFunction 
    | 29 -> NONTERM_highPriorityFunction 
    | 30 -> NONTERM_highPriorityFunction 
    | 31 -> NONTERM_highPriorityFunction 
    | 32 -> NONTERM_highPriorityFunction 
    | 33 -> NONTERM_highPriorityFunction 
    | 34 -> NONTERM_highPriorityFunction 
    | 35 -> NONTERM_highPriorityFunction 
    | 36 -> NONTERM_highPriorityFunction 
    | 37 -> NONTERM_highPriorityFunction 
    | 38 -> NONTERM_trigonometry 
    | 39 -> NONTERM_trigonometry 
    | 40 -> NONTERM_trigonometry 
    | 41 -> NONTERM_trigonometry 
    | 42 -> NONTERM_trigonometry 
    | 43 -> NONTERM_trigName 
    | 44 -> NONTERM_trigName 
    | 45 -> NONTERM_binaryExpression 
    | 46 -> NONTERM_binaryExpression 
    | 47 -> NONTERM_binaryExpression 
    | 48 -> NONTERM_binaryExpression 
    | 49 -> NONTERM_binaryExpression 
    | 50 -> NONTERM_binaryExpression 
    | 51 -> NONTERM_binaryExpression 
    | 52 -> NONTERM_binaryExpression 
    | 53 -> NONTERM_binaryOperator 
    | 54 -> NONTERM_binaryOperator 
    | 55 -> NONTERM_binaryOperator 
    | 56 -> NONTERM_binaryOperator 
    | 57 -> NONTERM_binaryOperator 
    | 58 -> NONTERM_argumentSet 
    | 59 -> NONTERM_argumentSet 
    | 60 -> NONTERM_missingBinary 
    | 61 -> NONTERM_lCurly 
    | 62 -> NONTERM_lCurly 
    | 63 -> NONTERM_rCurly 
    | 64 -> NONTERM_rCurly 
    | 65 -> NONTERM_lParen 
    | 66 -> NONTERM_lParen 
    | 67 -> NONTERM_rParen 
    | 68 -> NONTERM_rParen 
    | 69 -> NONTERM_errRule 
    | 70 -> NONTERM_errRule 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 38 
let _fsyacc_tagOfErrorTerminal = 36

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | PI  -> "PI" 
  | EULERNUM  -> "EULERNUM" 
  | FRAC  -> "FRAC" 
  | SQRT  -> "SQRT" 
  | SUM  -> "SUM" 
  | PROD  -> "PROD" 
  | INTEGRAL  -> "INTEGRAL" 
  | TIMES  -> "TIMES" 
  | INFTY  -> "INFTY" 
  | TO  -> "TO" 
  | LIM  -> "LIM" 
  | BMOD  -> "BMOD" 
  | TEXT  -> "TEXT" 
  | SIN  -> "SIN" 
  | COS  -> "COS" 
  | PLUS  -> "PLUS" 
  | SUB  -> "SUB" 
  | MUL  -> "MUL" 
  | DIV  -> "DIV" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | LCURLY  -> "LCURLY" 
  | RCURLY  -> "RCURLY" 
  | EXCL  -> "EXCL" 
  | CARET  -> "CARET" 
  | EQ  -> "EQ" 
  | UNDERSCORE  -> "UNDERSCORE" 
  | SLASH  -> "SLASH" 
  | COMMA  -> "COMMA" 
  | MREFVAL _ -> "MREFVAL" 
  | SREFVAL _ -> "SREFVAL" 
  | ID _ -> "ID" 
  | DIFF _ -> "DIFF" 
  | FLOAT _ -> "FLOAT" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | PI  -> (null : System.Object) 
  | EULERNUM  -> (null : System.Object) 
  | FRAC  -> (null : System.Object) 
  | SQRT  -> (null : System.Object) 
  | SUM  -> (null : System.Object) 
  | PROD  -> (null : System.Object) 
  | INTEGRAL  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | INFTY  -> (null : System.Object) 
  | TO  -> (null : System.Object) 
  | LIM  -> (null : System.Object) 
  | BMOD  -> (null : System.Object) 
  | TEXT  -> (null : System.Object) 
  | SIN  -> (null : System.Object) 
  | COS  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | SUB  -> (null : System.Object) 
  | MUL  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LCURLY  -> (null : System.Object) 
  | RCURLY  -> (null : System.Object) 
  | EXCL  -> (null : System.Object) 
  | CARET  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | UNDERSCORE  -> (null : System.Object) 
  | SLASH  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | MREFVAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SREFVAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DIFF _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 31us; 65535us; 0us; 2us; 10us; 132us; 14us; 132us; 19us; 132us; 24us; 132us; 29us; 30us; 32us; 33us; 35us; 36us; 39us; 40us; 44us; 45us; 49us; 50us; 53us; 54us; 56us; 57us; 66us; 67us; 69us; 70us; 82us; 83us; 98us; 99us; 102us; 103us; 105us; 106us; 109us; 110us; 113us; 114us; 116us; 117us; 120us; 121us; 134us; 125us; 135us; 126us; 136us; 127us; 137us; 128us; 138us; 129us; 139us; 130us; 140us; 131us; 146us; 133us; 31us; 65535us; 0us; 90us; 10us; 90us; 14us; 90us; 19us; 90us; 24us; 90us; 29us; 90us; 32us; 90us; 35us; 90us; 39us; 90us; 44us; 90us; 49us; 90us; 53us; 90us; 56us; 90us; 66us; 90us; 69us; 90us; 82us; 90us; 98us; 90us; 102us; 90us; 105us; 90us; 109us; 90us; 113us; 90us; 116us; 90us; 120us; 90us; 134us; 90us; 135us; 90us; 136us; 90us; 137us; 90us; 138us; 90us; 139us; 90us; 140us; 90us; 146us; 90us; 31us; 65535us; 0us; 86us; 10us; 86us; 14us; 86us; 19us; 86us; 24us; 86us; 29us; 86us; 32us; 86us; 35us; 86us; 39us; 86us; 44us; 86us; 49us; 86us; 53us; 86us; 56us; 86us; 66us; 86us; 69us; 86us; 82us; 86us; 98us; 86us; 102us; 86us; 105us; 86us; 109us; 86us; 113us; 86us; 116us; 86us; 120us; 86us; 134us; 86us; 135us; 86us; 136us; 86us; 137us; 86us; 138us; 86us; 139us; 86us; 140us; 86us; 146us; 86us; 1us; 65535us; 8us; 13us; 31us; 65535us; 0us; 87us; 10us; 87us; 14us; 87us; 19us; 87us; 24us; 87us; 29us; 87us; 32us; 87us; 35us; 87us; 39us; 87us; 44us; 87us; 49us; 87us; 53us; 87us; 56us; 87us; 66us; 87us; 69us; 87us; 82us; 87us; 98us; 87us; 102us; 87us; 105us; 87us; 109us; 87us; 113us; 87us; 116us; 87us; 120us; 87us; 134us; 87us; 135us; 87us; 136us; 87us; 137us; 87us; 138us; 87us; 139us; 87us; 140us; 87us; 146us; 87us; 31us; 65535us; 0us; 88us; 10us; 88us; 14us; 88us; 19us; 88us; 24us; 88us; 29us; 88us; 32us; 88us; 35us; 88us; 39us; 88us; 44us; 88us; 49us; 88us; 53us; 88us; 56us; 88us; 66us; 88us; 69us; 88us; 82us; 88us; 98us; 88us; 102us; 88us; 105us; 88us; 109us; 88us; 113us; 88us; 116us; 88us; 120us; 88us; 134us; 88us; 135us; 88us; 136us; 88us; 137us; 88us; 138us; 88us; 139us; 88us; 140us; 88us; 146us; 88us; 31us; 65535us; 0us; 92us; 10us; 92us; 14us; 92us; 19us; 92us; 24us; 92us; 29us; 92us; 32us; 92us; 35us; 92us; 39us; 92us; 44us; 92us; 49us; 92us; 53us; 92us; 56us; 92us; 66us; 92us; 69us; 92us; 82us; 92us; 98us; 92us; 102us; 92us; 105us; 92us; 109us; 92us; 113us; 92us; 116us; 92us; 120us; 92us; 134us; 92us; 135us; 92us; 136us; 92us; 137us; 92us; 138us; 92us; 139us; 92us; 140us; 92us; 146us; 92us; 31us; 65535us; 0us; 91us; 10us; 91us; 14us; 91us; 19us; 91us; 24us; 91us; 29us; 91us; 32us; 91us; 35us; 91us; 39us; 91us; 44us; 91us; 49us; 91us; 53us; 91us; 56us; 91us; 66us; 91us; 69us; 91us; 82us; 91us; 98us; 91us; 102us; 91us; 105us; 91us; 109us; 91us; 113us; 91us; 116us; 91us; 120us; 91us; 134us; 91us; 135us; 91us; 136us; 91us; 137us; 91us; 138us; 91us; 139us; 91us; 140us; 91us; 146us; 91us; 31us; 65535us; 0us; 89us; 10us; 89us; 14us; 89us; 19us; 89us; 24us; 89us; 29us; 89us; 32us; 89us; 35us; 89us; 39us; 89us; 44us; 89us; 49us; 89us; 53us; 89us; 56us; 89us; 66us; 89us; 69us; 89us; 82us; 89us; 98us; 89us; 102us; 89us; 105us; 89us; 109us; 89us; 113us; 89us; 116us; 89us; 120us; 89us; 134us; 89us; 135us; 89us; 136us; 89us; 137us; 89us; 138us; 89us; 139us; 89us; 140us; 89us; 146us; 89us; 31us; 65535us; 0us; 93us; 10us; 93us; 14us; 93us; 19us; 93us; 24us; 93us; 29us; 93us; 32us; 93us; 35us; 93us; 39us; 93us; 44us; 93us; 49us; 93us; 53us; 93us; 56us; 93us; 66us; 93us; 69us; 93us; 82us; 93us; 98us; 93us; 102us; 93us; 105us; 93us; 109us; 93us; 113us; 93us; 116us; 93us; 120us; 93us; 134us; 93us; 135us; 93us; 136us; 93us; 137us; 93us; 138us; 93us; 139us; 93us; 140us; 93us; 146us; 93us; 31us; 65535us; 0us; 94us; 10us; 94us; 14us; 94us; 19us; 94us; 24us; 94us; 29us; 94us; 32us; 94us; 35us; 94us; 39us; 94us; 44us; 94us; 49us; 94us; 53us; 94us; 56us; 94us; 66us; 94us; 69us; 94us; 82us; 94us; 98us; 94us; 102us; 94us; 105us; 94us; 109us; 94us; 113us; 94us; 116us; 94us; 120us; 94us; 134us; 94us; 135us; 94us; 136us; 94us; 137us; 94us; 138us; 94us; 139us; 94us; 140us; 94us; 146us; 94us; 32us; 65535us; 0us; 72us; 10us; 72us; 14us; 72us; 19us; 72us; 24us; 72us; 29us; 72us; 32us; 72us; 35us; 72us; 39us; 72us; 44us; 72us; 49us; 72us; 53us; 72us; 56us; 72us; 66us; 72us; 69us; 72us; 74us; 75us; 82us; 72us; 98us; 72us; 102us; 72us; 105us; 72us; 109us; 72us; 113us; 72us; 116us; 72us; 120us; 72us; 134us; 72us; 135us; 72us; 136us; 72us; 137us; 72us; 138us; 72us; 139us; 72us; 140us; 72us; 146us; 72us; 31us; 65535us; 0us; 5us; 10us; 5us; 14us; 5us; 19us; 5us; 24us; 5us; 29us; 5us; 32us; 5us; 35us; 5us; 39us; 5us; 44us; 5us; 49us; 5us; 53us; 5us; 56us; 5us; 66us; 5us; 69us; 5us; 82us; 5us; 98us; 5us; 102us; 5us; 105us; 5us; 109us; 5us; 113us; 5us; 116us; 5us; 120us; 5us; 134us; 5us; 135us; 5us; 136us; 5us; 137us; 5us; 138us; 5us; 139us; 5us; 140us; 5us; 146us; 5us; 31us; 65535us; 0us; 85us; 10us; 85us; 14us; 85us; 19us; 85us; 24us; 85us; 29us; 85us; 32us; 85us; 35us; 85us; 39us; 85us; 44us; 85us; 49us; 85us; 53us; 85us; 56us; 85us; 66us; 85us; 69us; 85us; 82us; 85us; 98us; 85us; 102us; 85us; 105us; 85us; 109us; 85us; 113us; 85us; 116us; 85us; 120us; 85us; 134us; 85us; 135us; 85us; 136us; 85us; 137us; 85us; 138us; 85us; 139us; 85us; 140us; 85us; 146us; 85us; 1us; 65535us; 17us; 119us; 31us; 65535us; 0us; 4us; 10us; 4us; 14us; 4us; 19us; 4us; 24us; 4us; 29us; 4us; 32us; 4us; 35us; 4us; 39us; 4us; 44us; 4us; 49us; 4us; 53us; 4us; 56us; 4us; 66us; 4us; 69us; 4us; 82us; 4us; 98us; 4us; 102us; 4us; 105us; 4us; 109us; 4us; 113us; 4us; 116us; 4us; 120us; 4us; 134us; 4us; 135us; 4us; 136us; 4us; 137us; 4us; 138us; 4us; 139us; 4us; 140us; 4us; 146us; 4us; 59us; 65535us; 0us; 140us; 2us; 141us; 10us; 140us; 14us; 140us; 19us; 140us; 24us; 140us; 29us; 140us; 30us; 141us; 32us; 140us; 33us; 141us; 35us; 140us; 36us; 141us; 39us; 140us; 40us; 141us; 44us; 140us; 45us; 141us; 49us; 140us; 50us; 141us; 53us; 140us; 54us; 141us; 56us; 140us; 57us; 141us; 66us; 140us; 67us; 141us; 69us; 140us; 70us; 141us; 82us; 140us; 83us; 141us; 98us; 140us; 99us; 141us; 102us; 140us; 103us; 141us; 105us; 140us; 106us; 141us; 109us; 140us; 110us; 141us; 113us; 140us; 114us; 141us; 116us; 140us; 117us; 141us; 120us; 140us; 121us; 141us; 125us; 141us; 126us; 141us; 127us; 141us; 128us; 141us; 129us; 141us; 130us; 141us; 131us; 141us; 132us; 141us; 133us; 141us; 134us; 140us; 135us; 140us; 136us; 140us; 137us; 140us; 138us; 140us; 139us; 140us; 140us; 140us; 146us; 140us; 4us; 65535us; 10us; 11us; 14us; 15us; 19us; 20us; 24us; 25us; 0us; 65535us; 21us; 65535us; 9us; 10us; 13us; 14us; 18us; 19us; 23us; 24us; 28us; 29us; 31us; 32us; 38us; 39us; 43us; 44us; 48us; 49us; 52us; 53us; 55us; 56us; 63us; 64us; 68us; 69us; 73us; 74us; 97us; 98us; 101us; 102us; 104us; 105us; 108us; 109us; 112us; 113us; 115us; 116us; 119us; 120us; 54us; 65535us; 0us; 42us; 10us; 42us; 11us; 12us; 14us; 42us; 15us; 16us; 19us; 42us; 20us; 21us; 24us; 42us; 25us; 26us; 29us; 42us; 30us; 31us; 32us; 42us; 33us; 34us; 35us; 42us; 36us; 37us; 39us; 42us; 40us; 41us; 44us; 42us; 45us; 46us; 49us; 42us; 50us; 51us; 53us; 42us; 54us; 55us; 56us; 42us; 57us; 58us; 60us; 61us; 66us; 42us; 67us; 68us; 69us; 42us; 70us; 71us; 75us; 76us; 82us; 42us; 98us; 42us; 99us; 100us; 102us; 42us; 103us; 104us; 105us; 42us; 106us; 107us; 109us; 42us; 110us; 111us; 113us; 42us; 114us; 115us; 116us; 42us; 117us; 118us; 120us; 42us; 121us; 122us; 134us; 42us; 135us; 42us; 136us; 42us; 137us; 42us; 138us; 42us; 139us; 42us; 140us; 42us; 146us; 42us; 0us; 65535us; 1us; 65535us; 83us; 84us; 31us; 65535us; 0us; 96us; 10us; 96us; 14us; 96us; 19us; 96us; 24us; 96us; 29us; 96us; 32us; 96us; 35us; 96us; 39us; 96us; 44us; 96us; 49us; 96us; 53us; 96us; 56us; 96us; 66us; 96us; 69us; 96us; 82us; 96us; 98us; 96us; 102us; 96us; 105us; 96us; 109us; 96us; 113us; 96us; 116us; 96us; 120us; 96us; 134us; 96us; 135us; 96us; 136us; 96us; 137us; 96us; 138us; 96us; 139us; 96us; 140us; 96us; 146us; 96us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 35us; 67us; 99us; 101us; 133us; 165us; 197us; 229us; 261us; 293us; 325us; 358us; 390us; 422us; 424us; 456us; 516us; 521us; 522us; 544us; 599us; 600us; 602us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 9us; 1us; 45us; 46us; 47us; 48us; 49us; 52us; 69us; 70us; 1us; 1us; 1us; 2us; 2us; 3us; 11us; 1us; 4us; 1us; 5us; 13us; 6us; 7us; 10us; 12us; 15us; 16us; 17us; 19us; 24us; 38us; 39us; 40us; 41us; 1us; 6us; 1us; 6us; 2us; 6us; 59us; 1us; 6us; 1us; 7us; 1us; 7us; 2us; 7us; 59us; 1us; 7us; 3us; 8us; 42us; 64us; 1us; 8us; 1us; 8us; 2us; 8us; 59us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 10us; 2us; 10us; 59us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 12us; 9us; 12us; 45us; 46us; 47us; 48us; 49us; 52us; 69us; 70us; 1us; 12us; 1us; 12us; 9us; 12us; 45us; 46us; 47us; 48us; 49us; 52us; 69us; 70us; 1us; 12us; 1us; 13us; 9us; 13us; 45us; 46us; 47us; 48us; 49us; 52us; 69us; 70us; 1us; 13us; 1us; 13us; 1us; 13us; 9us; 13us; 45us; 46us; 47us; 48us; 49us; 52us; 69us; 70us; 1us; 13us; 1us; 14us; 1us; 14us; 1us; 14us; 9us; 14us; 45us; 46us; 47us; 48us; 49us; 52us; 69us; 70us; 1us; 14us; 2us; 15us; 16us; 2us; 15us; 16us; 2us; 15us; 16us; 10us; 15us; 16us; 45us; 46us; 47us; 48us; 49us; 52us; 69us; 70us; 2us; 15us; 16us; 2us; 15us; 16us; 2us; 15us; 16us; 10us; 15us; 16us; 45us; 46us; 47us; 48us; 49us; 52us; 69us; 70us; 2us; 15us; 16us; 2us; 15us; 16us; 10us; 15us; 16us; 45us; 46us; 47us; 48us; 49us; 52us; 69us; 70us; 1us; 15us; 1us; 15us; 1us; 16us; 1us; 16us; 1us; 17us; 1us; 17us; 1us; 17us; 1us; 17us; 1us; 17us; 9us; 17us; 45us; 46us; 47us; 48us; 49us; 52us; 69us; 70us; 1us; 17us; 1us; 17us; 9us; 17us; 45us; 46us; 47us; 48us; 49us; 52us; 69us; 70us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 9us; 25us; 45us; 46us; 47us; 48us; 49us; 52us; 69us; 70us; 1us; 25us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 33us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 37us; 2us; 38us; 39us; 1us; 38us; 9us; 38us; 45us; 46us; 47us; 48us; 49us; 52us; 69us; 70us; 1us; 38us; 1us; 39us; 1us; 39us; 9us; 39us; 45us; 46us; 47us; 48us; 49us; 52us; 69us; 70us; 1us; 39us; 1us; 39us; 9us; 39us; 45us; 46us; 47us; 48us; 49us; 52us; 69us; 70us; 1us; 39us; 2us; 40us; 41us; 1us; 40us; 9us; 40us; 45us; 46us; 47us; 48us; 49us; 52us; 69us; 70us; 1us; 40us; 1us; 41us; 1us; 41us; 9us; 41us; 45us; 46us; 47us; 48us; 49us; 52us; 69us; 70us; 1us; 41us; 1us; 41us; 9us; 41us; 45us; 46us; 47us; 48us; 49us; 52us; 69us; 70us; 1us; 41us; 1us; 42us; 1us; 42us; 9us; 42us; 45us; 46us; 47us; 48us; 49us; 52us; 69us; 70us; 1us; 42us; 1us; 43us; 1us; 44us; 9us; 45us; 45us; 46us; 47us; 48us; 49us; 52us; 69us; 70us; 9us; 45us; 46us; 46us; 47us; 48us; 49us; 52us; 69us; 70us; 9us; 45us; 46us; 47us; 47us; 48us; 49us; 52us; 69us; 70us; 9us; 45us; 46us; 47us; 48us; 48us; 49us; 52us; 69us; 70us; 9us; 45us; 46us; 47us; 48us; 49us; 49us; 52us; 69us; 70us; 9us; 45us; 46us; 47us; 48us; 49us; 50us; 52us; 69us; 70us; 9us; 45us; 46us; 47us; 48us; 49us; 51us; 52us; 69us; 70us; 9us; 45us; 46us; 47us; 48us; 49us; 52us; 58us; 69us; 70us; 9us; 45us; 46us; 47us; 48us; 49us; 52us; 59us; 69us; 70us; 2us; 45us; 53us; 2us; 46us; 54us; 2us; 47us; 55us; 2us; 48us; 56us; 2us; 49us; 57us; 2us; 50us; 54us; 1us; 51us; 1us; 52us; 1us; 53us; 1us; 55us; 1us; 56us; 1us; 57us; 1us; 59us; 1us; 61us; 1us; 62us; 1us; 63us; 2us; 63us; 69us; 1us; 64us; 2us; 67us; 70us; 1us; 68us; 1us; 69us; 1us; 70us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 14us; 16us; 18us; 21us; 23us; 25us; 39us; 41us; 43us; 46us; 48us; 50us; 52us; 55us; 57us; 61us; 63us; 65us; 68us; 70us; 72us; 74us; 76us; 79us; 81us; 83us; 85us; 87us; 97us; 99us; 101us; 111us; 113us; 115us; 125us; 127us; 129us; 131us; 141us; 143us; 145us; 147us; 149us; 159us; 161us; 164us; 167us; 170us; 181us; 184us; 187us; 190us; 201us; 204us; 207us; 218us; 220us; 222us; 224us; 226us; 228us; 230us; 232us; 234us; 236us; 246us; 248us; 250us; 260us; 262us; 264us; 266us; 268us; 270us; 272us; 274us; 276us; 278us; 280us; 282us; 284us; 294us; 296us; 298us; 300us; 302us; 304us; 306us; 308us; 310us; 312us; 314us; 316us; 318us; 320us; 323us; 325us; 335us; 337us; 339us; 341us; 351us; 353us; 355us; 365us; 367us; 370us; 372us; 382us; 384us; 386us; 388us; 398us; 400us; 402us; 412us; 414us; 416us; 418us; 428us; 430us; 432us; 434us; 444us; 454us; 464us; 474us; 484us; 494us; 504us; 514us; 524us; 527us; 530us; 533us; 536us; 539us; 542us; 544us; 546us; 548us; 550us; 552us; 554us; 556us; 558us; 560us; 562us; 565us; 567us; 570us; 572us; 574us; |]
let _fsyacc_action_rows = 156
let _fsyacc_actionTableElements = [|17us; 32768us; 1us; 6us; 2us; 7us; 12us; 145us; 16us; 142us; 17us; 139us; 18us; 143us; 19us; 144us; 20us; 82us; 22us; 35us; 23us; 149us; 28us; 8us; 30us; 78us; 31us; 77us; 32us; 95us; 34us; 80us; 35us; 79us; 36us; 17us; 0us; 49152us; 8us; 32768us; 0us; 3us; 12us; 138us; 16us; 134us; 17us; 135us; 18us; 136us; 19us; 137us; 21us; 155us; 23us; 154us; 0us; 16385us; 0us; 16386us; 1us; 16387us; 24us; 27us; 0us; 16388us; 0us; 16389us; 10us; 32768us; 3us; 28us; 5us; 9us; 6us; 23us; 7us; 47us; 9us; 81us; 11us; 62us; 13us; 73us; 14us; 97us; 15us; 108us; 36us; 22us; 2us; 32768us; 22us; 147us; 36us; 148us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 145us; 16us; 142us; 17us; 139us; 18us; 143us; 19us; 144us; 20us; 82us; 22us; 35us; 23us; 149us; 28us; 8us; 30us; 78us; 31us; 77us; 32us; 95us; 34us; 80us; 35us; 79us; 36us; 17us; 3us; 32768us; 23us; 149us; 29us; 146us; 36us; 151us; 0us; 16390us; 2us; 32768us; 22us; 147us; 36us; 148us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 145us; 16us; 142us; 17us; 139us; 18us; 143us; 19us; 144us; 20us; 82us; 22us; 35us; 23us; 149us; 28us; 8us; 30us; 78us; 31us; 77us; 32us; 95us; 34us; 80us; 35us; 79us; 36us; 17us; 3us; 32768us; 23us; 149us; 29us; 146us; 36us; 151us; 0us; 16391us; 3us; 16448us; 5us; 18us; 14us; 123us; 15us; 124us; 2us; 32768us; 22us; 147us; 36us; 148us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 145us; 16us; 142us; 17us; 139us; 18us; 143us; 19us; 144us; 20us; 82us; 22us; 35us; 23us; 149us; 28us; 8us; 30us; 78us; 31us; 77us; 32us; 95us; 34us; 80us; 35us; 79us; 36us; 17us; 3us; 32768us; 23us; 149us; 29us; 146us; 36us; 151us; 0us; 16392us; 0us; 16393us; 2us; 32768us; 22us; 147us; 36us; 148us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 145us; 16us; 142us; 17us; 139us; 18us; 143us; 19us; 144us; 20us; 82us; 22us; 35us; 23us; 149us; 28us; 8us; 30us; 78us; 31us; 77us; 32us; 95us; 34us; 80us; 35us; 79us; 36us; 17us; 3us; 32768us; 23us; 149us; 29us; 146us; 36us; 151us; 0us; 16394us; 0us; 16395us; 2us; 32768us; 22us; 147us; 36us; 148us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 145us; 16us; 142us; 17us; 139us; 18us; 143us; 19us; 144us; 20us; 82us; 22us; 35us; 23us; 149us; 28us; 8us; 30us; 78us; 31us; 77us; 32us; 95us; 34us; 80us; 35us; 79us; 36us; 17us; 8us; 32768us; 12us; 138us; 16us; 134us; 17us; 135us; 18us; 136us; 19us; 137us; 21us; 155us; 23us; 150us; 36us; 151us; 2us; 32768us; 22us; 147us; 36us; 148us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 145us; 16us; 142us; 17us; 139us; 18us; 143us; 19us; 144us; 20us; 82us; 22us; 35us; 23us; 149us; 28us; 8us; 30us; 78us; 31us; 77us; 32us; 95us; 34us; 80us; 35us; 79us; 36us; 17us; 8us; 32768us; 12us; 138us; 16us; 134us; 17us; 135us; 18us; 136us; 19us; 137us; 21us; 155us; 23us; 150us; 36us; 151us; 0us; 16396us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 145us; 16us; 142us; 17us; 139us; 18us; 143us; 19us; 144us; 20us; 82us; 22us; 35us; 23us; 149us; 28us; 8us; 30us; 78us; 31us; 77us; 32us; 95us; 34us; 80us; 35us; 79us; 36us; 17us; 8us; 32768us; 12us; 138us; 16us; 134us; 17us; 135us; 18us; 136us; 19us; 137us; 21us; 155us; 23us; 150us; 36us; 151us; 1us; 32768us; 25us; 38us; 2us; 32768us; 22us; 147us; 36us; 148us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 145us; 16us; 142us; 17us; 139us; 18us; 143us; 19us; 144us; 20us; 82us; 22us; 35us; 23us; 149us; 28us; 8us; 30us; 78us; 31us; 77us; 32us; 95us; 34us; 80us; 35us; 79us; 36us; 17us; 8us; 32768us; 12us; 138us; 16us; 134us; 17us; 135us; 18us; 136us; 19us; 137us; 21us; 155us; 23us; 150us; 36us; 151us; 0us; 16397us; 1us; 32768us; 25us; 43us; 2us; 32768us; 22us; 147us; 36us; 148us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 145us; 16us; 142us; 17us; 139us; 18us; 143us; 19us; 144us; 20us; 82us; 22us; 35us; 23us; 149us; 28us; 8us; 30us; 78us; 31us; 77us; 32us; 95us; 34us; 80us; 35us; 79us; 36us; 17us; 8us; 32768us; 12us; 138us; 16us; 134us; 17us; 135us; 18us; 136us; 19us; 137us; 21us; 155us; 23us; 150us; 36us; 151us; 0us; 16398us; 1us; 32768us; 27us; 48us; 2us; 32768us; 22us; 147us; 36us; 148us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 145us; 16us; 142us; 17us; 139us; 18us; 143us; 19us; 144us; 20us; 82us; 22us; 35us; 23us; 149us; 28us; 8us; 30us; 78us; 31us; 77us; 32us; 95us; 34us; 80us; 35us; 79us; 36us; 17us; 8us; 32768us; 12us; 138us; 16us; 134us; 17us; 135us; 18us; 136us; 19us; 137us; 21us; 155us; 23us; 150us; 36us; 151us; 1us; 32768us; 25us; 52us; 2us; 32768us; 22us; 147us; 36us; 148us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 145us; 16us; 142us; 17us; 139us; 18us; 143us; 19us; 144us; 20us; 82us; 22us; 35us; 23us; 149us; 28us; 8us; 30us; 78us; 31us; 77us; 32us; 95us; 34us; 80us; 35us; 79us; 36us; 17us; 8us; 32768us; 12us; 138us; 16us; 134us; 17us; 135us; 18us; 136us; 19us; 137us; 21us; 155us; 23us; 150us; 36us; 151us; 2us; 32768us; 22us; 147us; 36us; 148us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 145us; 16us; 142us; 17us; 139us; 18us; 143us; 19us; 144us; 20us; 82us; 22us; 35us; 23us; 149us; 28us; 8us; 30us; 78us; 31us; 77us; 32us; 95us; 34us; 80us; 35us; 79us; 36us; 17us; 9us; 32768us; 12us; 138us; 16us; 134us; 17us; 135us; 18us; 136us; 19us; 137us; 21us; 155us; 23us; 150us; 33us; 60us; 36us; 151us; 1us; 32768us; 33us; 59us; 0us; 16399us; 2us; 32768us; 23us; 149us; 36us; 151us; 0us; 16400us; 1us; 32768us; 27us; 63us; 2us; 32768us; 22us; 147us; 36us; 148us; 1us; 32768us; 32us; 65us; 1us; 32768us; 10us; 66us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 145us; 16us; 142us; 17us; 139us; 18us; 143us; 19us; 144us; 20us; 82us; 22us; 35us; 23us; 149us; 28us; 8us; 30us; 78us; 31us; 77us; 32us; 95us; 34us; 80us; 35us; 79us; 36us; 17us; 8us; 32768us; 12us; 138us; 16us; 134us; 17us; 135us; 18us; 136us; 19us; 137us; 21us; 155us; 23us; 150us; 36us; 151us; 2us; 32768us; 22us; 147us; 36us; 148us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 145us; 16us; 142us; 17us; 139us; 18us; 143us; 19us; 144us; 20us; 82us; 22us; 35us; 23us; 149us; 28us; 8us; 30us; 78us; 31us; 77us; 32us; 95us; 34us; 80us; 35us; 79us; 36us; 17us; 8us; 32768us; 12us; 138us; 16us; 134us; 17us; 135us; 18us; 136us; 19us; 137us; 21us; 155us; 23us; 150us; 36us; 151us; 0us; 16401us; 0us; 16402us; 2us; 32768us; 22us; 147us; 36us; 148us; 2us; 32768us; 30us; 78us; 31us; 77us; 2us; 32768us; 23us; 149us; 36us; 151us; 0us; 16403us; 0us; 16404us; 0us; 16405us; 0us; 16406us; 0us; 16407us; 0us; 16408us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 145us; 16us; 142us; 17us; 139us; 18us; 143us; 19us; 144us; 20us; 82us; 22us; 35us; 23us; 149us; 28us; 8us; 30us; 78us; 31us; 77us; 32us; 95us; 34us; 80us; 35us; 79us; 36us; 17us; 8us; 32768us; 12us; 138us; 16us; 134us; 17us; 135us; 18us; 136us; 19us; 137us; 21us; 152us; 23us; 154us; 36us; 153us; 0us; 16409us; 0us; 16410us; 0us; 16411us; 0us; 16412us; 0us; 16413us; 0us; 16414us; 0us; 16415us; 0us; 16416us; 0us; 16417us; 0us; 16418us; 0us; 16419us; 0us; 16420us; 0us; 16421us; 3us; 32768us; 22us; 147us; 25us; 101us; 36us; 148us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 145us; 16us; 142us; 17us; 139us; 18us; 143us; 19us; 144us; 20us; 82us; 22us; 35us; 23us; 149us; 28us; 8us; 30us; 78us; 31us; 77us; 32us; 95us; 34us; 80us; 35us; 79us; 36us; 17us; 8us; 32768us; 12us; 138us; 16us; 134us; 17us; 135us; 18us; 136us; 19us; 137us; 21us; 155us; 23us; 150us; 36us; 151us; 0us; 16422us; 2us; 32768us; 22us; 147us; 36us; 148us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 145us; 16us; 142us; 17us; 139us; 18us; 143us; 19us; 144us; 20us; 82us; 22us; 35us; 23us; 149us; 28us; 8us; 30us; 78us; 31us; 77us; 32us; 95us; 34us; 80us; 35us; 79us; 36us; 17us; 8us; 32768us; 12us; 138us; 16us; 134us; 17us; 135us; 18us; 136us; 19us; 137us; 21us; 155us; 23us; 150us; 36us; 151us; 2us; 32768us; 22us; 147us; 36us; 148us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 145us; 16us; 142us; 17us; 139us; 18us; 143us; 19us; 144us; 20us; 82us; 22us; 35us; 23us; 149us; 28us; 8us; 30us; 78us; 31us; 77us; 32us; 95us; 34us; 80us; 35us; 79us; 36us; 17us; 8us; 32768us; 12us; 138us; 16us; 134us; 17us; 135us; 18us; 136us; 19us; 137us; 21us; 155us; 23us; 150us; 36us; 151us; 0us; 16423us; 3us; 32768us; 22us; 147us; 25us; 112us; 36us; 148us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 145us; 16us; 142us; 17us; 139us; 18us; 143us; 19us; 144us; 20us; 82us; 22us; 35us; 23us; 149us; 28us; 8us; 30us; 78us; 31us; 77us; 32us; 95us; 34us; 80us; 35us; 79us; 36us; 17us; 8us; 32768us; 12us; 138us; 16us; 134us; 17us; 135us; 18us; 136us; 19us; 137us; 21us; 155us; 23us; 150us; 36us; 151us; 0us; 16424us; 2us; 32768us; 22us; 147us; 36us; 148us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 145us; 16us; 142us; 17us; 139us; 18us; 143us; 19us; 144us; 20us; 82us; 22us; 35us; 23us; 149us; 28us; 8us; 30us; 78us; 31us; 77us; 32us; 95us; 34us; 80us; 35us; 79us; 36us; 17us; 8us; 32768us; 12us; 138us; 16us; 134us; 17us; 135us; 18us; 136us; 19us; 137us; 21us; 155us; 23us; 150us; 36us; 151us; 2us; 32768us; 22us; 147us; 36us; 148us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 145us; 16us; 142us; 17us; 139us; 18us; 143us; 19us; 144us; 20us; 82us; 22us; 35us; 23us; 149us; 28us; 8us; 30us; 78us; 31us; 77us; 32us; 95us; 34us; 80us; 35us; 79us; 36us; 17us; 8us; 32768us; 12us; 138us; 16us; 134us; 17us; 135us; 18us; 136us; 19us; 137us; 21us; 155us; 23us; 150us; 36us; 151us; 0us; 16425us; 2us; 32768us; 22us; 147us; 36us; 148us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 145us; 16us; 142us; 17us; 139us; 18us; 143us; 19us; 144us; 20us; 82us; 22us; 35us; 23us; 149us; 28us; 8us; 30us; 78us; 31us; 77us; 32us; 95us; 34us; 80us; 35us; 79us; 36us; 17us; 8us; 32768us; 12us; 138us; 16us; 134us; 17us; 135us; 18us; 136us; 19us; 137us; 21us; 155us; 23us; 150us; 36us; 151us; 0us; 16426us; 0us; 16427us; 0us; 16428us; 3us; 16429us; 12us; 138us; 18us; 136us; 19us; 137us; 3us; 16430us; 12us; 138us; 18us; 136us; 19us; 137us; 0us; 16431us; 0us; 16432us; 0us; 16433us; 0us; 16434us; 7us; 16435us; 12us; 138us; 16us; 134us; 17us; 135us; 18us; 136us; 19us; 137us; 21us; 155us; 23us; 154us; 6us; 16442us; 12us; 138us; 16us; 134us; 17us; 135us; 18us; 136us; 19us; 137us; 21us; 155us; 6us; 16443us; 12us; 138us; 16us; 134us; 17us; 135us; 18us; 136us; 19us; 137us; 21us; 155us; 14us; 16437us; 1us; 6us; 2us; 7us; 12us; 145us; 18us; 143us; 19us; 144us; 20us; 82us; 22us; 35us; 28us; 8us; 30us; 78us; 31us; 77us; 32us; 95us; 34us; 80us; 35us; 79us; 36us; 17us; 14us; 16438us; 1us; 6us; 2us; 7us; 12us; 145us; 18us; 143us; 19us; 144us; 20us; 82us; 22us; 35us; 28us; 8us; 30us; 78us; 31us; 77us; 32us; 95us; 34us; 80us; 35us; 79us; 36us; 17us; 11us; 16439us; 1us; 6us; 2us; 7us; 20us; 82us; 22us; 35us; 28us; 8us; 30us; 78us; 31us; 77us; 32us; 95us; 34us; 80us; 35us; 79us; 36us; 17us; 11us; 16440us; 1us; 6us; 2us; 7us; 20us; 82us; 22us; 35us; 28us; 8us; 30us; 78us; 31us; 77us; 32us; 95us; 34us; 80us; 35us; 79us; 36us; 17us; 11us; 16441us; 1us; 6us; 2us; 7us; 20us; 82us; 22us; 35us; 28us; 8us; 30us; 78us; 31us; 77us; 32us; 95us; 34us; 80us; 35us; 79us; 36us; 17us; 14us; 16438us; 1us; 6us; 2us; 7us; 12us; 145us; 18us; 143us; 19us; 144us; 20us; 82us; 22us; 35us; 28us; 8us; 30us; 78us; 31us; 77us; 32us; 95us; 34us; 80us; 35us; 79us; 36us; 17us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 145us; 16us; 142us; 17us; 139us; 18us; 143us; 19us; 144us; 20us; 82us; 22us; 35us; 23us; 149us; 28us; 8us; 30us; 78us; 31us; 77us; 32us; 95us; 34us; 80us; 35us; 79us; 36us; 17us; 0us; 16436us; 0us; 16437us; 0us; 16439us; 0us; 16440us; 0us; 16441us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 145us; 16us; 142us; 17us; 139us; 18us; 143us; 19us; 144us; 20us; 82us; 22us; 35us; 23us; 149us; 28us; 8us; 30us; 78us; 31us; 77us; 32us; 95us; 34us; 80us; 35us; 79us; 36us; 17us; 0us; 16445us; 0us; 16446us; 0us; 16447us; 0us; 16447us; 0us; 16448us; 0us; 16451us; 0us; 16452us; 0us; 16453us; 0us; 16454us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 18us; 19us; 28us; 29us; 30us; 32us; 33us; 34us; 45us; 48us; 66us; 70us; 71us; 74us; 92us; 96us; 97us; 101us; 104us; 122us; 126us; 127us; 128us; 131us; 149us; 153us; 154us; 155us; 158us; 176us; 185us; 188us; 206us; 215us; 216us; 234us; 243us; 245us; 248us; 266us; 275us; 276us; 278us; 281us; 299us; 308us; 309us; 311us; 314us; 332us; 341us; 343us; 346us; 364us; 373us; 376us; 394us; 404us; 406us; 407us; 410us; 411us; 413us; 416us; 418us; 420us; 438us; 447us; 450us; 468us; 477us; 478us; 479us; 482us; 485us; 488us; 489us; 490us; 491us; 492us; 493us; 494us; 512us; 521us; 522us; 523us; 524us; 525us; 526us; 527us; 528us; 529us; 530us; 531us; 532us; 533us; 534us; 538us; 556us; 565us; 566us; 569us; 587us; 596us; 599us; 617us; 626us; 627us; 631us; 649us; 658us; 659us; 662us; 680us; 689us; 692us; 710us; 719us; 720us; 723us; 741us; 750us; 751us; 752us; 753us; 757us; 761us; 762us; 763us; 764us; 765us; 773us; 780us; 787us; 802us; 817us; 829us; 841us; 853us; 868us; 886us; 887us; 888us; 889us; 890us; 891us; 909us; 910us; 911us; 912us; 913us; 914us; 915us; 916us; 917us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 1us; 1us; 1us; 5us; 5us; 5us; 1us; 5us; 2us; 8us; 7us; 5us; 14us; 14us; 11us; 1us; 5us; 1us; 1us; 1us; 1us; 2us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 5us; 9us; 5us; 9us; 5us; 1us; 1us; 3us; 3us; 3us; 3us; 3us; 2us; 2us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 4us; 4us; 4us; 5us; 6us; 7us; 8us; 9us; 9us; 10us; 10us; 11us; 12us; 12us; 13us; 13us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 15us; 15us; 15us; 15us; 15us; 16us; 16us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 18us; 18us; 18us; 18us; 18us; 19us; 19us; 20us; 21us; 21us; 22us; 22us; 23us; 23us; 24us; 24us; 25us; 25us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 65535us; 16388us; 16389us; 65535us; 65535us; 65535us; 65535us; 16390us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 65535us; 16392us; 16393us; 65535us; 65535us; 65535us; 16394us; 16395us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16396us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16397us; 65535us; 65535us; 65535us; 65535us; 16398us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16399us; 65535us; 16400us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16401us; 16402us; 65535us; 65535us; 65535us; 16403us; 16404us; 16405us; 16406us; 16407us; 16408us; 65535us; 65535us; 16409us; 16410us; 16411us; 16412us; 16413us; 16414us; 16415us; 16416us; 16417us; 16418us; 16419us; 16420us; 16421us; 65535us; 65535us; 65535us; 16422us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16423us; 65535us; 65535us; 65535us; 16424us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16425us; 65535us; 65535us; 65535us; 16426us; 16427us; 16428us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16436us; 16437us; 16439us; 16440us; 16441us; 65535us; 16445us; 16446us; 16447us; 65535us; 16448us; 65535us; 16452us; 16453us; 16454us; |]
let _fsyacc_reductions ()  =    [| 
# 405 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : TexAst.Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 414 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "TexParser.fsy"
                                         _1 
                   )
# 66 "TexParser.fsy"
                 : TexAst.Expr));
# 425 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'binaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "TexParser.fsy"
                                                   _1 
                   )
# 73 "TexParser.fsy"
                 : 'expression));
# 436 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'highPriorityFunction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "TexParser.fsy"
                                                _1 
                   )
# 74 "TexParser.fsy"
                 : 'expression));
# 447 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "TexParser.fsy"
                                   Constant(Pi) 
                   )
# 82 "TexParser.fsy"
                 : 'constant));
# 457 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "TexParser.fsy"
                                   Constant(E) 
                   )
# 83 "TexParser.fsy"
                 : 'constant));
# 467 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "TexParser.fsy"
                                                                      Sum(List.rev _4) 
                   )
# 86 "TexParser.fsy"
                 : 'sum));
# 480 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'noname)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "TexParser.fsy"
                                                                                    Sum(List.rev _4) 
                   )
# 87 "TexParser.fsy"
                 : 'sum));
# 494 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "TexParser.fsy"
                                                                                 
                                                                                     report parseState "SUM operation should starts with SLASH"
                                                                                     Sum(List.rev _4)
                                                                                  
                   )
# 88 "TexParser.fsy"
                 : 'sum));
# 510 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "TexParser.fsy"
                                      report parseState "unexpected NAME"
                   )
# 94 "TexParser.fsy"
                 : 'noname));
# 520 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "TexParser.fsy"
                                                                      Prod(List.rev _4) 
                   )
# 97 "TexParser.fsy"
                 : 'prod));
# 533 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'highPriorityFunction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "TexParser.fsy"
                                                      Fact(_1) 
                   )
# 100 "TexParser.fsy"
                 : 'fact));
# 544 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "TexParser.fsy"
                                                                                          Div(_4, _7) 
                   )
# 103 "TexParser.fsy"
                 : 'frac));
# 560 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "TexParser.fsy"
                                                                                      
                                                                                                  let a = 1
                                                                                                  Pow(_2, _6) 
                                                                                               
                   )
# 106 "TexParser.fsy"
                 : 'power));
# 578 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "TexParser.fsy"
                                                                    
                                                                      report parseState "Right curly unmatched"
                                                                      Pow(Int(1), _4) 
                                                                  
                   )
# 110 "TexParser.fsy"
                 : 'power));
# 595 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _11 = (let data = parseState.GetInput(11) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _12 = (let data = parseState.GetInput(12) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _13 = (let data = parseState.GetInput(13) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _14 = (let data = parseState.GetInput(14) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "TexParser.fsy"
                                                                                                                           Integral(_12, _14, _5, _9) 
                   )
# 117 "TexParser.fsy"
                 : 'integral));
# 615 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _11 = (let data = parseState.GetInput(11) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _12 = (let data = parseState.GetInput(12) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _13 = (let data = parseState.GetInput(13) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _14 = (let data = parseState.GetInput(14) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "TexParser.fsy"
                                                                                                                           Integral(_12, _13, _5, _9) 
                   )
# 120 "TexParser.fsy"
                 : 'integral));
# 635 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _11 = (let data = parseState.GetInput(11) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "TexParser.fsy"
                                                                                                         Lim(_10, _5, _7) 
                   )
# 123 "TexParser.fsy"
                 : 'limit));
# 652 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'refValue)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "TexParser.fsy"
                                                                _1 
                   )
# 126 "TexParser.fsy"
                 : 'refPattern));
# 663 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'refValue)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "TexParser.fsy"
                                                             _4 
                   )
# 127 "TexParser.fsy"
                 : 'refPattern));
# 676 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string*int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "TexParser.fsy"
                                          analyzeDomainSpecificSingleSource (fst _1) (snd _1) |> DsAst 
                   )
# 132 "TexParser.fsy"
                 : 'refValue));
# 687 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : (string*int) list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "TexParser.fsy"
                                       analyzeDomainSpecificSources _1 |> DsAst 
                   )
# 133 "TexParser.fsy"
                 : 'refValue));
# 698 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "TexParser.fsy"
                                                        Int(_1) 
                   )
# 136 "TexParser.fsy"
                 : 'highPriorityFunction));
# 709 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "TexParser.fsy"
                                                        Float(_1) 
                   )
# 137 "TexParser.fsy"
                 : 'highPriorityFunction));
# 720 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "TexParser.fsy"
                                                        Float(Double.PositiveInfinity) 
                   )
# 138 "TexParser.fsy"
                 : 'highPriorityFunction));
# 730 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'rParen)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "TexParser.fsy"
                                                        _2 
                   )
# 139 "TexParser.fsy"
                 : 'highPriorityFunction));
# 742 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'trigonometry)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "TexParser.fsy"
                                                     _1 
                   )
# 140 "TexParser.fsy"
                 : 'highPriorityFunction));
# 753 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'sum)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "TexParser.fsy"
                                                     _1 
                   )
# 141 "TexParser.fsy"
                 : 'highPriorityFunction));
# 764 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'prod)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "TexParser.fsy"
                                                     _1 
                   )
# 142 "TexParser.fsy"
                 : 'highPriorityFunction));
# 775 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fact)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "TexParser.fsy"
                                                     _1 
                   )
# 143 "TexParser.fsy"
                 : 'highPriorityFunction));
# 786 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'integral)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "TexParser.fsy"
                                                     _1 
                   )
# 144 "TexParser.fsy"
                 : 'highPriorityFunction));
# 797 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'constant)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "TexParser.fsy"
                                                     _1 
                   )
# 145 "TexParser.fsy"
                 : 'highPriorityFunction));
# 808 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'power)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "TexParser.fsy"
                                                        _1 
                   )
# 146 "TexParser.fsy"
                 : 'highPriorityFunction));
# 819 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'frac)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "TexParser.fsy"
                                                        _1 
                   )
# 147 "TexParser.fsy"
                 : 'highPriorityFunction));
# 830 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'limit)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "TexParser.fsy"
                                                     _1 
                   )
# 148 "TexParser.fsy"
                 : 'highPriorityFunction));
# 841 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'refPattern)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "TexParser.fsy"
                                                     _1 
                   )
# 149 "TexParser.fsy"
                 : 'highPriorityFunction));
# 852 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "TexParser.fsy"
                                                     Var(_1) 
                   )
# 150 "TexParser.fsy"
                 : 'highPriorityFunction));
# 863 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'errRule)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "TexParser.fsy"
                                         _1 
                   )
# 151 "TexParser.fsy"
                 : 'highPriorityFunction));
# 874 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "TexParser.fsy"
                                                                                                Sin(_4, Int(1)) 
                   )
# 159 "TexParser.fsy"
                 : 'trigonometry));
# 887 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "TexParser.fsy"
                                                                                                Sin(_8, _5) 
                   )
# 160 "TexParser.fsy"
                 : 'trigonometry));
# 903 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "TexParser.fsy"
                                                                                                Cos(_4, Int(1)) 
                   )
# 161 "TexParser.fsy"
                 : 'trigonometry));
# 916 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "TexParser.fsy"
                                                                                                Cos(_8, _5) 
                   )
# 162 "TexParser.fsy"
                 : 'trigonometry));
# 932 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'trigName)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "TexParser.fsy"
                                                                                     
                                                                                          report parseState "SIN/COS operation should starts with SLASH"
                                                                                          Sin(_4, Int(1))
                                                                                       
                   )
# 163 "TexParser.fsy"
                 : 'trigonometry));
# 949 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "TexParser.fsy"
                                
                   )
# 169 "TexParser.fsy"
                 : 'trigName));
# 959 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "TexParser.fsy"
                             
                   )
# 170 "TexParser.fsy"
                 : 'trigName));
# 969 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "TexParser.fsy"
                                                          
                                                          let p = 1
                                                          Plus(_1, _3)
                                                        
                   )
# 173 "TexParser.fsy"
                 : 'binaryExpression));
# 984 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "TexParser.fsy"
                                                          Sub(_1, _3)  
                   )
# 177 "TexParser.fsy"
                 : 'binaryExpression));
# 996 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "TexParser.fsy"
                                                          Mul(_1, _3)  
                   )
# 178 "TexParser.fsy"
                 : 'binaryExpression));
# 1008 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 "TexParser.fsy"
                                                          Div(_1, _3)  
                   )
# 179 "TexParser.fsy"
                 : 'binaryExpression));
# 1020 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 180 "TexParser.fsy"
                                                          Bmod(_1, _3) 
                   )
# 180 "TexParser.fsy"
                 : 'binaryExpression));
# 1032 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 181 "TexParser.fsy"
                                                       Neg(_2) 
                   )
# 181 "TexParser.fsy"
                 : 'binaryExpression));
# 1043 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'binaryOperator)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 193 "TexParser.fsy"
                                                                      
                                                            report parseState "First operand" 
                                                            Plus(_2, _2)
                                                        
                   )
# 193 "TexParser.fsy"
                 : 'binaryExpression));
# 1058 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'binaryOperator)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 197 "TexParser.fsy"
                                                                         
                                                            report parseState "Second operand" 
                                                            Plus(_1, _1)
                                                        
                   )
# 197 "TexParser.fsy"
                 : 'binaryExpression));
# 1073 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 203 "TexParser.fsy"
                                 
                   )
# 203 "TexParser.fsy"
                 : 'binaryOperator));
# 1083 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 204 "TexParser.fsy"
                                 
                   )
# 204 "TexParser.fsy"
                 : 'binaryOperator));
# 1093 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 205 "TexParser.fsy"
                                 
                   )
# 205 "TexParser.fsy"
                 : 'binaryOperator));
# 1103 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 206 "TexParser.fsy"
                                 
                   )
# 206 "TexParser.fsy"
                 : 'binaryOperator));
# 1113 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 207 "TexParser.fsy"
                                 
                   )
# 207 "TexParser.fsy"
                 : 'binaryOperator));
# 1123 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 210 "TexParser.fsy"
                                                                 
                                                                let a = 1
                                                                [_1]
                                                               
                   )
# 210 "TexParser.fsy"
                 : 'argumentSet));
# 1137 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 214 "TexParser.fsy"
                                                       _3::_1 
                   )
# 214 "TexParser.fsy"
                 : 'argumentSet));
# 1149 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 226 "TexParser.fsy"
                                    
                                      let lexbuf = parseState.ParserLocalStore.["LexBuffer"] :?> LexBuffer<char>
                                      (new string(lexbuf.Lexeme), lexbuf.StartPos.Line, lexbuf.StartPos.Column) 
                                  
                   )
# 226 "TexParser.fsy"
                 : 'missingBinary));
# 1162 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 232 "TexParser.fsy"
                                     LCURLY 
                   )
# 232 "TexParser.fsy"
                 : 'lCurly));
# 1172 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 233 "TexParser.fsy"
                                  
                                       report parseState "Left curly brace" 
                                       LCURLY 
                                   
                   )
# 233 "TexParser.fsy"
                 : 'lCurly));
# 1185 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 239 "TexParser.fsy"
                                     RCURLY 
                   )
# 239 "TexParser.fsy"
                 : 'rCurly));
# 1195 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 240 "TexParser.fsy"
                                  
                                       report parseState "Right curly brace" 
                                       RCURLY 
                                   
                   )
# 240 "TexParser.fsy"
                 : 'rCurly));
# 1208 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 246 "TexParser.fsy"
                                     LPAREN 
                   )
# 246 "TexParser.fsy"
                 : 'lParen));
# 1218 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 247 "TexParser.fsy"
                                     
                                       report parseState "Left paren" 
                                       LPAREN 
                                   
                   )
# 247 "TexParser.fsy"
                 : 'lParen));
# 1231 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 260 "TexParser.fsy"
                                     RPAREN 
                   )
# 260 "TexParser.fsy"
                 : 'rParen));
# 1241 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 261 "TexParser.fsy"
                                     
                                       report parseState "Right paren" 
                                       RPAREN 
                                   
                   )
# 261 "TexParser.fsy"
                 : 'rParen));
# 1254 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 268 "TexParser.fsy"
                                               
                                                 report parseState "Unexpected RCURLY"
                                                 _1
                                             
                   )
# 268 "TexParser.fsy"
                 : 'errRule));
# 1268 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 272 "TexParser.fsy"
                                               
                                                 report parseState "Unexpected RPAREN"
                                                 _1
                                             
                   )
# 272 "TexParser.fsy"
                 : 'errRule));
|]
# 1283 "TexParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 39;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : TexAst.Expr =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
