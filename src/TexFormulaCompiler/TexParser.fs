// Implementation file for parser generated by fsyacc
module TexParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "TexParser.fsy"

open TexAst
open System
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing
open ErrorHandling

let mutable domainSpecificAnalyzer = Unchecked.defaultof<DomainSpecificContext -> obj>
let mutable errorLogger = Unchecked.defaultof<ErrorLogger>

let analyzeDomainSpecificLanguage token = domainSpecificAnalyzer token

let analyzeDomainSpecificSource token startPos = 
    try
      analyzeDomainSpecificLanguage token
    with
      | DomainSpecificParseException(fString, pos) -> failwithf "%s at pos: %u" fString (startPos)

let analyzeDomainSpecificSingleSource src pos = 
    analyzeDomainSpecificSource (SRefValueSrc(src)) pos |> SRefValue

let analyzeDomainSpecificSources sources = 
    let rec analyzeDomainSpecificSourcesInternal sources state = 
        match sources with
          | [] -> state
          | (src, pos)::t -> analyzeDomainSpecificSourcesInternal t ((analyzeDomainSpecificSource (MRefValueSrc(src)) pos)::state)
        
    analyzeDomainSpecificSourcesInternal sources [] 
    |> List.rev 
    |> MRefValue

let report (parseState : IParseState) sym = 
    let lexbuf = parseState.ParserLocalStore.["LexBuffer"] :?> LexBuffer<char>
    let errorMsg = sprintf "Unexpected symbol: %s. %s symbol required" (new String(lexbuf.Lexeme)) sym
    let error = Error(errorMsg, {Line = lexbuf.StartPos.Line; Column = lexbuf.StartPos.Column})
    errorLogger.ReportError(error)


# 45 "TexParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | PI
  | EULERNUM
  | FRAC
  | SQRT
  | SUM
  | PROD
  | INTEGRAL
  | TIMES
  | INFTY
  | TO
  | LIM
  | BMOD
  | TEXT
  | SIN
  | COS
  | PLUS
  | SUB
  | MUL
  | DIV
  | LPAREN
  | RPAREN
  | LCURLY
  | RCURLY
  | EXCL
  | CARET
  | EQ
  | UNDERSCORE
  | SLASH
  | COMMA
  | MREFVAL of ((string*int) list)
  | SREFVAL of (string*int)
  | ID of (string)
  | DIFF of (string)
  | FLOAT of (float)
  | INT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_PI
    | TOKEN_EULERNUM
    | TOKEN_FRAC
    | TOKEN_SQRT
    | TOKEN_SUM
    | TOKEN_PROD
    | TOKEN_INTEGRAL
    | TOKEN_TIMES
    | TOKEN_INFTY
    | TOKEN_TO
    | TOKEN_LIM
    | TOKEN_BMOD
    | TOKEN_TEXT
    | TOKEN_SIN
    | TOKEN_COS
    | TOKEN_PLUS
    | TOKEN_SUB
    | TOKEN_MUL
    | TOKEN_DIV
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LCURLY
    | TOKEN_RCURLY
    | TOKEN_EXCL
    | TOKEN_CARET
    | TOKEN_EQ
    | TOKEN_UNDERSCORE
    | TOKEN_SLASH
    | TOKEN_COMMA
    | TOKEN_MREFVAL
    | TOKEN_SREFVAL
    | TOKEN_ID
    | TOKEN_DIFF
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_expression
    | NONTERM_constant
    | NONTERM_sum
    | NONTERM_noname
    | NONTERM_prod
    | NONTERM_fact
    | NONTERM_frac
    | NONTERM_power
    | NONTERM_integral
    | NONTERM_limit
    | NONTERM_refPattern
    | NONTERM_refValue
    | NONTERM_highPriorityFunction
    | NONTERM_trigonometry
    | NONTERM_trigName
    | NONTERM_binaryExpression
    | NONTERM_binaryOperator
    | NONTERM_argumentSet
    | NONTERM_expr
    | NONTERM_recover
    | NONTERM_errRule
    | NONTERM_lCurly
    | NONTERM_rCurly
    | NONTERM_lParen
    | NONTERM_rParen

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | PI  -> 1 
  | EULERNUM  -> 2 
  | FRAC  -> 3 
  | SQRT  -> 4 
  | SUM  -> 5 
  | PROD  -> 6 
  | INTEGRAL  -> 7 
  | TIMES  -> 8 
  | INFTY  -> 9 
  | TO  -> 10 
  | LIM  -> 11 
  | BMOD  -> 12 
  | TEXT  -> 13 
  | SIN  -> 14 
  | COS  -> 15 
  | PLUS  -> 16 
  | SUB  -> 17 
  | MUL  -> 18 
  | DIV  -> 19 
  | LPAREN  -> 20 
  | RPAREN  -> 21 
  | LCURLY  -> 22 
  | RCURLY  -> 23 
  | EXCL  -> 24 
  | CARET  -> 25 
  | EQ  -> 26 
  | UNDERSCORE  -> 27 
  | SLASH  -> 28 
  | COMMA  -> 29 
  | MREFVAL _ -> 30 
  | SREFVAL _ -> 31 
  | ID _ -> 32 
  | DIFF _ -> 33 
  | FLOAT _ -> 34 
  | INT _ -> 35 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_PI 
  | 2 -> TOKEN_EULERNUM 
  | 3 -> TOKEN_FRAC 
  | 4 -> TOKEN_SQRT 
  | 5 -> TOKEN_SUM 
  | 6 -> TOKEN_PROD 
  | 7 -> TOKEN_INTEGRAL 
  | 8 -> TOKEN_TIMES 
  | 9 -> TOKEN_INFTY 
  | 10 -> TOKEN_TO 
  | 11 -> TOKEN_LIM 
  | 12 -> TOKEN_BMOD 
  | 13 -> TOKEN_TEXT 
  | 14 -> TOKEN_SIN 
  | 15 -> TOKEN_COS 
  | 16 -> TOKEN_PLUS 
  | 17 -> TOKEN_SUB 
  | 18 -> TOKEN_MUL 
  | 19 -> TOKEN_DIV 
  | 20 -> TOKEN_LPAREN 
  | 21 -> TOKEN_RPAREN 
  | 22 -> TOKEN_LCURLY 
  | 23 -> TOKEN_RCURLY 
  | 24 -> TOKEN_EXCL 
  | 25 -> TOKEN_CARET 
  | 26 -> TOKEN_EQ 
  | 27 -> TOKEN_UNDERSCORE 
  | 28 -> TOKEN_SLASH 
  | 29 -> TOKEN_COMMA 
  | 30 -> TOKEN_MREFVAL 
  | 31 -> TOKEN_SREFVAL 
  | 32 -> TOKEN_ID 
  | 33 -> TOKEN_DIFF 
  | 34 -> TOKEN_FLOAT 
  | 35 -> TOKEN_INT 
  | 38 -> TOKEN_end_of_input
  | 36 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_expression 
    | 3 -> NONTERM_expression 
    | 4 -> NONTERM_constant 
    | 5 -> NONTERM_constant 
    | 6 -> NONTERM_sum 
    | 7 -> NONTERM_sum 
    | 8 -> NONTERM_sum 
    | 9 -> NONTERM_sum 
    | 10 -> NONTERM_noname 
    | 11 -> NONTERM_prod 
    | 12 -> NONTERM_fact 
    | 13 -> NONTERM_frac 
    | 14 -> NONTERM_power 
    | 15 -> NONTERM_power 
    | 16 -> NONTERM_integral 
    | 17 -> NONTERM_integral 
    | 18 -> NONTERM_limit 
    | 19 -> NONTERM_refPattern 
    | 20 -> NONTERM_refPattern 
    | 21 -> NONTERM_refValue 
    | 22 -> NONTERM_refValue 
    | 23 -> NONTERM_highPriorityFunction 
    | 24 -> NONTERM_highPriorityFunction 
    | 25 -> NONTERM_highPriorityFunction 
    | 26 -> NONTERM_highPriorityFunction 
    | 27 -> NONTERM_highPriorityFunction 
    | 28 -> NONTERM_highPriorityFunction 
    | 29 -> NONTERM_highPriorityFunction 
    | 30 -> NONTERM_highPriorityFunction 
    | 31 -> NONTERM_highPriorityFunction 
    | 32 -> NONTERM_highPriorityFunction 
    | 33 -> NONTERM_highPriorityFunction 
    | 34 -> NONTERM_highPriorityFunction 
    | 35 -> NONTERM_highPriorityFunction 
    | 36 -> NONTERM_highPriorityFunction 
    | 37 -> NONTERM_highPriorityFunction 
    | 38 -> NONTERM_highPriorityFunction 
    | 39 -> NONTERM_trigonometry 
    | 40 -> NONTERM_trigonometry 
    | 41 -> NONTERM_trigonometry 
    | 42 -> NONTERM_trigonometry 
    | 43 -> NONTERM_trigonometry 
    | 44 -> NONTERM_trigName 
    | 45 -> NONTERM_trigName 
    | 46 -> NONTERM_binaryExpression 
    | 47 -> NONTERM_binaryExpression 
    | 48 -> NONTERM_binaryExpression 
    | 49 -> NONTERM_binaryExpression 
    | 50 -> NONTERM_binaryExpression 
    | 51 -> NONTERM_binaryExpression 
    | 52 -> NONTERM_binaryExpression 
    | 53 -> NONTERM_binaryExpression 
    | 54 -> NONTERM_binaryExpression 
    | 55 -> NONTERM_binaryOperator 
    | 56 -> NONTERM_binaryOperator 
    | 57 -> NONTERM_binaryOperator 
    | 58 -> NONTERM_binaryOperator 
    | 59 -> NONTERM_binaryOperator 
    | 60 -> NONTERM_argumentSet 
    | 61 -> NONTERM_argumentSet 
    | 62 -> NONTERM_argumentSet 
    | 63 -> NONTERM_argumentSet 
    | 64 -> NONTERM_expr 
    | 65 -> NONTERM_recover 
    | 66 -> NONTERM_errRule 
    | 67 -> NONTERM_errRule 
    | 68 -> NONTERM_errRule 
    | 69 -> NONTERM_errRule 
    | 70 -> NONTERM_lCurly 
    | 71 -> NONTERM_lCurly 
    | 72 -> NONTERM_rCurly 
    | 73 -> NONTERM_rCurly 
    | 74 -> NONTERM_lParen 
    | 75 -> NONTERM_lParen 
    | 76 -> NONTERM_rParen 
    | 77 -> NONTERM_rParen 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 38 
let _fsyacc_tagOfErrorTerminal = 36

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | PI  -> "PI" 
  | EULERNUM  -> "EULERNUM" 
  | FRAC  -> "FRAC" 
  | SQRT  -> "SQRT" 
  | SUM  -> "SUM" 
  | PROD  -> "PROD" 
  | INTEGRAL  -> "INTEGRAL" 
  | TIMES  -> "TIMES" 
  | INFTY  -> "INFTY" 
  | TO  -> "TO" 
  | LIM  -> "LIM" 
  | BMOD  -> "BMOD" 
  | TEXT  -> "TEXT" 
  | SIN  -> "SIN" 
  | COS  -> "COS" 
  | PLUS  -> "PLUS" 
  | SUB  -> "SUB" 
  | MUL  -> "MUL" 
  | DIV  -> "DIV" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | LCURLY  -> "LCURLY" 
  | RCURLY  -> "RCURLY" 
  | EXCL  -> "EXCL" 
  | CARET  -> "CARET" 
  | EQ  -> "EQ" 
  | UNDERSCORE  -> "UNDERSCORE" 
  | SLASH  -> "SLASH" 
  | COMMA  -> "COMMA" 
  | MREFVAL _ -> "MREFVAL" 
  | SREFVAL _ -> "SREFVAL" 
  | ID _ -> "ID" 
  | DIFF _ -> "DIFF" 
  | FLOAT _ -> "FLOAT" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | PI  -> (null : System.Object) 
  | EULERNUM  -> (null : System.Object) 
  | FRAC  -> (null : System.Object) 
  | SQRT  -> (null : System.Object) 
  | SUM  -> (null : System.Object) 
  | PROD  -> (null : System.Object) 
  | INTEGRAL  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | INFTY  -> (null : System.Object) 
  | TO  -> (null : System.Object) 
  | LIM  -> (null : System.Object) 
  | BMOD  -> (null : System.Object) 
  | TEXT  -> (null : System.Object) 
  | SIN  -> (null : System.Object) 
  | COS  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | SUB  -> (null : System.Object) 
  | MUL  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LCURLY  -> (null : System.Object) 
  | RCURLY  -> (null : System.Object) 
  | EXCL  -> (null : System.Object) 
  | CARET  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | UNDERSCORE  -> (null : System.Object) 
  | SLASH  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | MREFVAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SREFVAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DIFF _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 67us; 65535us; 0us; 2us; 2us; 136us; 10us; 133us; 11us; 136us; 14us; 133us; 15us; 136us; 18us; 135us; 21us; 133us; 22us; 136us; 25us; 133us; 26us; 136us; 30us; 31us; 31us; 136us; 33us; 34us; 34us; 136us; 36us; 37us; 37us; 136us; 40us; 41us; 41us; 136us; 59us; 62us; 60us; 61us; 61us; 136us; 62us; 136us; 65us; 66us; 66us; 136us; 67us; 68us; 68us; 136us; 76us; 77us; 77us; 136us; 78us; 79us; 79us; 136us; 90us; 91us; 91us; 136us; 106us; 107us; 107us; 136us; 109us; 110us; 110us; 136us; 111us; 112us; 112us; 136us; 114us; 115us; 115us; 136us; 117us; 118us; 118us; 136us; 119us; 120us; 120us; 136us; 122us; 123us; 123us; 136us; 126us; 136us; 127us; 136us; 128us; 136us; 129us; 136us; 130us; 136us; 131us; 136us; 132us; 136us; 133us; 136us; 134us; 136us; 135us; 136us; 136us; 136us; 137us; 126us; 138us; 127us; 139us; 128us; 140us; 129us; 141us; 130us; 142us; 131us; 143us; 132us; 144us; 132us; 150us; 134us; 67us; 65535us; 0us; 98us; 2us; 98us; 10us; 98us; 11us; 98us; 14us; 98us; 15us; 98us; 18us; 98us; 21us; 98us; 22us; 98us; 25us; 98us; 26us; 98us; 30us; 98us; 31us; 98us; 33us; 98us; 34us; 98us; 36us; 98us; 37us; 98us; 40us; 98us; 41us; 98us; 59us; 98us; 60us; 98us; 61us; 98us; 62us; 98us; 65us; 98us; 66us; 98us; 67us; 98us; 68us; 98us; 76us; 98us; 77us; 98us; 78us; 98us; 79us; 98us; 90us; 98us; 91us; 98us; 106us; 98us; 107us; 98us; 109us; 98us; 110us; 98us; 111us; 98us; 112us; 98us; 114us; 98us; 115us; 98us; 117us; 98us; 118us; 98us; 119us; 98us; 120us; 98us; 122us; 98us; 123us; 98us; 126us; 98us; 127us; 98us; 128us; 98us; 129us; 98us; 130us; 98us; 131us; 98us; 132us; 98us; 133us; 98us; 134us; 98us; 135us; 98us; 136us; 98us; 137us; 98us; 138us; 98us; 139us; 98us; 140us; 98us; 141us; 98us; 142us; 98us; 143us; 98us; 144us; 98us; 150us; 98us; 67us; 65535us; 0us; 94us; 2us; 94us; 10us; 94us; 11us; 94us; 14us; 94us; 15us; 94us; 18us; 94us; 21us; 94us; 22us; 94us; 25us; 94us; 26us; 94us; 30us; 94us; 31us; 94us; 33us; 94us; 34us; 94us; 36us; 94us; 37us; 94us; 40us; 94us; 41us; 94us; 59us; 94us; 60us; 94us; 61us; 94us; 62us; 94us; 65us; 94us; 66us; 94us; 67us; 94us; 68us; 94us; 76us; 94us; 77us; 94us; 78us; 94us; 79us; 94us; 90us; 94us; 91us; 94us; 106us; 94us; 107us; 94us; 109us; 94us; 110us; 94us; 111us; 94us; 112us; 94us; 114us; 94us; 115us; 94us; 117us; 94us; 118us; 94us; 119us; 94us; 120us; 94us; 122us; 94us; 123us; 94us; 126us; 94us; 127us; 94us; 128us; 94us; 129us; 94us; 130us; 94us; 131us; 94us; 132us; 94us; 133us; 94us; 134us; 94us; 135us; 94us; 136us; 94us; 137us; 94us; 138us; 94us; 139us; 94us; 140us; 94us; 141us; 94us; 142us; 94us; 143us; 94us; 144us; 94us; 150us; 94us; 0us; 65535us; 67us; 65535us; 0us; 95us; 2us; 95us; 10us; 95us; 11us; 95us; 14us; 95us; 15us; 95us; 18us; 95us; 21us; 95us; 22us; 95us; 25us; 95us; 26us; 95us; 30us; 95us; 31us; 95us; 33us; 95us; 34us; 95us; 36us; 95us; 37us; 95us; 40us; 95us; 41us; 95us; 59us; 95us; 60us; 95us; 61us; 95us; 62us; 95us; 65us; 95us; 66us; 95us; 67us; 95us; 68us; 95us; 76us; 95us; 77us; 95us; 78us; 95us; 79us; 95us; 90us; 95us; 91us; 95us; 106us; 95us; 107us; 95us; 109us; 95us; 110us; 95us; 111us; 95us; 112us; 95us; 114us; 95us; 115us; 95us; 117us; 95us; 118us; 95us; 119us; 95us; 120us; 95us; 122us; 95us; 123us; 95us; 126us; 95us; 127us; 95us; 128us; 95us; 129us; 95us; 130us; 95us; 131us; 95us; 132us; 95us; 133us; 95us; 134us; 95us; 135us; 95us; 136us; 95us; 137us; 95us; 138us; 95us; 139us; 95us; 140us; 95us; 141us; 95us; 142us; 95us; 143us; 95us; 144us; 95us; 150us; 95us; 67us; 65535us; 0us; 96us; 2us; 96us; 10us; 96us; 11us; 96us; 14us; 96us; 15us; 96us; 18us; 96us; 21us; 96us; 22us; 96us; 25us; 96us; 26us; 96us; 30us; 96us; 31us; 96us; 33us; 96us; 34us; 96us; 36us; 96us; 37us; 96us; 40us; 96us; 41us; 96us; 59us; 96us; 60us; 96us; 61us; 96us; 62us; 96us; 65us; 96us; 66us; 96us; 67us; 96us; 68us; 96us; 76us; 96us; 77us; 96us; 78us; 96us; 79us; 96us; 90us; 96us; 91us; 96us; 106us; 96us; 107us; 96us; 109us; 96us; 110us; 96us; 111us; 96us; 112us; 96us; 114us; 96us; 115us; 96us; 117us; 96us; 118us; 96us; 119us; 96us; 120us; 96us; 122us; 96us; 123us; 96us; 126us; 96us; 127us; 96us; 128us; 96us; 129us; 96us; 130us; 96us; 131us; 96us; 132us; 96us; 133us; 96us; 134us; 96us; 135us; 96us; 136us; 96us; 137us; 96us; 138us; 96us; 139us; 96us; 140us; 96us; 141us; 96us; 142us; 96us; 143us; 96us; 144us; 96us; 150us; 96us; 67us; 65535us; 0us; 100us; 2us; 100us; 10us; 100us; 11us; 100us; 14us; 100us; 15us; 100us; 18us; 100us; 21us; 100us; 22us; 100us; 25us; 100us; 26us; 100us; 30us; 100us; 31us; 100us; 33us; 100us; 34us; 100us; 36us; 100us; 37us; 100us; 40us; 100us; 41us; 100us; 59us; 100us; 60us; 100us; 61us; 100us; 62us; 100us; 65us; 100us; 66us; 100us; 67us; 100us; 68us; 100us; 76us; 100us; 77us; 100us; 78us; 100us; 79us; 100us; 90us; 100us; 91us; 100us; 106us; 100us; 107us; 100us; 109us; 100us; 110us; 100us; 111us; 100us; 112us; 100us; 114us; 100us; 115us; 100us; 117us; 100us; 118us; 100us; 119us; 100us; 120us; 100us; 122us; 100us; 123us; 100us; 126us; 100us; 127us; 100us; 128us; 100us; 129us; 100us; 130us; 100us; 131us; 100us; 132us; 100us; 133us; 100us; 134us; 100us; 135us; 100us; 136us; 100us; 137us; 100us; 138us; 100us; 139us; 100us; 140us; 100us; 141us; 100us; 142us; 100us; 143us; 100us; 144us; 100us; 150us; 100us; 67us; 65535us; 0us; 99us; 2us; 99us; 10us; 99us; 11us; 99us; 14us; 99us; 15us; 99us; 18us; 99us; 21us; 99us; 22us; 99us; 25us; 99us; 26us; 99us; 30us; 99us; 31us; 99us; 33us; 99us; 34us; 99us; 36us; 99us; 37us; 99us; 40us; 99us; 41us; 99us; 59us; 99us; 60us; 99us; 61us; 99us; 62us; 99us; 65us; 99us; 66us; 99us; 67us; 99us; 68us; 99us; 76us; 99us; 77us; 99us; 78us; 99us; 79us; 99us; 90us; 99us; 91us; 99us; 106us; 99us; 107us; 99us; 109us; 99us; 110us; 99us; 111us; 99us; 112us; 99us; 114us; 99us; 115us; 99us; 117us; 99us; 118us; 99us; 119us; 99us; 120us; 99us; 122us; 99us; 123us; 99us; 126us; 99us; 127us; 99us; 128us; 99us; 129us; 99us; 130us; 99us; 131us; 99us; 132us; 99us; 133us; 99us; 134us; 99us; 135us; 99us; 136us; 99us; 137us; 99us; 138us; 99us; 139us; 99us; 140us; 99us; 141us; 99us; 142us; 99us; 143us; 99us; 144us; 99us; 150us; 99us; 67us; 65535us; 0us; 97us; 2us; 97us; 10us; 97us; 11us; 97us; 14us; 97us; 15us; 97us; 18us; 97us; 21us; 97us; 22us; 97us; 25us; 97us; 26us; 97us; 30us; 97us; 31us; 97us; 33us; 97us; 34us; 97us; 36us; 97us; 37us; 97us; 40us; 97us; 41us; 97us; 59us; 97us; 60us; 97us; 61us; 97us; 62us; 97us; 65us; 97us; 66us; 97us; 67us; 97us; 68us; 97us; 76us; 97us; 77us; 97us; 78us; 97us; 79us; 97us; 90us; 97us; 91us; 97us; 106us; 97us; 107us; 97us; 109us; 97us; 110us; 97us; 111us; 97us; 112us; 97us; 114us; 97us; 115us; 97us; 117us; 97us; 118us; 97us; 119us; 97us; 120us; 97us; 122us; 97us; 123us; 97us; 126us; 97us; 127us; 97us; 128us; 97us; 129us; 97us; 130us; 97us; 131us; 97us; 132us; 97us; 133us; 97us; 134us; 97us; 135us; 97us; 136us; 97us; 137us; 97us; 138us; 97us; 139us; 97us; 140us; 97us; 141us; 97us; 142us; 97us; 143us; 97us; 144us; 97us; 150us; 97us; 67us; 65535us; 0us; 101us; 2us; 101us; 10us; 101us; 11us; 101us; 14us; 101us; 15us; 101us; 18us; 101us; 21us; 101us; 22us; 101us; 25us; 101us; 26us; 101us; 30us; 101us; 31us; 101us; 33us; 101us; 34us; 101us; 36us; 101us; 37us; 101us; 40us; 101us; 41us; 101us; 59us; 101us; 60us; 101us; 61us; 101us; 62us; 101us; 65us; 101us; 66us; 101us; 67us; 101us; 68us; 101us; 76us; 101us; 77us; 101us; 78us; 101us; 79us; 101us; 90us; 101us; 91us; 101us; 106us; 101us; 107us; 101us; 109us; 101us; 110us; 101us; 111us; 101us; 112us; 101us; 114us; 101us; 115us; 101us; 117us; 101us; 118us; 101us; 119us; 101us; 120us; 101us; 122us; 101us; 123us; 101us; 126us; 101us; 127us; 101us; 128us; 101us; 129us; 101us; 130us; 101us; 131us; 101us; 132us; 101us; 133us; 101us; 134us; 101us; 135us; 101us; 136us; 101us; 137us; 101us; 138us; 101us; 139us; 101us; 140us; 101us; 141us; 101us; 142us; 101us; 143us; 101us; 144us; 101us; 150us; 101us; 67us; 65535us; 0us; 102us; 2us; 102us; 10us; 102us; 11us; 102us; 14us; 102us; 15us; 102us; 18us; 102us; 21us; 102us; 22us; 102us; 25us; 102us; 26us; 102us; 30us; 102us; 31us; 102us; 33us; 102us; 34us; 102us; 36us; 102us; 37us; 102us; 40us; 102us; 41us; 102us; 59us; 102us; 60us; 102us; 61us; 102us; 62us; 102us; 65us; 102us; 66us; 102us; 67us; 102us; 68us; 102us; 76us; 102us; 77us; 102us; 78us; 102us; 79us; 102us; 90us; 102us; 91us; 102us; 106us; 102us; 107us; 102us; 109us; 102us; 110us; 102us; 111us; 102us; 112us; 102us; 114us; 102us; 115us; 102us; 117us; 102us; 118us; 102us; 119us; 102us; 120us; 102us; 122us; 102us; 123us; 102us; 126us; 102us; 127us; 102us; 128us; 102us; 129us; 102us; 130us; 102us; 131us; 102us; 132us; 102us; 133us; 102us; 134us; 102us; 135us; 102us; 136us; 102us; 137us; 102us; 138us; 102us; 139us; 102us; 140us; 102us; 141us; 102us; 142us; 102us; 143us; 102us; 144us; 102us; 150us; 102us; 68us; 65535us; 0us; 80us; 2us; 80us; 10us; 80us; 11us; 80us; 14us; 80us; 15us; 80us; 18us; 80us; 21us; 80us; 22us; 80us; 25us; 80us; 26us; 80us; 30us; 80us; 31us; 80us; 33us; 80us; 34us; 80us; 36us; 80us; 37us; 80us; 40us; 80us; 41us; 80us; 59us; 80us; 60us; 80us; 61us; 80us; 62us; 80us; 65us; 80us; 66us; 80us; 67us; 80us; 68us; 80us; 76us; 80us; 77us; 80us; 78us; 80us; 79us; 80us; 82us; 83us; 90us; 80us; 91us; 80us; 106us; 80us; 107us; 80us; 109us; 80us; 110us; 80us; 111us; 80us; 112us; 80us; 114us; 80us; 115us; 80us; 117us; 80us; 118us; 80us; 119us; 80us; 120us; 80us; 122us; 80us; 123us; 80us; 126us; 80us; 127us; 80us; 128us; 80us; 129us; 80us; 130us; 80us; 131us; 80us; 132us; 80us; 133us; 80us; 134us; 80us; 135us; 80us; 136us; 80us; 137us; 80us; 138us; 80us; 139us; 80us; 140us; 80us; 141us; 80us; 142us; 80us; 143us; 80us; 144us; 80us; 150us; 80us; 67us; 65535us; 0us; 5us; 2us; 5us; 10us; 5us; 11us; 5us; 14us; 5us; 15us; 5us; 18us; 5us; 21us; 5us; 22us; 5us; 25us; 5us; 26us; 5us; 30us; 5us; 31us; 5us; 33us; 5us; 34us; 5us; 36us; 5us; 37us; 5us; 40us; 5us; 41us; 5us; 59us; 5us; 60us; 5us; 61us; 5us; 62us; 5us; 65us; 5us; 66us; 5us; 67us; 5us; 68us; 5us; 76us; 5us; 77us; 5us; 78us; 5us; 79us; 5us; 90us; 5us; 91us; 5us; 106us; 5us; 107us; 5us; 109us; 5us; 110us; 5us; 111us; 5us; 112us; 5us; 114us; 5us; 115us; 5us; 117us; 5us; 118us; 5us; 119us; 5us; 120us; 5us; 122us; 5us; 123us; 5us; 126us; 5us; 127us; 5us; 128us; 5us; 129us; 5us; 130us; 5us; 131us; 5us; 132us; 5us; 133us; 5us; 134us; 5us; 135us; 5us; 136us; 5us; 137us; 5us; 138us; 5us; 139us; 5us; 140us; 5us; 141us; 5us; 142us; 5us; 143us; 5us; 144us; 5us; 150us; 5us; 67us; 65535us; 0us; 93us; 2us; 93us; 10us; 93us; 11us; 93us; 14us; 93us; 15us; 93us; 18us; 93us; 21us; 93us; 22us; 93us; 25us; 93us; 26us; 93us; 30us; 93us; 31us; 93us; 33us; 93us; 34us; 93us; 36us; 93us; 37us; 93us; 40us; 93us; 41us; 93us; 59us; 93us; 60us; 93us; 61us; 93us; 62us; 93us; 65us; 93us; 66us; 93us; 67us; 93us; 68us; 93us; 76us; 93us; 77us; 93us; 78us; 93us; 79us; 93us; 90us; 93us; 91us; 93us; 106us; 93us; 107us; 93us; 109us; 93us; 110us; 93us; 111us; 93us; 112us; 93us; 114us; 93us; 115us; 93us; 117us; 93us; 118us; 93us; 119us; 93us; 120us; 93us; 122us; 93us; 123us; 93us; 126us; 93us; 127us; 93us; 128us; 93us; 129us; 93us; 130us; 93us; 131us; 93us; 132us; 93us; 133us; 93us; 134us; 93us; 135us; 93us; 136us; 93us; 137us; 93us; 138us; 93us; 139us; 93us; 140us; 93us; 141us; 93us; 142us; 93us; 143us; 93us; 144us; 93us; 150us; 93us; 2us; 65535us; 18us; 121us; 19us; 121us; 67us; 65535us; 0us; 4us; 2us; 4us; 10us; 4us; 11us; 4us; 14us; 4us; 15us; 4us; 18us; 4us; 21us; 4us; 22us; 4us; 25us; 4us; 26us; 4us; 30us; 4us; 31us; 4us; 33us; 4us; 34us; 4us; 36us; 4us; 37us; 4us; 40us; 4us; 41us; 4us; 59us; 4us; 60us; 4us; 61us; 4us; 62us; 4us; 65us; 4us; 66us; 4us; 67us; 4us; 68us; 4us; 76us; 4us; 77us; 4us; 78us; 4us; 79us; 4us; 90us; 4us; 91us; 4us; 106us; 4us; 107us; 4us; 109us; 4us; 110us; 4us; 111us; 4us; 112us; 4us; 114us; 4us; 115us; 4us; 117us; 4us; 118us; 4us; 119us; 4us; 120us; 4us; 122us; 4us; 123us; 4us; 126us; 4us; 127us; 4us; 128us; 4us; 129us; 4us; 130us; 4us; 131us; 4us; 132us; 4us; 133us; 4us; 134us; 4us; 135us; 4us; 136us; 4us; 137us; 4us; 138us; 4us; 139us; 4us; 140us; 4us; 141us; 4us; 142us; 4us; 143us; 4us; 144us; 4us; 150us; 4us; 67us; 65535us; 0us; 143us; 2us; 144us; 10us; 143us; 11us; 143us; 14us; 143us; 15us; 143us; 18us; 143us; 21us; 143us; 22us; 143us; 25us; 143us; 26us; 143us; 30us; 143us; 31us; 144us; 33us; 143us; 34us; 144us; 36us; 143us; 37us; 144us; 40us; 143us; 41us; 144us; 59us; 143us; 60us; 143us; 61us; 144us; 62us; 144us; 65us; 143us; 66us; 144us; 67us; 143us; 68us; 144us; 76us; 143us; 77us; 144us; 78us; 143us; 79us; 144us; 90us; 143us; 91us; 144us; 106us; 143us; 107us; 144us; 109us; 143us; 110us; 144us; 111us; 143us; 112us; 144us; 114us; 143us; 115us; 144us; 117us; 143us; 118us; 144us; 119us; 143us; 120us; 144us; 122us; 143us; 123us; 144us; 126us; 144us; 127us; 144us; 128us; 144us; 129us; 144us; 130us; 144us; 131us; 144us; 132us; 144us; 133us; 144us; 134us; 144us; 135us; 144us; 136us; 144us; 137us; 143us; 138us; 143us; 139us; 143us; 140us; 143us; 141us; 143us; 142us; 143us; 143us; 143us; 144us; 143us; 150us; 143us; 4us; 65535us; 10us; 11us; 14us; 15us; 21us; 22us; 25us; 26us; 34us; 65535us; 2us; 145us; 11us; 151us; 15us; 151us; 22us; 151us; 26us; 151us; 31us; 145us; 34us; 145us; 37us; 145us; 41us; 145us; 61us; 145us; 62us; 145us; 66us; 145us; 68us; 145us; 77us; 145us; 79us; 145us; 91us; 145us; 107us; 145us; 110us; 145us; 112us; 145us; 115us; 145us; 118us; 145us; 120us; 145us; 123us; 145us; 126us; 145us; 127us; 145us; 128us; 145us; 129us; 145us; 130us; 145us; 131us; 145us; 132us; 145us; 133us; 145us; 134us; 145us; 135us; 145us; 136us; 145us; 1us; 65535us; 8us; 13us; 67us; 65535us; 0us; 104us; 2us; 104us; 10us; 104us; 11us; 104us; 14us; 104us; 15us; 104us; 18us; 104us; 21us; 104us; 22us; 104us; 25us; 104us; 26us; 104us; 30us; 104us; 31us; 104us; 33us; 104us; 34us; 104us; 36us; 104us; 37us; 104us; 40us; 104us; 41us; 104us; 59us; 104us; 60us; 104us; 61us; 104us; 62us; 104us; 65us; 104us; 66us; 104us; 67us; 104us; 68us; 104us; 76us; 104us; 77us; 104us; 78us; 104us; 79us; 104us; 90us; 104us; 91us; 104us; 106us; 104us; 107us; 104us; 109us; 104us; 110us; 104us; 111us; 104us; 112us; 104us; 114us; 104us; 115us; 104us; 117us; 104us; 118us; 104us; 119us; 104us; 120us; 104us; 122us; 104us; 123us; 104us; 126us; 104us; 127us; 104us; 128us; 104us; 129us; 104us; 130us; 104us; 131us; 104us; 132us; 104us; 133us; 104us; 134us; 104us; 135us; 104us; 136us; 104us; 137us; 104us; 138us; 104us; 139us; 104us; 140us; 104us; 141us; 104us; 142us; 104us; 143us; 104us; 144us; 104us; 150us; 104us; 21us; 65535us; 9us; 10us; 13us; 14us; 20us; 21us; 24us; 25us; 29us; 30us; 32us; 33us; 39us; 40us; 45us; 67us; 48us; 78us; 51us; 111us; 54us; 119us; 57us; 59us; 58us; 60us; 64us; 65us; 73us; 74us; 81us; 82us; 105us; 106us; 108us; 109us; 113us; 114us; 116us; 117us; 121us; 122us; 69us; 65535us; 0us; 43us; 2us; 43us; 10us; 17us; 11us; 43us; 14us; 43us; 15us; 16us; 18us; 43us; 21us; 43us; 22us; 23us; 25us; 43us; 26us; 27us; 30us; 43us; 31us; 32us; 33us; 43us; 34us; 35us; 36us; 43us; 37us; 38us; 40us; 43us; 41us; 42us; 59us; 43us; 60us; 43us; 61us; 45us; 62us; 44us; 65us; 43us; 66us; 46us; 67us; 43us; 68us; 47us; 70us; 71us; 76us; 43us; 77us; 48us; 78us; 43us; 79us; 49us; 83us; 84us; 90us; 43us; 91us; 43us; 106us; 43us; 107us; 50us; 109us; 43us; 110us; 51us; 111us; 43us; 112us; 52us; 114us; 43us; 115us; 53us; 117us; 43us; 118us; 54us; 119us; 43us; 120us; 55us; 122us; 43us; 123us; 56us; 126us; 43us; 127us; 43us; 128us; 43us; 129us; 43us; 130us; 43us; 131us; 43us; 132us; 43us; 133us; 43us; 134us; 43us; 135us; 43us; 136us; 43us; 137us; 43us; 138us; 43us; 139us; 43us; 140us; 43us; 141us; 43us; 142us; 43us; 143us; 43us; 144us; 43us; 150us; 43us; 0us; 65535us; 0us; 65535us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 71us; 139us; 207us; 208us; 276us; 344us; 412us; 480us; 548us; 616us; 684us; 753us; 821us; 889us; 892us; 960us; 1028us; 1033us; 1068us; 1070us; 1138us; 1160us; 1230us; 1231us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 10us; 1us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 66us; 67us; 1us; 1us; 1us; 2us; 2us; 3us; 12us; 1us; 4us; 1us; 5us; 14us; 6us; 7us; 8us; 11us; 13us; 16us; 17us; 18us; 20us; 25us; 39us; 40us; 41us; 42us; 2us; 6us; 8us; 2us; 6us; 8us; 4us; 6us; 61us; 62us; 63us; 2us; 6us; 72us; 1us; 7us; 1us; 7us; 4us; 7us; 61us; 62us; 63us; 2us; 7us; 15us; 2us; 8us; 15us; 4us; 9us; 43us; 62us; 73us; 3us; 9us; 43us; 73us; 1us; 9us; 1us; 9us; 4us; 9us; 61us; 62us; 63us; 2us; 9us; 15us; 1us; 11us; 1us; 11us; 4us; 11us; 61us; 62us; 63us; 2us; 11us; 15us; 1us; 12us; 1us; 13us; 1us; 13us; 10us; 13us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 66us; 67us; 2us; 13us; 15us; 1us; 13us; 10us; 13us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 66us; 67us; 2us; 13us; 15us; 2us; 14us; 69us; 11us; 14us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 66us; 67us; 69us; 2us; 14us; 15us; 2us; 14us; 15us; 2us; 14us; 15us; 11us; 14us; 15us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 66us; 67us; 3us; 14us; 15us; 15us; 1us; 15us; 2us; 15us; 15us; 4us; 15us; 15us; 16us; 17us; 3us; 15us; 16us; 17us; 2us; 15us; 16us; 2us; 15us; 18us; 2us; 15us; 18us; 2us; 15us; 39us; 2us; 15us; 40us; 2us; 15us; 40us; 2us; 15us; 41us; 2us; 15us; 42us; 2us; 15us; 42us; 2us; 15us; 43us; 1us; 15us; 3us; 15us; 16us; 17us; 1us; 15us; 3us; 15us; 16us; 17us; 12us; 15us; 16us; 17us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 66us; 67us; 10us; 15us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 66us; 67us; 2us; 16us; 17us; 2us; 16us; 17us; 2us; 16us; 17us; 11us; 16us; 17us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 66us; 67us; 2us; 16us; 17us; 11us; 16us; 17us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 66us; 67us; 1us; 16us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 18us; 10us; 18us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 66us; 67us; 1us; 18us; 10us; 18us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 66us; 67us; 1us; 19us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 2us; 26us; 68us; 11us; 26us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 66us; 67us; 68us; 2us; 26us; 67us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 33us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 37us; 1us; 38us; 2us; 39us; 40us; 1us; 39us; 10us; 39us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 66us; 67us; 1us; 40us; 1us; 40us; 10us; 40us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 66us; 67us; 1us; 40us; 10us; 40us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 66us; 67us; 2us; 41us; 42us; 1us; 41us; 10us; 41us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 66us; 67us; 1us; 42us; 1us; 42us; 10us; 42us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 66us; 67us; 1us; 42us; 10us; 42us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 66us; 67us; 1us; 43us; 1us; 43us; 10us; 43us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 66us; 67us; 1us; 44us; 1us; 45us; 10us; 46us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 66us; 67us; 11us; 46us; 47us; 47us; 48us; 49us; 50us; 51us; 53us; 54us; 66us; 67us; 10us; 46us; 47us; 48us; 48us; 49us; 50us; 53us; 54us; 66us; 67us; 10us; 46us; 47us; 48us; 49us; 49us; 50us; 53us; 54us; 66us; 67us; 10us; 46us; 47us; 48us; 49us; 50us; 50us; 53us; 54us; 66us; 67us; 10us; 46us; 47us; 48us; 49us; 50us; 51us; 53us; 54us; 66us; 67us; 10us; 46us; 47us; 48us; 49us; 50us; 52us; 53us; 54us; 66us; 67us; 10us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 60us; 66us; 67us; 10us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 61us; 66us; 67us; 10us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 62us; 66us; 67us; 10us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 64us; 66us; 67us; 2us; 46us; 55us; 3us; 47us; 51us; 56us; 2us; 48us; 57us; 2us; 49us; 58us; 2us; 50us; 59us; 2us; 51us; 56us; 1us; 52us; 2us; 52us; 53us; 1us; 54us; 1us; 55us; 1us; 57us; 1us; 58us; 1us; 59us; 1us; 61us; 1us; 63us; 1us; 65us; 2us; 66us; 72us; 1us; 67us; 1us; 70us; 1us; 71us; 1us; 72us; 1us; 73us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 15us; 17us; 19us; 22us; 24us; 26us; 41us; 44us; 47us; 52us; 55us; 57us; 59us; 64us; 67us; 70us; 75us; 79us; 81us; 83us; 88us; 91us; 93us; 95us; 100us; 103us; 105us; 107us; 109us; 120us; 123us; 125us; 136us; 139us; 142us; 154us; 157us; 160us; 163us; 175us; 179us; 181us; 184us; 189us; 193us; 196us; 199us; 202us; 205us; 208us; 211us; 214us; 217us; 220us; 223us; 225us; 229us; 231us; 235us; 248us; 259us; 262us; 265us; 268us; 280us; 283us; 295us; 297us; 299us; 301us; 303us; 305us; 307us; 309us; 311us; 322us; 324us; 335us; 337us; 339us; 341us; 343us; 345us; 347us; 349us; 351us; 353us; 355us; 358us; 370us; 373us; 375us; 377us; 379us; 381us; 383us; 385us; 387us; 389us; 391us; 393us; 395us; 397us; 400us; 402us; 413us; 415us; 417us; 428us; 430us; 441us; 444us; 446us; 457us; 459us; 461us; 472us; 474us; 485us; 487us; 489us; 500us; 502us; 504us; 515us; 527us; 538us; 549us; 560us; 571us; 582us; 593us; 604us; 615us; 626us; 629us; 633us; 636us; 639us; 642us; 645us; 647us; 650us; 652us; 654us; 656us; 658us; 660us; 662us; 664us; 666us; 669us; 671us; 673us; 675us; 677us; |]
let _fsyacc_action_rows = 159
let _fsyacc_actionTableElements = [|17us; 32768us; 1us; 6us; 2us; 7us; 12us; 149us; 16us; 146us; 17us; 142us; 18us; 147us; 19us; 148us; 20us; 90us; 22us; 36us; 23us; 157us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 0us; 49152us; 19us; 32768us; 0us; 3us; 1us; 6us; 2us; 7us; 12us; 141us; 16us; 137us; 17us; 138us; 18us; 139us; 19us; 140us; 20us; 90us; 21us; 154us; 22us; 36us; 23us; 153us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 0us; 16385us; 0us; 16386us; 1us; 16387us; 24us; 28us; 0us; 16388us; 0us; 16389us; 10us; 32768us; 3us; 29us; 5us; 9us; 6us; 24us; 7us; 63us; 9us; 89us; 11us; 72us; 13us; 81us; 14us; 105us; 15us; 113us; 36us; 152us; 2us; 32768us; 22us; 155us; 36us; 156us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 149us; 16us; 146us; 17us; 142us; 18us; 147us; 19us; 148us; 20us; 90us; 22us; 36us; 23us; 157us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 149us; 16us; 146us; 17us; 142us; 18us; 147us; 19us; 148us; 20us; 90us; 22us; 36us; 23us; 12us; 28us; 8us; 29us; 150us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 18us; 1us; 16390us; 25us; 16456us; 2us; 32768us; 22us; 155us; 36us; 156us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 149us; 16us; 146us; 17us; 142us; 18us; 147us; 19us; 148us; 20us; 90us; 22us; 36us; 23us; 157us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 149us; 16us; 146us; 17us; 142us; 18us; 147us; 19us; 148us; 20us; 90us; 22us; 36us; 23us; 157us; 28us; 8us; 29us; 150us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 18us; 1us; 16391us; 25us; 57us; 1us; 16392us; 25us; 57us; 20us; 16457us; 1us; 6us; 2us; 7us; 5us; 20us; 12us; 149us; 14us; 124us; 15us; 125us; 16us; 146us; 17us; 142us; 18us; 147us; 19us; 148us; 20us; 90us; 22us; 36us; 23us; 157us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 3us; 16457us; 5us; 20us; 14us; 124us; 15us; 125us; 2us; 32768us; 22us; 155us; 36us; 156us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 149us; 16us; 146us; 17us; 142us; 18us; 147us; 19us; 148us; 20us; 90us; 22us; 36us; 23us; 157us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 149us; 16us; 146us; 17us; 142us; 18us; 147us; 19us; 148us; 20us; 90us; 22us; 36us; 23us; 157us; 28us; 8us; 29us; 150us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 18us; 1us; 16393us; 25us; 57us; 2us; 32768us; 22us; 155us; 36us; 156us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 149us; 16us; 146us; 17us; 142us; 18us; 147us; 19us; 148us; 20us; 90us; 22us; 36us; 23us; 157us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 149us; 16us; 146us; 17us; 142us; 18us; 147us; 19us; 148us; 20us; 90us; 22us; 36us; 23us; 157us; 28us; 8us; 29us; 150us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 18us; 1us; 16395us; 25us; 57us; 0us; 16396us; 2us; 32768us; 22us; 155us; 36us; 156us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 149us; 16us; 146us; 17us; 142us; 18us; 147us; 19us; 148us; 20us; 90us; 22us; 36us; 23us; 157us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 141us; 16us; 137us; 17us; 138us; 18us; 139us; 19us; 140us; 20us; 90us; 21us; 154us; 22us; 36us; 23us; 153us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 3us; 32768us; 22us; 155us; 25us; 57us; 36us; 156us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 149us; 16us; 146us; 17us; 142us; 18us; 147us; 19us; 148us; 20us; 90us; 22us; 36us; 23us; 157us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 141us; 16us; 137us; 17us; 138us; 18us; 139us; 19us; 140us; 20us; 90us; 21us; 154us; 22us; 36us; 23us; 153us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 1us; 16397us; 25us; 57us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 149us; 16us; 146us; 17us; 142us; 18us; 147us; 19us; 148us; 20us; 90us; 22us; 36us; 23us; 157us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 10us; 16453us; 1us; 6us; 2us; 7us; 20us; 90us; 22us; 36us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 36us; 19us; 1us; 32768us; 25us; 39us; 2us; 32768us; 22us; 155us; 36us; 156us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 149us; 16us; 146us; 17us; 142us; 18us; 147us; 19us; 148us; 20us; 90us; 22us; 36us; 23us; 157us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 141us; 16us; 137us; 17us; 138us; 18us; 139us; 19us; 140us; 20us; 90us; 21us; 154us; 22us; 36us; 23us; 153us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 1us; 16398us; 25us; 57us; 1us; 32768us; 25us; 57us; 1us; 16399us; 25us; 57us; 3us; 16399us; 22us; 155us; 25us; 57us; 36us; 156us; 1us; 32768us; 25us; 58us; 2us; 32768us; 25us; 57us; 33us; 69us; 3us; 32768us; 22us; 155us; 25us; 57us; 36us; 156us; 1us; 16402us; 25us; 57us; 1us; 16423us; 25us; 57us; 3us; 32768us; 22us; 155us; 25us; 57us; 36us; 156us; 1us; 16424us; 25us; 57us; 1us; 16425us; 25us; 57us; 3us; 32768us; 22us; 155us; 25us; 57us; 36us; 156us; 1us; 16426us; 25us; 57us; 1us; 16427us; 25us; 57us; 2us; 32768us; 22us; 155us; 36us; 156us; 2us; 32768us; 22us; 155us; 36us; 156us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 149us; 16us; 146us; 17us; 142us; 18us; 147us; 19us; 148us; 20us; 90us; 22us; 36us; 23us; 157us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 149us; 16us; 146us; 17us; 142us; 18us; 147us; 19us; 148us; 20us; 90us; 22us; 36us; 23us; 157us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 141us; 16us; 137us; 17us; 138us; 18us; 139us; 19us; 140us; 20us; 90us; 21us; 154us; 22us; 36us; 23us; 153us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 141us; 16us; 137us; 17us; 138us; 18us; 139us; 19us; 140us; 20us; 90us; 21us; 154us; 22us; 36us; 23us; 153us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 1us; 32768us; 27us; 64us; 2us; 32768us; 22us; 155us; 36us; 156us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 149us; 16us; 146us; 17us; 142us; 18us; 147us; 19us; 148us; 20us; 90us; 22us; 36us; 23us; 157us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 141us; 16us; 137us; 17us; 138us; 18us; 139us; 19us; 140us; 20us; 90us; 21us; 154us; 22us; 36us; 23us; 153us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 149us; 16us; 146us; 17us; 142us; 18us; 147us; 19us; 148us; 20us; 90us; 22us; 36us; 23us; 157us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 19us; 32768us; 1us; 6us; 2us; 7us; 12us; 141us; 16us; 137us; 17us; 138us; 18us; 139us; 19us; 140us; 20us; 90us; 21us; 154us; 22us; 36us; 23us; 153us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 33us; 70us; 34us; 88us; 35us; 87us; 36us; 19us; 0us; 16400us; 2us; 32768us; 23us; 157us; 36us; 158us; 0us; 16401us; 1us; 32768us; 27us; 73us; 2us; 32768us; 22us; 155us; 36us; 156us; 1us; 32768us; 32us; 75us; 1us; 32768us; 10us; 76us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 149us; 16us; 146us; 17us; 142us; 18us; 147us; 19us; 148us; 20us; 90us; 22us; 36us; 23us; 157us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 141us; 16us; 137us; 17us; 138us; 18us; 139us; 19us; 140us; 20us; 90us; 21us; 154us; 22us; 36us; 23us; 153us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 149us; 16us; 146us; 17us; 142us; 18us; 147us; 19us; 148us; 20us; 90us; 22us; 36us; 23us; 157us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 141us; 16us; 137us; 17us; 138us; 18us; 139us; 19us; 140us; 20us; 90us; 21us; 154us; 22us; 36us; 23us; 153us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 0us; 16403us; 2us; 32768us; 22us; 155us; 36us; 156us; 2us; 32768us; 30us; 86us; 31us; 85us; 2us; 32768us; 23us; 157us; 36us; 158us; 0us; 16404us; 0us; 16405us; 0us; 16406us; 0us; 16407us; 0us; 16408us; 0us; 16409us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 149us; 16us; 146us; 17us; 142us; 18us; 147us; 19us; 148us; 20us; 90us; 22us; 36us; 23us; 157us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 10us; 16452us; 1us; 6us; 2us; 7us; 20us; 90us; 22us; 36us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 36us; 19us; 0us; 16410us; 0us; 16411us; 0us; 16412us; 0us; 16413us; 0us; 16414us; 0us; 16415us; 0us; 16416us; 0us; 16417us; 0us; 16418us; 0us; 16419us; 0us; 16420us; 0us; 16421us; 0us; 16422us; 3us; 32768us; 22us; 155us; 25us; 108us; 36us; 156us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 149us; 16us; 146us; 17us; 142us; 18us; 147us; 19us; 148us; 20us; 90us; 22us; 36us; 23us; 157us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 141us; 16us; 137us; 17us; 138us; 18us; 139us; 19us; 140us; 20us; 90us; 21us; 154us; 22us; 36us; 23us; 153us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 2us; 32768us; 22us; 155us; 36us; 156us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 149us; 16us; 146us; 17us; 142us; 18us; 147us; 19us; 148us; 20us; 90us; 22us; 36us; 23us; 157us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 141us; 16us; 137us; 17us; 138us; 18us; 139us; 19us; 140us; 20us; 90us; 21us; 154us; 22us; 36us; 23us; 153us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 149us; 16us; 146us; 17us; 142us; 18us; 147us; 19us; 148us; 20us; 90us; 22us; 36us; 23us; 157us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 141us; 16us; 137us; 17us; 138us; 18us; 139us; 19us; 140us; 20us; 90us; 21us; 154us; 22us; 36us; 23us; 153us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 3us; 32768us; 22us; 155us; 25us; 116us; 36us; 156us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 149us; 16us; 146us; 17us; 142us; 18us; 147us; 19us; 148us; 20us; 90us; 22us; 36us; 23us; 157us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 141us; 16us; 137us; 17us; 138us; 18us; 139us; 19us; 140us; 20us; 90us; 21us; 154us; 22us; 36us; 23us; 153us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 2us; 32768us; 22us; 155us; 36us; 156us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 149us; 16us; 146us; 17us; 142us; 18us; 147us; 19us; 148us; 20us; 90us; 22us; 36us; 23us; 157us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 141us; 16us; 137us; 17us; 138us; 18us; 139us; 19us; 140us; 20us; 90us; 21us; 154us; 22us; 36us; 23us; 153us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 149us; 16us; 146us; 17us; 142us; 18us; 147us; 19us; 148us; 20us; 90us; 22us; 36us; 23us; 157us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 141us; 16us; 137us; 17us; 138us; 18us; 139us; 19us; 140us; 20us; 90us; 21us; 154us; 22us; 36us; 23us; 153us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 2us; 32768us; 22us; 155us; 36us; 156us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 149us; 16us; 146us; 17us; 142us; 18us; 147us; 19us; 148us; 20us; 90us; 22us; 36us; 23us; 157us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 141us; 16us; 137us; 17us; 138us; 18us; 139us; 19us; 140us; 20us; 90us; 21us; 154us; 22us; 36us; 23us; 153us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 0us; 16428us; 0us; 16429us; 13us; 16430us; 1us; 6us; 2us; 7us; 12us; 141us; 18us; 139us; 19us; 140us; 20us; 90us; 22us; 36us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 36us; 19us; 13us; 16431us; 1us; 6us; 2us; 7us; 12us; 16435us; 18us; 16435us; 19us; 16435us; 20us; 90us; 22us; 36us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 36us; 19us; 10us; 16432us; 1us; 6us; 2us; 7us; 20us; 90us; 22us; 36us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 36us; 19us; 10us; 16433us; 1us; 6us; 2us; 7us; 20us; 90us; 22us; 36us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 36us; 19us; 10us; 16434us; 1us; 6us; 2us; 7us; 20us; 90us; 22us; 36us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 36us; 19us; 10us; 16435us; 1us; 6us; 2us; 7us; 20us; 90us; 22us; 36us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 36us; 19us; 18us; 16436us; 1us; 6us; 2us; 7us; 12us; 141us; 16us; 137us; 17us; 138us; 18us; 139us; 19us; 140us; 20us; 90us; 21us; 154us; 22us; 36us; 23us; 153us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 11us; 16444us; 1us; 6us; 2us; 7us; 20us; 90us; 21us; 154us; 22us; 36us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 36us; 19us; 16us; 16445us; 1us; 6us; 2us; 7us; 12us; 141us; 16us; 137us; 17us; 138us; 18us; 139us; 19us; 140us; 20us; 90us; 21us; 154us; 22us; 36us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 36us; 19us; 11us; 16446us; 1us; 6us; 2us; 7us; 20us; 90us; 21us; 154us; 22us; 36us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 36us; 19us; 10us; 16448us; 1us; 6us; 2us; 7us; 20us; 90us; 22us; 36us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 36us; 19us; 13us; 16439us; 1us; 6us; 2us; 7us; 12us; 149us; 18us; 147us; 19us; 148us; 20us; 90us; 22us; 36us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 36us; 19us; 13us; 16440us; 1us; 6us; 2us; 7us; 12us; 149us; 18us; 147us; 19us; 148us; 20us; 90us; 22us; 36us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 36us; 19us; 10us; 16441us; 1us; 6us; 2us; 7us; 20us; 90us; 22us; 36us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 36us; 19us; 10us; 16442us; 1us; 6us; 2us; 7us; 20us; 90us; 22us; 36us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 36us; 19us; 10us; 16443us; 1us; 6us; 2us; 7us; 20us; 90us; 22us; 36us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 36us; 19us; 13us; 16440us; 1us; 6us; 2us; 7us; 12us; 149us; 18us; 147us; 19us; 148us; 20us; 90us; 22us; 36us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 36us; 19us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 149us; 16us; 146us; 17us; 142us; 18us; 147us; 19us; 148us; 20us; 90us; 22us; 36us; 23us; 157us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 17us; 16437us; 1us; 6us; 2us; 7us; 12us; 149us; 16us; 146us; 17us; 142us; 18us; 147us; 19us; 148us; 20us; 90us; 22us; 36us; 23us; 157us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 0us; 16438us; 0us; 16439us; 0us; 16441us; 0us; 16442us; 0us; 16443us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 149us; 16us; 146us; 17us; 142us; 18us; 147us; 19us; 148us; 20us; 90us; 22us; 36us; 23us; 157us; 28us; 8us; 30us; 86us; 31us; 85us; 32us; 103us; 34us; 88us; 35us; 87us; 36us; 19us; 0us; 16447us; 0us; 16449us; 1us; 16450us; 25us; 16456us; 0us; 16451us; 0us; 16454us; 0us; 16455us; 0us; 16456us; 0us; 16457us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 18us; 19us; 39us; 40us; 41us; 43us; 44us; 45us; 56us; 59us; 77us; 96us; 98us; 101us; 119us; 138us; 140us; 142us; 163us; 167us; 170us; 188us; 207us; 209us; 212us; 230us; 249us; 251us; 252us; 255us; 273us; 292us; 296us; 314us; 333us; 335us; 353us; 364us; 366us; 369us; 387us; 406us; 408us; 410us; 412us; 416us; 418us; 421us; 425us; 427us; 429us; 433us; 435us; 437us; 441us; 443us; 445us; 448us; 451us; 469us; 487us; 506us; 525us; 527us; 530us; 548us; 567us; 585us; 605us; 606us; 609us; 610us; 612us; 615us; 617us; 619us; 637us; 656us; 674us; 693us; 694us; 697us; 700us; 703us; 704us; 705us; 706us; 707us; 708us; 709us; 727us; 738us; 739us; 740us; 741us; 742us; 743us; 744us; 745us; 746us; 747us; 748us; 749us; 750us; 751us; 755us; 773us; 792us; 795us; 813us; 832us; 850us; 869us; 873us; 891us; 910us; 913us; 931us; 950us; 968us; 987us; 990us; 1008us; 1027us; 1028us; 1029us; 1043us; 1057us; 1068us; 1079us; 1090us; 1101us; 1120us; 1132us; 1149us; 1161us; 1172us; 1186us; 1200us; 1211us; 1222us; 1233us; 1247us; 1265us; 1283us; 1284us; 1285us; 1286us; 1287us; 1288us; 1306us; 1307us; 1308us; 1310us; 1311us; 1312us; 1313us; 1314us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 1us; 1us; 1us; 5us; 5us; 4us; 5us; 1us; 5us; 2us; 8us; 7us; 5us; 14us; 14us; 11us; 1us; 5us; 1us; 1us; 1us; 1us; 2us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 5us; 9us; 5us; 9us; 5us; 1us; 1us; 3us; 3us; 3us; 3us; 3us; 2us; 2us; 2us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 3us; 2us; 1us; 1us; 2us; 2us; 2us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 4us; 4us; 4us; 4us; 5us; 6us; 7us; 8us; 9us; 9us; 10us; 10us; 11us; 12us; 12us; 13us; 13us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 15us; 15us; 15us; 15us; 15us; 16us; 16us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 18us; 18us; 18us; 18us; 18us; 19us; 19us; 19us; 19us; 20us; 21us; 22us; 22us; 22us; 22us; 23us; 23us; 24us; 24us; 25us; 25us; 26us; 26us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 65535us; 16388us; 16389us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16396us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16400us; 65535us; 16401us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16403us; 65535us; 65535us; 65535us; 16404us; 16405us; 16406us; 16407us; 16408us; 16409us; 65535us; 65535us; 65535us; 16411us; 16412us; 16413us; 16414us; 16415us; 16416us; 16417us; 16418us; 16419us; 16420us; 16421us; 16422us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16428us; 16429us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16438us; 16439us; 16441us; 16442us; 16443us; 65535us; 16447us; 16449us; 65535us; 16451us; 16454us; 16455us; 16456us; 16457us; |]
let _fsyacc_reductions ()  =    [| 
# 413 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : TexAst.Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 422 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "TexParser.fsy"
                                         _1 
                   )
# 70 "TexParser.fsy"
                 : TexAst.Expr));
# 433 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'binaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "TexParser.fsy"
                                                   _1 
                   )
# 77 "TexParser.fsy"
                 : 'expression));
# 444 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'highPriorityFunction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "TexParser.fsy"
                                                                   _1 
                   )
# 78 "TexParser.fsy"
                 : 'expression));
# 455 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "TexParser.fsy"
                                   Constant(Pi) 
                   )
# 86 "TexParser.fsy"
                 : 'constant));
# 465 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "TexParser.fsy"
                                   Constant(E) 
                   )
# 87 "TexParser.fsy"
                 : 'constant));
# 475 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "TexParser.fsy"
                                                                      Sum(List.rev _4) 
                   )
# 90 "TexParser.fsy"
                 : 'sum));
# 487 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "TexParser.fsy"
                                                                                     
                                                                                        let wrongLexeme, sPos, ePos = _2
                                                                                        let errorMsg = sprintf "Unexpected symbol: %s. Required SUM op" wrongLexeme
                                                                                        let error = Error(errorMsg, {Line = sPos; Column = ePos})
                                                                                        errorLogger.ReportError(error)
                                                                                        Sum(List.rev _4) 
                                                                                      
                   )
# 91 "TexParser.fsy"
                 : 'sum));
# 507 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "TexParser.fsy"
                                                     
                                                        report parseState "SUM should have parameters"
                                                        Sum([Int(1)])
                                                    
                   )
# 98 "TexParser.fsy"
                 : 'sum));
# 522 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "TexParser.fsy"
                                                                                 
                                                                                     report parseState "SUM operation should starts with SLASH"
                                                                                     Sum(List.rev _4)
                                                                                  
                   )
# 102 "TexParser.fsy"
                 : 'sum));
# 538 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "TexParser.fsy"
                                      report parseState "unexpected NAME"
                   )
# 116 "TexParser.fsy"
                 : 'noname));
# 548 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "TexParser.fsy"
                                                                      Prod(List.rev _4) 
                   )
# 119 "TexParser.fsy"
                 : 'prod));
# 561 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'highPriorityFunction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "TexParser.fsy"
                                                      Fact(_1) 
                   )
# 122 "TexParser.fsy"
                 : 'fact));
# 572 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "TexParser.fsy"
                                                                                          Div(_4, _7) 
                   )
# 125 "TexParser.fsy"
                 : 'frac));
# 588 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "TexParser.fsy"
                                                                                      
                                                                                                  let a = 1
                                                                                                  Pow(_2, _6) 
                                                                                               
                   )
# 128 "TexParser.fsy"
                 : 'power));
# 606 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "TexParser.fsy"
                                                                    
                                                                      report parseState "Right curly unmatched"
                                                                      Pow(Int(1), _4) 
                                                                  
                   )
# 132 "TexParser.fsy"
                 : 'power));
# 623 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _11 = (let data = parseState.GetInput(11) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _12 = (let data = parseState.GetInput(12) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _13 = (let data = parseState.GetInput(13) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _14 = (let data = parseState.GetInput(14) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "TexParser.fsy"
                                                                                                                           Integral(_12, _14, _5, _9) 
                   )
# 139 "TexParser.fsy"
                 : 'integral));
# 643 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _11 = (let data = parseState.GetInput(11) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _12 = (let data = parseState.GetInput(12) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _13 = (let data = parseState.GetInput(13) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _14 = (let data = parseState.GetInput(14) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "TexParser.fsy"
                                                                                                                           Integral(_12, _13, _5, _9) 
                   )
# 142 "TexParser.fsy"
                 : 'integral));
# 663 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _11 = (let data = parseState.GetInput(11) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "TexParser.fsy"
                                                                                                         Lim(_10, _5, _7) 
                   )
# 145 "TexParser.fsy"
                 : 'limit));
# 680 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'refValue)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "TexParser.fsy"
                                                                _1 
                   )
# 148 "TexParser.fsy"
                 : 'refPattern));
# 691 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'refValue)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "TexParser.fsy"
                                                             _4 
                   )
# 149 "TexParser.fsy"
                 : 'refPattern));
# 704 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string*int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "TexParser.fsy"
                                          analyzeDomainSpecificSingleSource (fst _1) (snd _1) |> DsAst 
                   )
# 154 "TexParser.fsy"
                 : 'refValue));
# 715 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : (string*int) list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "TexParser.fsy"
                                       analyzeDomainSpecificSources _1 |> DsAst 
                   )
# 155 "TexParser.fsy"
                 : 'refValue));
# 726 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "TexParser.fsy"
                                                        Int(_1) 
                   )
# 158 "TexParser.fsy"
                 : 'highPriorityFunction));
# 737 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "TexParser.fsy"
                                                        Float(_1) 
                   )
# 159 "TexParser.fsy"
                 : 'highPriorityFunction));
# 748 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "TexParser.fsy"
                                                        Float(Double.PositiveInfinity) 
                   )
# 160 "TexParser.fsy"
                 : 'highPriorityFunction));
# 758 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "TexParser.fsy"
                                                        _2 
                   )
# 161 "TexParser.fsy"
                 : 'highPriorityFunction));
# 769 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'trigonometry)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "TexParser.fsy"
                                                     _1 
                   )
# 162 "TexParser.fsy"
                 : 'highPriorityFunction));
# 780 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'sum)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "TexParser.fsy"
                                                     _1 
                   )
# 163 "TexParser.fsy"
                 : 'highPriorityFunction));
# 791 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'prod)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "TexParser.fsy"
                                                     _1 
                   )
# 164 "TexParser.fsy"
                 : 'highPriorityFunction));
# 802 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fact)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "TexParser.fsy"
                                                     _1 
                   )
# 165 "TexParser.fsy"
                 : 'highPriorityFunction));
# 813 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'integral)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "TexParser.fsy"
                                                     _1 
                   )
# 166 "TexParser.fsy"
                 : 'highPriorityFunction));
# 824 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'constant)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "TexParser.fsy"
                                                     _1 
                   )
# 167 "TexParser.fsy"
                 : 'highPriorityFunction));
# 835 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'power)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "TexParser.fsy"
                                                        _1 
                   )
# 168 "TexParser.fsy"
                 : 'highPriorityFunction));
# 846 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'frac)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "TexParser.fsy"
                                                        _1 
                   )
# 169 "TexParser.fsy"
                 : 'highPriorityFunction));
# 857 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'limit)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "TexParser.fsy"
                                                     _1 
                   )
# 170 "TexParser.fsy"
                 : 'highPriorityFunction));
# 868 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'refPattern)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "TexParser.fsy"
                                                     _1 
                   )
# 171 "TexParser.fsy"
                 : 'highPriorityFunction));
# 879 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "TexParser.fsy"
                                                     Var(_1) 
                   )
# 172 "TexParser.fsy"
                 : 'highPriorityFunction));
# 890 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'errRule)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "TexParser.fsy"
                                         _1 
                   )
# 173 "TexParser.fsy"
                 : 'highPriorityFunction));
# 901 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 181 "TexParser.fsy"
                                                                                                Sin(_4, Int(1)) 
                   )
# 181 "TexParser.fsy"
                 : 'trigonometry));
# 914 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 182 "TexParser.fsy"
                                                                                                Sin(_8, _5) 
                   )
# 182 "TexParser.fsy"
                 : 'trigonometry));
# 930 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 183 "TexParser.fsy"
                                                                                                Cos(_4, Int(1)) 
                   )
# 183 "TexParser.fsy"
                 : 'trigonometry));
# 943 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 184 "TexParser.fsy"
                                                                                                Cos(_8, _5) 
                   )
# 184 "TexParser.fsy"
                 : 'trigonometry));
# 959 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'trigName)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 185 "TexParser.fsy"
                                                                                     
                                                                                          report parseState "SIN/COS operation should starts with SLASH"
                                                                                          Sin(_4, Int(1))
                                                                                       
                   )
# 185 "TexParser.fsy"
                 : 'trigonometry));
# 976 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 191 "TexParser.fsy"
                                
                   )
# 191 "TexParser.fsy"
                 : 'trigName));
# 986 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 192 "TexParser.fsy"
                             
                   )
# 192 "TexParser.fsy"
                 : 'trigName));
# 996 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 195 "TexParser.fsy"
                                                          
                                                          let p = 1
                                                          Plus(_1, _3)
                                                        
                   )
# 195 "TexParser.fsy"
                 : 'binaryExpression));
# 1011 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 199 "TexParser.fsy"
                                                          Sub(_1, _3)  
                   )
# 199 "TexParser.fsy"
                 : 'binaryExpression));
# 1023 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 200 "TexParser.fsy"
                                                          Mul(_1, _3)  
                   )
# 200 "TexParser.fsy"
                 : 'binaryExpression));
# 1035 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 201 "TexParser.fsy"
                                                          Div(_1, _3)  
                   )
# 201 "TexParser.fsy"
                 : 'binaryExpression));
# 1047 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 202 "TexParser.fsy"
                                                          Bmod(_1, _3) 
                   )
# 202 "TexParser.fsy"
                 : 'binaryExpression));
# 1059 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 203 "TexParser.fsy"
                                                       Neg(_2) 
                   )
# 203 "TexParser.fsy"
                 : 'binaryExpression));
# 1070 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'binaryOperator)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 215 "TexParser.fsy"
                                                                      
                                                            report parseState "First operand" 
                                                            Plus(_2, _2)
                                                        
                   )
# 215 "TexParser.fsy"
                 : 'binaryExpression));
# 1085 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'binaryOperator)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 219 "TexParser.fsy"
                                                                         
                                                            report parseState "Second operand" 
                                                            Plus(_1, _1)
                                                        
                   )
# 219 "TexParser.fsy"
                 : 'binaryExpression));
# 1100 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 223 "TexParser.fsy"
                                                                       
                                                 let lexeme, sPos, ePos, exVal = _2
                                                 let errorMsg = "MAYBE missing binary operator?"
                                                 let error = Error(errorMsg, {Line = sPos; Column = ePos})
                                                 errorLogger.ReportError(error)
                                                 
                                                 Plus(_1, exVal)
                                              
                   )
# 223 "TexParser.fsy"
                 : 'binaryExpression));
# 1119 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 233 "TexParser.fsy"
                                 
                   )
# 233 "TexParser.fsy"
                 : 'binaryOperator));
# 1129 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 234 "TexParser.fsy"
                                 
                   )
# 234 "TexParser.fsy"
                 : 'binaryOperator));
# 1139 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 235 "TexParser.fsy"
                                 
                   )
# 235 "TexParser.fsy"
                 : 'binaryOperator));
# 1149 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 236 "TexParser.fsy"
                                 
                   )
# 236 "TexParser.fsy"
                 : 'binaryOperator));
# 1159 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 237 "TexParser.fsy"
                                 
                   )
# 237 "TexParser.fsy"
                 : 'binaryOperator));
# 1169 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 240 "TexParser.fsy"
                                                                 
                                                                let a = 1
                                                                //report parseState "argPassed"
                                                                [_1]
                                                               
                   )
# 240 "TexParser.fsy"
                 : 'argumentSet));
# 1184 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 245 "TexParser.fsy"
                                                       
                                                          //report parseState "argPassed"
                                                          _3::_1 
                                                        
                   )
# 245 "TexParser.fsy"
                 : 'argumentSet));
# 1199 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 270 "TexParser.fsy"
                                                                               
                                                            let lexbuf = parseState.ParserLocalStore.["LexBuffer"] :?> LexBuffer<char>
                                                            let errorMsg = sprintf "Unexpected symbol: %s. Comma symbol required" (new String(lexbuf.Lexeme))
                                                            let error = Error(errorMsg, {Line = lexbuf.StartPos.Line; Column = lexbuf.StartPos.Column})
                                                            errorLogger.ReportError(error)
                                                            
                                                            _3::_1
                                                        
                   )
# 270 "TexParser.fsy"
                 : 'argumentSet));
# 1218 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 278 "TexParser.fsy"
                                                                      
                                                            let lexeme, sPos, ePos, exVal = _2
                                                            let errorMsg = "Expected comma symbol"
                                                            let error = Error(errorMsg, {Line = sPos; Column = ePos})
                                                            errorLogger.ReportError(error)
                                                            
                                                            exVal::_1
                                                        
                   )
# 278 "TexParser.fsy"
                 : 'argumentSet));
# 1237 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 288 "TexParser.fsy"
                                                                
                                          let lexbuf = parseState.ParserLocalStore.["LexBuffer"] :?> LexBuffer<char>
                                          let posis = parseState.GetInput(1)
                                          let posix = parseState.InputStartPosition(1)
                                          (new string(lexbuf.Lexeme), posix.Line, posix.Column, _1) 
                                      
                   )
# 288 "TexParser.fsy"
                 : 'expr));
# 1253 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 296 "TexParser.fsy"
                                                   
                                      let lexbuf = parseState.ParserLocalStore.["LexBuffer"] :?> LexBuffer<char>
                                      (new string(lexbuf.Lexeme), lexbuf.StartPos.Line, lexbuf.StartPos.Column) 
                                  
                   )
# 296 "TexParser.fsy"
                 : 'recover));
# 1266 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 305 "TexParser.fsy"
                                              
                                                 report parseState "Unexpected RCURLY"
                                                 _1
                                             
                   )
# 305 "TexParser.fsy"
                 : 'errRule));
# 1280 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 309 "TexParser.fsy"
                                               
                                                 report parseState "Unexpected RPAREN"
                                                 _1
                                              
                   )
# 309 "TexParser.fsy"
                 : 'errRule));
# 1294 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 313 "TexParser.fsy"
                                                                         
                                                  report parseState "LPAREN WITHOUT RPAREN"
                                                  _2
                                              
                   )
# 313 "TexParser.fsy"
                 : 'errRule));
# 1308 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 317 "TexParser.fsy"
                                                                         
                                                  report parseState "LCURLY WITHOUT RCURLY"
                                                  _2
                                              
                   )
# 317 "TexParser.fsy"
                 : 'errRule));
# 1322 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 323 "TexParser.fsy"
                                     LCURLY 
                   )
# 323 "TexParser.fsy"
                 : 'lCurly));
# 1332 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 324 "TexParser.fsy"
                                  
                                       report parseState "Left curly brace" 
                                       LCURLY 
                                   
                   )
# 324 "TexParser.fsy"
                 : 'lCurly));
# 1345 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 330 "TexParser.fsy"
                                    RCURLY 
                   )
# 330 "TexParser.fsy"
                 : 'rCurly));
# 1355 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 331 "TexParser.fsy"
                                                 
                                       report parseState "Right curly brace" 
                                       RCURLY 
                                   
                   )
# 331 "TexParser.fsy"
                 : 'rCurly));
# 1368 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 337 "TexParser.fsy"
                                     LPAREN 
                   )
# 337 "TexParser.fsy"
                 : 'lParen));
# 1378 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 338 "TexParser.fsy"
                                     
                                       report parseState "Left paren" 
                                       LPAREN 
                                   
                   )
# 338 "TexParser.fsy"
                 : 'lParen));
# 1391 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 344 "TexParser.fsy"
                                     RPAREN 
                   )
# 344 "TexParser.fsy"
                 : 'rParen));
# 1401 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 345 "TexParser.fsy"
                                     
                                       report parseState "Right paren" 
                                       RPAREN 
                                   
                   )
# 345 "TexParser.fsy"
                 : 'rParen));
|]
# 1415 "TexParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 39;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : TexAst.Expr =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
