// Implementation file for parser generated by fsyacc
module TexParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "../../../TexFormulaCompiler/TexParser.fsy"

open TexAst
open System
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing
open ErrorHandling

let mutable domainSpecificAnalyzer = Unchecked.defaultof<DomainSpecificContext -> obj>
let mutable errorLogger = Unchecked.defaultof<ErrorLogger>

let analyzeDomainSpecificLanguage token = domainSpecificAnalyzer token

let analyzeDomainSpecificSource token startPos = 
    try
      analyzeDomainSpecificLanguage token
    with
      | DomainSpecificParseException(fString, pos) -> failwithf "%s at pos: %u" fString (startPos)

let analyzeDomainSpecificSingleSource src pos = 
    analyzeDomainSpecificSource (SRefValueSrc(src)) pos |> SRefValue

let analyzeDomainSpecificSources sources = 
    let rec analyzeDomainSpecificSourcesInternal sources state = 
        match sources with
          | [] -> state
          | (src, pos)::t -> analyzeDomainSpecificSourcesInternal t ((analyzeDomainSpecificSource (MRefValueSrc(src)) pos)::state)
        
    analyzeDomainSpecificSourcesInternal sources [] 
    |> List.rev 
    |> MRefValue

let report (parseState : IParseState) sym = 
    let lexbuf = parseState.ParserLocalStore.["LexBuffer"] :?> LexBuffer<char>
    let errorMsg = sprintf "Unexpected symbol: %s. %s symbol required" (new String(lexbuf.Lexeme)) sym
    let error = Error(errorMsg, {Line = lexbuf.StartPos.Line; Column = lexbuf.StartPos.Column})
    errorLogger.ReportError(error)


# 45 "..\..\..\TexFormulaCompiler\TexParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | PI
  | EULERNUM
  | FRAC
  | SQRT
  | SUM
  | PROD
  | INTEGRAL
  | TIMES
  | INFTY
  | TO
  | LIM
  | BMOD
  | TEXT
  | SIN
  | COS
  | PLUS
  | SUB
  | MUL
  | DIV
  | LPAREN
  | RPAREN
  | LCURLY
  | RCURLY
  | EXCL
  | CARET
  | EQ
  | UNDERSCORE
  | SLASH
  | COMMA
  | MREFVAL of ((string*int) list)
  | SREFVAL of (string*int)
  | ID of (string)
  | DIFF of (string)
  | FLOAT of (float)
  | INT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_PI
    | TOKEN_EULERNUM
    | TOKEN_FRAC
    | TOKEN_SQRT
    | TOKEN_SUM
    | TOKEN_PROD
    | TOKEN_INTEGRAL
    | TOKEN_TIMES
    | TOKEN_INFTY
    | TOKEN_TO
    | TOKEN_LIM
    | TOKEN_BMOD
    | TOKEN_TEXT
    | TOKEN_SIN
    | TOKEN_COS
    | TOKEN_PLUS
    | TOKEN_SUB
    | TOKEN_MUL
    | TOKEN_DIV
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LCURLY
    | TOKEN_RCURLY
    | TOKEN_EXCL
    | TOKEN_CARET
    | TOKEN_EQ
    | TOKEN_UNDERSCORE
    | TOKEN_SLASH
    | TOKEN_COMMA
    | TOKEN_MREFVAL
    | TOKEN_SREFVAL
    | TOKEN_ID
    | TOKEN_DIFF
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_expression
    | NONTERM_constant
    | NONTERM_sum
    | NONTERM_prod
    | NONTERM_fact
    | NONTERM_frac
    | NONTERM_power
    | NONTERM_integral
    | NONTERM_limit
    | NONTERM_refPattern
    | NONTERM_refValue
    | NONTERM_highPriorityFunction
    | NONTERM_trigonometry
    | NONTERM_binaryExpression
    | NONTERM_binaryOperator
    | NONTERM_argumentSet
    | NONTERM_missingBinary
    | NONTERM_lCurly
    | NONTERM_rCurly
    | NONTERM_lParen
    | NONTERM_rParen
    | NONTERM_errRule

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | PI  -> 1 
  | EULERNUM  -> 2 
  | FRAC  -> 3 
  | SQRT  -> 4 
  | SUM  -> 5 
  | PROD  -> 6 
  | INTEGRAL  -> 7 
  | TIMES  -> 8 
  | INFTY  -> 9 
  | TO  -> 10 
  | LIM  -> 11 
  | BMOD  -> 12 
  | TEXT  -> 13 
  | SIN  -> 14 
  | COS  -> 15 
  | PLUS  -> 16 
  | SUB  -> 17 
  | MUL  -> 18 
  | DIV  -> 19 
  | LPAREN  -> 20 
  | RPAREN  -> 21 
  | LCURLY  -> 22 
  | RCURLY  -> 23 
  | EXCL  -> 24 
  | CARET  -> 25 
  | EQ  -> 26 
  | UNDERSCORE  -> 27 
  | SLASH  -> 28 
  | COMMA  -> 29 
  | MREFVAL _ -> 30 
  | SREFVAL _ -> 31 
  | ID _ -> 32 
  | DIFF _ -> 33 
  | FLOAT _ -> 34 
  | INT _ -> 35 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_PI 
  | 2 -> TOKEN_EULERNUM 
  | 3 -> TOKEN_FRAC 
  | 4 -> TOKEN_SQRT 
  | 5 -> TOKEN_SUM 
  | 6 -> TOKEN_PROD 
  | 7 -> TOKEN_INTEGRAL 
  | 8 -> TOKEN_TIMES 
  | 9 -> TOKEN_INFTY 
  | 10 -> TOKEN_TO 
  | 11 -> TOKEN_LIM 
  | 12 -> TOKEN_BMOD 
  | 13 -> TOKEN_TEXT 
  | 14 -> TOKEN_SIN 
  | 15 -> TOKEN_COS 
  | 16 -> TOKEN_PLUS 
  | 17 -> TOKEN_SUB 
  | 18 -> TOKEN_MUL 
  | 19 -> TOKEN_DIV 
  | 20 -> TOKEN_LPAREN 
  | 21 -> TOKEN_RPAREN 
  | 22 -> TOKEN_LCURLY 
  | 23 -> TOKEN_RCURLY 
  | 24 -> TOKEN_EXCL 
  | 25 -> TOKEN_CARET 
  | 26 -> TOKEN_EQ 
  | 27 -> TOKEN_UNDERSCORE 
  | 28 -> TOKEN_SLASH 
  | 29 -> TOKEN_COMMA 
  | 30 -> TOKEN_MREFVAL 
  | 31 -> TOKEN_SREFVAL 
  | 32 -> TOKEN_ID 
  | 33 -> TOKEN_DIFF 
  | 34 -> TOKEN_FLOAT 
  | 35 -> TOKEN_INT 
  | 38 -> TOKEN_end_of_input
  | 36 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_expression 
    | 3 -> NONTERM_expression 
    | 4 -> NONTERM_constant 
    | 5 -> NONTERM_constant 
    | 6 -> NONTERM_sum 
    | 7 -> NONTERM_prod 
    | 8 -> NONTERM_fact 
    | 9 -> NONTERM_frac 
    | 10 -> NONTERM_power 
    | 11 -> NONTERM_power 
    | 12 -> NONTERM_integral 
    | 13 -> NONTERM_integral 
    | 14 -> NONTERM_limit 
    | 15 -> NONTERM_refPattern 
    | 16 -> NONTERM_refPattern 
    | 17 -> NONTERM_refValue 
    | 18 -> NONTERM_refValue 
    | 19 -> NONTERM_highPriorityFunction 
    | 20 -> NONTERM_highPriorityFunction 
    | 21 -> NONTERM_highPriorityFunction 
    | 22 -> NONTERM_highPriorityFunction 
    | 23 -> NONTERM_highPriorityFunction 
    | 24 -> NONTERM_highPriorityFunction 
    | 25 -> NONTERM_highPriorityFunction 
    | 26 -> NONTERM_highPriorityFunction 
    | 27 -> NONTERM_highPriorityFunction 
    | 28 -> NONTERM_highPriorityFunction 
    | 29 -> NONTERM_highPriorityFunction 
    | 30 -> NONTERM_highPriorityFunction 
    | 31 -> NONTERM_highPriorityFunction 
    | 32 -> NONTERM_highPriorityFunction 
    | 33 -> NONTERM_highPriorityFunction 
    | 34 -> NONTERM_highPriorityFunction 
    | 35 -> NONTERM_trigonometry 
    | 36 -> NONTERM_trigonometry 
    | 37 -> NONTERM_trigonometry 
    | 38 -> NONTERM_trigonometry 
    | 39 -> NONTERM_binaryExpression 
    | 40 -> NONTERM_binaryExpression 
    | 41 -> NONTERM_binaryExpression 
    | 42 -> NONTERM_binaryExpression 
    | 43 -> NONTERM_binaryExpression 
    | 44 -> NONTERM_binaryOperator 
    | 45 -> NONTERM_binaryOperator 
    | 46 -> NONTERM_binaryOperator 
    | 47 -> NONTERM_binaryOperator 
    | 48 -> NONTERM_binaryOperator 
    | 49 -> NONTERM_argumentSet 
    | 50 -> NONTERM_argumentSet 
    | 51 -> NONTERM_missingBinary 
    | 52 -> NONTERM_lCurly 
    | 53 -> NONTERM_lCurly 
    | 54 -> NONTERM_rCurly 
    | 55 -> NONTERM_rCurly 
    | 56 -> NONTERM_lParen 
    | 57 -> NONTERM_lParen 
    | 58 -> NONTERM_rParen 
    | 59 -> NONTERM_rParen 
    | 60 -> NONTERM_errRule 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 38 
let _fsyacc_tagOfErrorTerminal = 36

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | PI  -> "PI" 
  | EULERNUM  -> "EULERNUM" 
  | FRAC  -> "FRAC" 
  | SQRT  -> "SQRT" 
  | SUM  -> "SUM" 
  | PROD  -> "PROD" 
  | INTEGRAL  -> "INTEGRAL" 
  | TIMES  -> "TIMES" 
  | INFTY  -> "INFTY" 
  | TO  -> "TO" 
  | LIM  -> "LIM" 
  | BMOD  -> "BMOD" 
  | TEXT  -> "TEXT" 
  | SIN  -> "SIN" 
  | COS  -> "COS" 
  | PLUS  -> "PLUS" 
  | SUB  -> "SUB" 
  | MUL  -> "MUL" 
  | DIV  -> "DIV" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | LCURLY  -> "LCURLY" 
  | RCURLY  -> "RCURLY" 
  | EXCL  -> "EXCL" 
  | CARET  -> "CARET" 
  | EQ  -> "EQ" 
  | UNDERSCORE  -> "UNDERSCORE" 
  | SLASH  -> "SLASH" 
  | COMMA  -> "COMMA" 
  | MREFVAL _ -> "MREFVAL" 
  | SREFVAL _ -> "SREFVAL" 
  | ID _ -> "ID" 
  | DIFF _ -> "DIFF" 
  | FLOAT _ -> "FLOAT" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | PI  -> (null : System.Object) 
  | EULERNUM  -> (null : System.Object) 
  | FRAC  -> (null : System.Object) 
  | SQRT  -> (null : System.Object) 
  | SUM  -> (null : System.Object) 
  | PROD  -> (null : System.Object) 
  | INTEGRAL  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | INFTY  -> (null : System.Object) 
  | TO  -> (null : System.Object) 
  | LIM  -> (null : System.Object) 
  | BMOD  -> (null : System.Object) 
  | TEXT  -> (null : System.Object) 
  | SIN  -> (null : System.Object) 
  | COS  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | SUB  -> (null : System.Object) 
  | MUL  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LCURLY  -> (null : System.Object) 
  | RCURLY  -> (null : System.Object) 
  | EXCL  -> (null : System.Object) 
  | CARET  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | UNDERSCORE  -> (null : System.Object) 
  | SLASH  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | MREFVAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SREFVAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DIFF _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 26us; 65535us; 0us; 2us; 10us; 114us; 14us; 114us; 19us; 20us; 22us; 23us; 25us; 26us; 29us; 30us; 34us; 35us; 39us; 40us; 43us; 44us; 46us; 47us; 56us; 57us; 59us; 60us; 72us; 73us; 88us; 89us; 92us; 93us; 95us; 96us; 99us; 100us; 103us; 104us; 106us; 107us; 116us; 109us; 117us; 110us; 118us; 111us; 119us; 112us; 120us; 113us; 121us; 115us; 26us; 65535us; 0us; 80us; 10us; 80us; 14us; 80us; 19us; 80us; 22us; 80us; 25us; 80us; 29us; 80us; 34us; 80us; 39us; 80us; 43us; 80us; 46us; 80us; 56us; 80us; 59us; 80us; 72us; 80us; 88us; 80us; 92us; 80us; 95us; 80us; 99us; 80us; 103us; 80us; 106us; 80us; 116us; 80us; 117us; 80us; 118us; 80us; 119us; 80us; 120us; 80us; 121us; 80us; 26us; 65535us; 0us; 76us; 10us; 76us; 14us; 76us; 19us; 76us; 22us; 76us; 25us; 76us; 29us; 76us; 34us; 76us; 39us; 76us; 43us; 76us; 46us; 76us; 56us; 76us; 59us; 76us; 72us; 76us; 88us; 76us; 92us; 76us; 95us; 76us; 99us; 76us; 103us; 76us; 106us; 76us; 116us; 76us; 117us; 76us; 118us; 76us; 119us; 76us; 120us; 76us; 121us; 76us; 26us; 65535us; 0us; 77us; 10us; 77us; 14us; 77us; 19us; 77us; 22us; 77us; 25us; 77us; 29us; 77us; 34us; 77us; 39us; 77us; 43us; 77us; 46us; 77us; 56us; 77us; 59us; 77us; 72us; 77us; 88us; 77us; 92us; 77us; 95us; 77us; 99us; 77us; 103us; 77us; 106us; 77us; 116us; 77us; 117us; 77us; 118us; 77us; 119us; 77us; 120us; 77us; 121us; 77us; 26us; 65535us; 0us; 78us; 10us; 78us; 14us; 78us; 19us; 78us; 22us; 78us; 25us; 78us; 29us; 78us; 34us; 78us; 39us; 78us; 43us; 78us; 46us; 78us; 56us; 78us; 59us; 78us; 72us; 78us; 88us; 78us; 92us; 78us; 95us; 78us; 99us; 78us; 103us; 78us; 106us; 78us; 116us; 78us; 117us; 78us; 118us; 78us; 119us; 78us; 120us; 78us; 121us; 78us; 26us; 65535us; 0us; 82us; 10us; 82us; 14us; 82us; 19us; 82us; 22us; 82us; 25us; 82us; 29us; 82us; 34us; 82us; 39us; 82us; 43us; 82us; 46us; 82us; 56us; 82us; 59us; 82us; 72us; 82us; 88us; 82us; 92us; 82us; 95us; 82us; 99us; 82us; 103us; 82us; 106us; 82us; 116us; 82us; 117us; 82us; 118us; 82us; 119us; 82us; 120us; 82us; 121us; 82us; 26us; 65535us; 0us; 81us; 10us; 81us; 14us; 81us; 19us; 81us; 22us; 81us; 25us; 81us; 29us; 81us; 34us; 81us; 39us; 81us; 43us; 81us; 46us; 81us; 56us; 81us; 59us; 81us; 72us; 81us; 88us; 81us; 92us; 81us; 95us; 81us; 99us; 81us; 103us; 81us; 106us; 81us; 116us; 81us; 117us; 81us; 118us; 81us; 119us; 81us; 120us; 81us; 121us; 81us; 26us; 65535us; 0us; 79us; 10us; 79us; 14us; 79us; 19us; 79us; 22us; 79us; 25us; 79us; 29us; 79us; 34us; 79us; 39us; 79us; 43us; 79us; 46us; 79us; 56us; 79us; 59us; 79us; 72us; 79us; 88us; 79us; 92us; 79us; 95us; 79us; 99us; 79us; 103us; 79us; 106us; 79us; 116us; 79us; 117us; 79us; 118us; 79us; 119us; 79us; 120us; 79us; 121us; 79us; 26us; 65535us; 0us; 83us; 10us; 83us; 14us; 83us; 19us; 83us; 22us; 83us; 25us; 83us; 29us; 83us; 34us; 83us; 39us; 83us; 43us; 83us; 46us; 83us; 56us; 83us; 59us; 83us; 72us; 83us; 88us; 83us; 92us; 83us; 95us; 83us; 99us; 83us; 103us; 83us; 106us; 83us; 116us; 83us; 117us; 83us; 118us; 83us; 119us; 83us; 120us; 83us; 121us; 83us; 26us; 65535us; 0us; 84us; 10us; 84us; 14us; 84us; 19us; 84us; 22us; 84us; 25us; 84us; 29us; 84us; 34us; 84us; 39us; 84us; 43us; 84us; 46us; 84us; 56us; 84us; 59us; 84us; 72us; 84us; 88us; 84us; 92us; 84us; 95us; 84us; 99us; 84us; 103us; 84us; 106us; 84us; 116us; 84us; 117us; 84us; 118us; 84us; 119us; 84us; 120us; 84us; 121us; 84us; 27us; 65535us; 0us; 62us; 10us; 62us; 14us; 62us; 19us; 62us; 22us; 62us; 25us; 62us; 29us; 62us; 34us; 62us; 39us; 62us; 43us; 62us; 46us; 62us; 56us; 62us; 59us; 62us; 64us; 65us; 72us; 62us; 88us; 62us; 92us; 62us; 95us; 62us; 99us; 62us; 103us; 62us; 106us; 62us; 116us; 62us; 117us; 62us; 118us; 62us; 119us; 62us; 120us; 62us; 121us; 62us; 26us; 65535us; 0us; 5us; 10us; 5us; 14us; 5us; 19us; 5us; 22us; 5us; 25us; 5us; 29us; 5us; 34us; 5us; 39us; 5us; 43us; 5us; 46us; 5us; 56us; 5us; 59us; 5us; 72us; 5us; 88us; 5us; 92us; 5us; 95us; 5us; 99us; 5us; 103us; 5us; 106us; 5us; 116us; 5us; 117us; 5us; 118us; 5us; 119us; 5us; 120us; 5us; 121us; 5us; 26us; 65535us; 0us; 75us; 10us; 75us; 14us; 75us; 19us; 75us; 22us; 75us; 25us; 75us; 29us; 75us; 34us; 75us; 39us; 75us; 43us; 75us; 46us; 75us; 56us; 75us; 59us; 75us; 72us; 75us; 88us; 75us; 92us; 75us; 95us; 75us; 99us; 75us; 103us; 75us; 106us; 75us; 116us; 75us; 117us; 75us; 118us; 75us; 119us; 75us; 120us; 75us; 121us; 75us; 26us; 65535us; 0us; 4us; 10us; 4us; 14us; 4us; 19us; 4us; 22us; 4us; 25us; 4us; 29us; 4us; 34us; 4us; 39us; 4us; 43us; 4us; 46us; 4us; 56us; 4us; 59us; 4us; 72us; 4us; 88us; 4us; 92us; 4us; 95us; 4us; 99us; 4us; 103us; 4us; 106us; 4us; 116us; 4us; 117us; 4us; 118us; 4us; 119us; 4us; 120us; 4us; 121us; 4us; 0us; 65535us; 2us; 65535us; 10us; 11us; 14us; 15us; 0us; 65535us; 18us; 65535us; 9us; 10us; 13us; 14us; 18us; 19us; 21us; 22us; 28us; 29us; 33us; 34us; 38us; 39us; 42us; 43us; 45us; 46us; 53us; 54us; 58us; 59us; 63us; 64us; 87us; 88us; 91us; 92us; 94us; 95us; 98us; 99us; 102us; 103us; 105us; 106us; 45us; 65535us; 0us; 32us; 10us; 32us; 14us; 32us; 15us; 16us; 19us; 32us; 20us; 21us; 22us; 32us; 23us; 24us; 25us; 32us; 26us; 27us; 29us; 32us; 30us; 31us; 34us; 32us; 35us; 36us; 39us; 32us; 40us; 41us; 43us; 32us; 44us; 45us; 46us; 32us; 47us; 48us; 50us; 51us; 56us; 32us; 57us; 58us; 59us; 32us; 60us; 61us; 65us; 66us; 72us; 32us; 88us; 32us; 89us; 90us; 92us; 32us; 93us; 94us; 95us; 32us; 96us; 97us; 99us; 32us; 100us; 101us; 103us; 32us; 104us; 105us; 106us; 32us; 107us; 108us; 116us; 32us; 117us; 32us; 118us; 32us; 119us; 32us; 120us; 32us; 121us; 32us; 0us; 65535us; 1us; 65535us; 73us; 74us; 26us; 65535us; 0us; 86us; 10us; 86us; 14us; 86us; 19us; 86us; 22us; 86us; 25us; 86us; 29us; 86us; 34us; 86us; 39us; 86us; 43us; 86us; 46us; 86us; 56us; 86us; 59us; 86us; 72us; 86us; 88us; 86us; 92us; 86us; 95us; 86us; 99us; 86us; 103us; 86us; 106us; 86us; 116us; 86us; 117us; 86us; 118us; 86us; 119us; 86us; 120us; 86us; 121us; 86us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 30us; 57us; 84us; 111us; 138us; 165us; 192us; 219us; 246us; 273us; 301us; 328us; 355us; 382us; 383us; 386us; 387us; 406us; 452us; 453us; 455us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 7us; 1us; 39us; 40us; 41us; 42us; 43us; 60us; 1us; 1us; 1us; 2us; 2us; 3us; 8us; 1us; 4us; 1us; 5us; 12us; 6us; 7us; 9us; 12us; 13us; 14us; 16us; 21us; 35us; 36us; 37us; 38us; 1us; 6us; 1us; 6us; 2us; 6us; 50us; 1us; 6us; 1us; 7us; 1us; 7us; 2us; 7us; 50us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 9us; 7us; 9us; 39us; 40us; 41us; 42us; 43us; 60us; 1us; 9us; 1us; 9us; 7us; 9us; 39us; 40us; 41us; 42us; 43us; 60us; 1us; 9us; 1us; 10us; 7us; 10us; 39us; 40us; 41us; 42us; 43us; 60us; 1us; 10us; 1us; 10us; 1us; 10us; 7us; 10us; 39us; 40us; 41us; 42us; 43us; 60us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 11us; 7us; 11us; 39us; 40us; 41us; 42us; 43us; 60us; 1us; 11us; 2us; 12us; 13us; 2us; 12us; 13us; 2us; 12us; 13us; 8us; 12us; 13us; 39us; 40us; 41us; 42us; 43us; 60us; 2us; 12us; 13us; 2us; 12us; 13us; 2us; 12us; 13us; 8us; 12us; 13us; 39us; 40us; 41us; 42us; 43us; 60us; 2us; 12us; 13us; 2us; 12us; 13us; 8us; 12us; 13us; 39us; 40us; 41us; 42us; 43us; 60us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 14us; 7us; 14us; 39us; 40us; 41us; 42us; 43us; 60us; 1us; 14us; 1us; 14us; 7us; 14us; 39us; 40us; 41us; 42us; 43us; 60us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 7us; 22us; 39us; 40us; 41us; 42us; 43us; 60us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 33us; 1us; 34us; 2us; 35us; 36us; 1us; 35us; 7us; 35us; 39us; 40us; 41us; 42us; 43us; 60us; 1us; 35us; 1us; 36us; 1us; 36us; 7us; 36us; 39us; 40us; 41us; 42us; 43us; 60us; 1us; 36us; 1us; 36us; 7us; 36us; 39us; 40us; 41us; 42us; 43us; 60us; 1us; 36us; 2us; 37us; 38us; 1us; 37us; 7us; 37us; 39us; 40us; 41us; 42us; 43us; 60us; 1us; 37us; 1us; 38us; 1us; 38us; 7us; 38us; 39us; 40us; 41us; 42us; 43us; 60us; 1us; 38us; 1us; 38us; 7us; 38us; 39us; 40us; 41us; 42us; 43us; 60us; 1us; 38us; 7us; 39us; 39us; 40us; 41us; 42us; 43us; 60us; 7us; 39us; 40us; 40us; 41us; 42us; 43us; 60us; 7us; 39us; 40us; 41us; 41us; 42us; 43us; 60us; 7us; 39us; 40us; 41us; 42us; 42us; 43us; 60us; 7us; 39us; 40us; 41us; 42us; 43us; 43us; 60us; 7us; 39us; 40us; 41us; 42us; 43us; 49us; 60us; 7us; 39us; 40us; 41us; 42us; 43us; 50us; 60us; 1us; 39us; 1us; 40us; 1us; 41us; 1us; 42us; 1us; 43us; 1us; 50us; 1us; 52us; 1us; 53us; 1us; 54us; 2us; 54us; 60us; 1us; 55us; 1us; 58us; 1us; 59us; 1us; 60us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 12us; 14us; 16us; 19us; 21us; 23us; 36us; 38us; 40us; 43us; 45us; 47us; 49us; 52us; 54us; 56us; 58us; 60us; 68us; 70us; 72us; 80us; 82us; 84us; 92us; 94us; 96us; 98us; 106us; 108us; 110us; 112us; 114us; 122us; 124us; 127us; 130us; 133us; 142us; 145us; 148us; 151us; 160us; 163us; 166us; 175us; 177us; 179us; 181us; 183us; 185us; 187us; 189us; 191us; 193us; 201us; 203us; 205us; 213us; 215us; 217us; 219us; 221us; 223us; 225us; 227us; 229us; 231us; 233us; 235us; 237us; 245us; 247us; 249us; 251us; 253us; 255us; 257us; 259us; 261us; 263us; 265us; 267us; 269us; 271us; 274us; 276us; 284us; 286us; 288us; 290us; 298us; 300us; 302us; 310us; 312us; 315us; 317us; 325us; 327us; 329us; 331us; 339us; 341us; 343us; 351us; 353us; 361us; 369us; 377us; 385us; 393us; 401us; 409us; 411us; 413us; 415us; 417us; 419us; 421us; 423us; 425us; 427us; 430us; 432us; 434us; 436us; |]
let _fsyacc_action_rows = 130
let _fsyacc_actionTableElements = [|12us; 32768us; 1us; 6us; 2us; 7us; 20us; 72us; 22us; 25us; 23us; 124us; 28us; 8us; 30us; 68us; 31us; 67us; 32us; 85us; 34us; 70us; 35us; 69us; 36us; 126us; 0us; 49152us; 7us; 32768us; 0us; 3us; 12us; 120us; 16us; 116us; 17us; 117us; 18us; 118us; 19us; 119us; 23us; 129us; 0us; 16385us; 0us; 16386us; 1us; 16387us; 24us; 17us; 0us; 16388us; 0us; 16389us; 9us; 32768us; 3us; 18us; 5us; 9us; 6us; 13us; 7us; 37us; 9us; 71us; 11us; 52us; 13us; 63us; 14us; 87us; 15us; 98us; 2us; 32768us; 22us; 122us; 36us; 123us; 12us; 32768us; 1us; 6us; 2us; 7us; 20us; 72us; 22us; 25us; 23us; 124us; 28us; 8us; 30us; 68us; 31us; 67us; 32us; 85us; 34us; 70us; 35us; 69us; 36us; 126us; 2us; 32768us; 23us; 12us; 29us; 121us; 0us; 16390us; 2us; 32768us; 22us; 122us; 36us; 123us; 12us; 32768us; 1us; 6us; 2us; 7us; 20us; 72us; 22us; 25us; 23us; 124us; 28us; 8us; 30us; 68us; 31us; 67us; 32us; 85us; 34us; 70us; 35us; 69us; 36us; 126us; 3us; 32768us; 23us; 124us; 29us; 121us; 36us; 126us; 0us; 16391us; 0us; 16392us; 2us; 32768us; 22us; 122us; 36us; 123us; 12us; 32768us; 1us; 6us; 2us; 7us; 20us; 72us; 22us; 25us; 23us; 124us; 28us; 8us; 30us; 68us; 31us; 67us; 32us; 85us; 34us; 70us; 35us; 69us; 36us; 126us; 7us; 32768us; 12us; 120us; 16us; 116us; 17us; 117us; 18us; 118us; 19us; 119us; 23us; 125us; 36us; 126us; 2us; 32768us; 22us; 122us; 36us; 123us; 12us; 32768us; 1us; 6us; 2us; 7us; 20us; 72us; 22us; 25us; 23us; 124us; 28us; 8us; 30us; 68us; 31us; 67us; 32us; 85us; 34us; 70us; 35us; 69us; 36us; 126us; 7us; 32768us; 12us; 120us; 16us; 116us; 17us; 117us; 18us; 118us; 19us; 119us; 23us; 125us; 36us; 126us; 0us; 16393us; 12us; 32768us; 1us; 6us; 2us; 7us; 20us; 72us; 22us; 25us; 23us; 124us; 28us; 8us; 30us; 68us; 31us; 67us; 32us; 85us; 34us; 70us; 35us; 69us; 36us; 126us; 7us; 32768us; 12us; 120us; 16us; 116us; 17us; 117us; 18us; 118us; 19us; 119us; 23us; 125us; 36us; 126us; 1us; 32768us; 25us; 28us; 2us; 32768us; 22us; 122us; 36us; 123us; 12us; 32768us; 1us; 6us; 2us; 7us; 20us; 72us; 22us; 25us; 23us; 124us; 28us; 8us; 30us; 68us; 31us; 67us; 32us; 85us; 34us; 70us; 35us; 69us; 36us; 126us; 7us; 32768us; 12us; 120us; 16us; 116us; 17us; 117us; 18us; 118us; 19us; 119us; 23us; 125us; 36us; 126us; 0us; 16394us; 1us; 32768us; 25us; 33us; 2us; 32768us; 22us; 122us; 36us; 123us; 12us; 32768us; 1us; 6us; 2us; 7us; 20us; 72us; 22us; 25us; 23us; 124us; 28us; 8us; 30us; 68us; 31us; 67us; 32us; 85us; 34us; 70us; 35us; 69us; 36us; 126us; 7us; 32768us; 12us; 120us; 16us; 116us; 17us; 117us; 18us; 118us; 19us; 119us; 23us; 125us; 36us; 126us; 0us; 16395us; 1us; 32768us; 27us; 38us; 2us; 32768us; 22us; 122us; 36us; 123us; 12us; 32768us; 1us; 6us; 2us; 7us; 20us; 72us; 22us; 25us; 23us; 124us; 28us; 8us; 30us; 68us; 31us; 67us; 32us; 85us; 34us; 70us; 35us; 69us; 36us; 126us; 7us; 32768us; 12us; 120us; 16us; 116us; 17us; 117us; 18us; 118us; 19us; 119us; 23us; 125us; 36us; 126us; 1us; 32768us; 25us; 42us; 2us; 32768us; 22us; 122us; 36us; 123us; 12us; 32768us; 1us; 6us; 2us; 7us; 20us; 72us; 22us; 25us; 23us; 124us; 28us; 8us; 30us; 68us; 31us; 67us; 32us; 85us; 34us; 70us; 35us; 69us; 36us; 126us; 7us; 32768us; 12us; 120us; 16us; 116us; 17us; 117us; 18us; 118us; 19us; 119us; 23us; 125us; 36us; 126us; 2us; 32768us; 22us; 122us; 36us; 123us; 12us; 32768us; 1us; 6us; 2us; 7us; 20us; 72us; 22us; 25us; 23us; 124us; 28us; 8us; 30us; 68us; 31us; 67us; 32us; 85us; 34us; 70us; 35us; 69us; 36us; 126us; 8us; 32768us; 12us; 120us; 16us; 116us; 17us; 117us; 18us; 118us; 19us; 119us; 23us; 125us; 33us; 50us; 36us; 126us; 1us; 32768us; 33us; 49us; 0us; 16396us; 2us; 32768us; 23us; 124us; 36us; 126us; 0us; 16397us; 1us; 32768us; 27us; 53us; 2us; 32768us; 22us; 122us; 36us; 123us; 1us; 32768us; 32us; 55us; 1us; 32768us; 10us; 56us; 12us; 32768us; 1us; 6us; 2us; 7us; 20us; 72us; 22us; 25us; 23us; 124us; 28us; 8us; 30us; 68us; 31us; 67us; 32us; 85us; 34us; 70us; 35us; 69us; 36us; 126us; 7us; 32768us; 12us; 120us; 16us; 116us; 17us; 117us; 18us; 118us; 19us; 119us; 23us; 125us; 36us; 126us; 2us; 32768us; 22us; 122us; 36us; 123us; 12us; 32768us; 1us; 6us; 2us; 7us; 20us; 72us; 22us; 25us; 23us; 124us; 28us; 8us; 30us; 68us; 31us; 67us; 32us; 85us; 34us; 70us; 35us; 69us; 36us; 126us; 7us; 32768us; 12us; 120us; 16us; 116us; 17us; 117us; 18us; 118us; 19us; 119us; 23us; 125us; 36us; 126us; 0us; 16398us; 0us; 16399us; 2us; 32768us; 22us; 122us; 36us; 123us; 2us; 32768us; 30us; 68us; 31us; 67us; 2us; 32768us; 23us; 124us; 36us; 126us; 0us; 16400us; 0us; 16401us; 0us; 16402us; 0us; 16403us; 0us; 16404us; 0us; 16405us; 12us; 32768us; 1us; 6us; 2us; 7us; 20us; 72us; 22us; 25us; 23us; 124us; 28us; 8us; 30us; 68us; 31us; 67us; 32us; 85us; 34us; 70us; 35us; 69us; 36us; 126us; 8us; 32768us; 12us; 120us; 16us; 116us; 17us; 117us; 18us; 118us; 19us; 119us; 21us; 127us; 23us; 129us; 36us; 128us; 0us; 16406us; 0us; 16407us; 0us; 16408us; 0us; 16409us; 0us; 16410us; 0us; 16411us; 0us; 16412us; 0us; 16413us; 0us; 16414us; 0us; 16415us; 0us; 16416us; 0us; 16417us; 0us; 16418us; 3us; 32768us; 22us; 122us; 25us; 91us; 36us; 123us; 12us; 32768us; 1us; 6us; 2us; 7us; 20us; 72us; 22us; 25us; 23us; 124us; 28us; 8us; 30us; 68us; 31us; 67us; 32us; 85us; 34us; 70us; 35us; 69us; 36us; 126us; 7us; 32768us; 12us; 120us; 16us; 116us; 17us; 117us; 18us; 118us; 19us; 119us; 23us; 125us; 36us; 126us; 0us; 16419us; 2us; 32768us; 22us; 122us; 36us; 123us; 12us; 32768us; 1us; 6us; 2us; 7us; 20us; 72us; 22us; 25us; 23us; 124us; 28us; 8us; 30us; 68us; 31us; 67us; 32us; 85us; 34us; 70us; 35us; 69us; 36us; 126us; 7us; 32768us; 12us; 120us; 16us; 116us; 17us; 117us; 18us; 118us; 19us; 119us; 23us; 125us; 36us; 126us; 2us; 32768us; 22us; 122us; 36us; 123us; 12us; 32768us; 1us; 6us; 2us; 7us; 20us; 72us; 22us; 25us; 23us; 124us; 28us; 8us; 30us; 68us; 31us; 67us; 32us; 85us; 34us; 70us; 35us; 69us; 36us; 126us; 7us; 32768us; 12us; 120us; 16us; 116us; 17us; 117us; 18us; 118us; 19us; 119us; 23us; 125us; 36us; 126us; 0us; 16420us; 3us; 32768us; 22us; 122us; 25us; 102us; 36us; 123us; 12us; 32768us; 1us; 6us; 2us; 7us; 20us; 72us; 22us; 25us; 23us; 124us; 28us; 8us; 30us; 68us; 31us; 67us; 32us; 85us; 34us; 70us; 35us; 69us; 36us; 126us; 7us; 32768us; 12us; 120us; 16us; 116us; 17us; 117us; 18us; 118us; 19us; 119us; 23us; 125us; 36us; 126us; 0us; 16421us; 2us; 32768us; 22us; 122us; 36us; 123us; 12us; 32768us; 1us; 6us; 2us; 7us; 20us; 72us; 22us; 25us; 23us; 124us; 28us; 8us; 30us; 68us; 31us; 67us; 32us; 85us; 34us; 70us; 35us; 69us; 36us; 126us; 7us; 32768us; 12us; 120us; 16us; 116us; 17us; 117us; 18us; 118us; 19us; 119us; 23us; 125us; 36us; 126us; 2us; 32768us; 22us; 122us; 36us; 123us; 12us; 32768us; 1us; 6us; 2us; 7us; 20us; 72us; 22us; 25us; 23us; 124us; 28us; 8us; 30us; 68us; 31us; 67us; 32us; 85us; 34us; 70us; 35us; 69us; 36us; 126us; 7us; 32768us; 12us; 120us; 16us; 116us; 17us; 117us; 18us; 118us; 19us; 119us; 23us; 125us; 36us; 126us; 0us; 16422us; 3us; 16423us; 12us; 120us; 18us; 118us; 19us; 119us; 3us; 16424us; 12us; 120us; 18us; 118us; 19us; 119us; 0us; 16425us; 0us; 16426us; 0us; 16427us; 5us; 16433us; 12us; 120us; 16us; 116us; 17us; 117us; 18us; 118us; 19us; 119us; 5us; 16434us; 12us; 120us; 16us; 116us; 17us; 117us; 18us; 118us; 19us; 119us; 12us; 32768us; 1us; 6us; 2us; 7us; 20us; 72us; 22us; 25us; 23us; 124us; 28us; 8us; 30us; 68us; 31us; 67us; 32us; 85us; 34us; 70us; 35us; 69us; 36us; 126us; 12us; 32768us; 1us; 6us; 2us; 7us; 20us; 72us; 22us; 25us; 23us; 124us; 28us; 8us; 30us; 68us; 31us; 67us; 32us; 85us; 34us; 70us; 35us; 69us; 36us; 126us; 12us; 32768us; 1us; 6us; 2us; 7us; 20us; 72us; 22us; 25us; 23us; 124us; 28us; 8us; 30us; 68us; 31us; 67us; 32us; 85us; 34us; 70us; 35us; 69us; 36us; 126us; 12us; 32768us; 1us; 6us; 2us; 7us; 20us; 72us; 22us; 25us; 23us; 124us; 28us; 8us; 30us; 68us; 31us; 67us; 32us; 85us; 34us; 70us; 35us; 69us; 36us; 126us; 12us; 32768us; 1us; 6us; 2us; 7us; 20us; 72us; 22us; 25us; 23us; 124us; 28us; 8us; 30us; 68us; 31us; 67us; 32us; 85us; 34us; 70us; 35us; 69us; 36us; 126us; 12us; 32768us; 1us; 6us; 2us; 7us; 20us; 72us; 22us; 25us; 23us; 124us; 28us; 8us; 30us; 68us; 31us; 67us; 32us; 85us; 34us; 70us; 35us; 69us; 36us; 126us; 0us; 16436us; 0us; 16437us; 0us; 16438us; 0us; 16438us; 0us; 16439us; 0us; 16442us; 0us; 16443us; 0us; 16444us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 13us; 14us; 22us; 23us; 24us; 26us; 27us; 28us; 38us; 41us; 54us; 57us; 58us; 61us; 74us; 78us; 79us; 80us; 83us; 96us; 104us; 107us; 120us; 128us; 129us; 142us; 150us; 152us; 155us; 168us; 176us; 177us; 179us; 182us; 195us; 203us; 204us; 206us; 209us; 222us; 230us; 232us; 235us; 248us; 256us; 259us; 272us; 281us; 283us; 284us; 287us; 288us; 290us; 293us; 295us; 297us; 310us; 318us; 321us; 334us; 342us; 343us; 344us; 347us; 350us; 353us; 354us; 355us; 356us; 357us; 358us; 359us; 372us; 381us; 382us; 383us; 384us; 385us; 386us; 387us; 388us; 389us; 390us; 391us; 392us; 393us; 394us; 398us; 411us; 419us; 420us; 423us; 436us; 444us; 447us; 460us; 468us; 469us; 473us; 486us; 494us; 495us; 498us; 511us; 519us; 522us; 535us; 543us; 544us; 548us; 552us; 553us; 554us; 555us; 561us; 567us; 580us; 593us; 606us; 619us; 632us; 645us; 646us; 647us; 648us; 649us; 650us; 651us; 652us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 1us; 1us; 1us; 5us; 5us; 2us; 8us; 7us; 5us; 14us; 14us; 11us; 1us; 5us; 1us; 1us; 1us; 1us; 2us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 5us; 9us; 5us; 9us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 4us; 5us; 6us; 7us; 8us; 8us; 9us; 9us; 10us; 11us; 11us; 12us; 12us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 14us; 14us; 14us; 14us; 15us; 15us; 15us; 15us; 15us; 16us; 16us; 16us; 16us; 16us; 17us; 17us; 18us; 19us; 19us; 20us; 20us; 21us; 21us; 22us; 22us; 23us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 65535us; 16388us; 16389us; 65535us; 65535us; 65535us; 65535us; 16390us; 65535us; 65535us; 65535us; 16391us; 16392us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16393us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16394us; 65535us; 65535us; 65535us; 65535us; 16395us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16396us; 65535us; 16397us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16398us; 16399us; 65535us; 65535us; 65535us; 16400us; 16401us; 16402us; 16403us; 16404us; 16405us; 65535us; 65535us; 16406us; 16407us; 16408us; 16409us; 16410us; 16411us; 16412us; 16413us; 16414us; 16415us; 16416us; 16417us; 16418us; 65535us; 65535us; 65535us; 16419us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16420us; 65535us; 65535us; 65535us; 16421us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16422us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16436us; 16437us; 16438us; 65535us; 16439us; 16442us; 16443us; 16444us; |]
let _fsyacc_reductions ()  =    [| 
# 393 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : TexAst.Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 402 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "../../../TexFormulaCompiler/TexParser.fsy"
                                         _1 
                   )
# 69 "../../../TexFormulaCompiler/TexParser.fsy"
                 : TexAst.Expr));
# 413 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'binaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "../../../TexFormulaCompiler/TexParser.fsy"
                                                   _1 
                   )
# 76 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'expression));
# 424 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'highPriorityFunction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "../../../TexFormulaCompiler/TexParser.fsy"
                                                _1 
                   )
# 77 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'expression));
# 435 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "../../../TexFormulaCompiler/TexParser.fsy"
                                   Constant(Pi) 
                   )
# 85 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'constant));
# 445 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "../../../TexFormulaCompiler/TexParser.fsy"
                                   Constant(E) 
                   )
# 86 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'constant));
# 455 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "../../../TexFormulaCompiler/TexParser.fsy"
                                                                      Sum(List.rev _4) 
                   )
# 89 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'sum));
# 467 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "../../../TexFormulaCompiler/TexParser.fsy"
                                                                      Prod(List.rev _4) 
                   )
# 92 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'prod));
# 480 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'highPriorityFunction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "../../../TexFormulaCompiler/TexParser.fsy"
                                                      Fact(_1) 
                   )
# 95 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'fact));
# 491 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "../../../TexFormulaCompiler/TexParser.fsy"
                                                                                          Div(_4, _7) 
                   )
# 98 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'frac));
# 507 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "../../../TexFormulaCompiler/TexParser.fsy"
                                                                                                 
                                                                                                  let a = 1
                                                                                                  Pow(_2, _6) 
                                                                                               
                   )
# 101 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'power));
# 525 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "../../../TexFormulaCompiler/TexParser.fsy"
                                                                    
                                                                      report parseState "Right curly unmatched"
                                                                      Pow(Int(1), _4) 
                                                                  
                   )
# 105 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'power));
# 542 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _11 = (let data = parseState.GetInput(11) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _12 = (let data = parseState.GetInput(12) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _13 = (let data = parseState.GetInput(13) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _14 = (let data = parseState.GetInput(14) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "../../../TexFormulaCompiler/TexParser.fsy"
                                                                                                                           Integral(_12, _14, _5, _9) 
                   )
# 112 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'integral));
# 562 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _11 = (let data = parseState.GetInput(11) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _12 = (let data = parseState.GetInput(12) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _13 = (let data = parseState.GetInput(13) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _14 = (let data = parseState.GetInput(14) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "../../../TexFormulaCompiler/TexParser.fsy"
                                                                                                                           Integral(_12, _13, _5, _9) 
                   )
# 115 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'integral));
# 582 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _11 = (let data = parseState.GetInput(11) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "../../../TexFormulaCompiler/TexParser.fsy"
                                                                                                         Lim(_10, _5, _7) 
                   )
# 118 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'limit));
# 599 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'refValue)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "../../../TexFormulaCompiler/TexParser.fsy"
                                                                _1 
                   )
# 121 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'refPattern));
# 610 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'refValue)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "../../../TexFormulaCompiler/TexParser.fsy"
                                                             _4 
                   )
# 122 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'refPattern));
# 623 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string*int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "../../../TexFormulaCompiler/TexParser.fsy"
                                          analyzeDomainSpecificSingleSource (fst _1) (snd _1) |> DsAst 
                   )
# 127 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'refValue));
# 634 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : (string*int) list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "../../../TexFormulaCompiler/TexParser.fsy"
                                       analyzeDomainSpecificSources _1 |> DsAst 
                   )
# 128 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'refValue));
# 645 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "../../../TexFormulaCompiler/TexParser.fsy"
                                                        Int(_1) 
                   )
# 131 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'highPriorityFunction));
# 656 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "../../../TexFormulaCompiler/TexParser.fsy"
                                                        Float(_1) 
                   )
# 132 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'highPriorityFunction));
# 667 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "../../../TexFormulaCompiler/TexParser.fsy"
                                                        Float(Double.PositiveInfinity) 
                   )
# 133 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'highPriorityFunction));
# 677 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'rParen)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "../../../TexFormulaCompiler/TexParser.fsy"
                                                        _2 
                   )
# 134 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'highPriorityFunction));
# 689 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'trigonometry)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "../../../TexFormulaCompiler/TexParser.fsy"
                                                     _1 
                   )
# 135 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'highPriorityFunction));
# 700 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'sum)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "../../../TexFormulaCompiler/TexParser.fsy"
                                                     _1 
                   )
# 136 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'highPriorityFunction));
# 711 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'prod)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "../../../TexFormulaCompiler/TexParser.fsy"
                                                     _1 
                   )
# 137 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'highPriorityFunction));
# 722 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fact)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "../../../TexFormulaCompiler/TexParser.fsy"
                                                     _1 
                   )
# 138 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'highPriorityFunction));
# 733 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'integral)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "../../../TexFormulaCompiler/TexParser.fsy"
                                                     _1 
                   )
# 139 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'highPriorityFunction));
# 744 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'constant)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "../../../TexFormulaCompiler/TexParser.fsy"
                                                     _1 
                   )
# 140 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'highPriorityFunction));
# 755 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'power)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "../../../TexFormulaCompiler/TexParser.fsy"
                                                        _1 
                   )
# 141 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'highPriorityFunction));
# 766 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'frac)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "../../../TexFormulaCompiler/TexParser.fsy"
                                                        _1 
                   )
# 142 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'highPriorityFunction));
# 777 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'limit)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "../../../TexFormulaCompiler/TexParser.fsy"
                                                     _1 
                   )
# 143 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'highPriorityFunction));
# 788 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'refPattern)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "../../../TexFormulaCompiler/TexParser.fsy"
                                                     _1 
                   )
# 144 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'highPriorityFunction));
# 799 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "../../../TexFormulaCompiler/TexParser.fsy"
                                                     Var(_1) 
                   )
# 145 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'highPriorityFunction));
# 810 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'errRule)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "../../../TexFormulaCompiler/TexParser.fsy"
                                         _1 
                   )
# 146 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'highPriorityFunction));
# 821 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "../../../TexFormulaCompiler/TexParser.fsy"
                                                                                                Sin(_4, Int(1)) 
                   )
# 154 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'trigonometry));
# 834 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "../../../TexFormulaCompiler/TexParser.fsy"
                                                                                                Sin(_8, _5) 
                   )
# 155 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'trigonometry));
# 850 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "../../../TexFormulaCompiler/TexParser.fsy"
                                                                                               Cos(_4, Int(1)) 
                   )
# 156 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'trigonometry));
# 863 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "../../../TexFormulaCompiler/TexParser.fsy"
                                                                                                Cos(_8, _5) 
                   )
# 157 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'trigonometry));
# 879 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "../../../TexFormulaCompiler/TexParser.fsy"
                                                                    
                                                          let p = 1
                                                          Plus(_1, _3)
                                                        
                   )
# 160 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'binaryExpression));
# 894 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "../../../TexFormulaCompiler/TexParser.fsy"
                                                          Sub(_1, _3)  
                   )
# 164 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'binaryExpression));
# 906 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "../../../TexFormulaCompiler/TexParser.fsy"
                                                          Mul(_1, _3)  
                   )
# 165 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'binaryExpression));
# 918 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "../../../TexFormulaCompiler/TexParser.fsy"
                                                          Div(_1, _3)  
                   )
# 166 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'binaryExpression));
# 930 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "../../../TexFormulaCompiler/TexParser.fsy"
                                                          Bmod(_1, _3) 
                   )
# 167 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'binaryExpression));
# 942 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 189 "../../../TexFormulaCompiler/TexParser.fsy"
                                 
                   )
# 189 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'binaryOperator));
# 952 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 190 "../../../TexFormulaCompiler/TexParser.fsy"
                                 
                   )
# 190 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'binaryOperator));
# 962 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 191 "../../../TexFormulaCompiler/TexParser.fsy"
                                 
                   )
# 191 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'binaryOperator));
# 972 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 192 "../../../TexFormulaCompiler/TexParser.fsy"
                                 
                   )
# 192 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'binaryOperator));
# 982 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 193 "../../../TexFormulaCompiler/TexParser.fsy"
                                 
                   )
# 193 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'binaryOperator));
# 992 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 196 "../../../TexFormulaCompiler/TexParser.fsy"
                                                      [_1] 
                   )
# 196 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'argumentSet));
# 1003 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 197 "../../../TexFormulaCompiler/TexParser.fsy"
                                                       _3::_1 
                   )
# 197 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'argumentSet));
# 1015 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 209 "../../../TexFormulaCompiler/TexParser.fsy"
                                    
                                      let lexbuf = parseState.ParserLocalStore.["LexBuffer"] :?> LexBuffer<char>
                                      (new string(lexbuf.Lexeme), lexbuf.StartPos.Line, lexbuf.StartPos.Column) 
                                  
                   )
# 209 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'missingBinary));
# 1028 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 215 "../../../TexFormulaCompiler/TexParser.fsy"
                                     LCURLY 
                   )
# 215 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'lCurly));
# 1038 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 216 "../../../TexFormulaCompiler/TexParser.fsy"
                                  
                                       report parseState "Left curly brace" 
                                       LCURLY 
                                   
                   )
# 216 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'lCurly));
# 1051 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 222 "../../../TexFormulaCompiler/TexParser.fsy"
                                     RCURLY 
                   )
# 222 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'rCurly));
# 1061 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 223 "../../../TexFormulaCompiler/TexParser.fsy"
                                  
                                       report parseState "Right curly brace" 
                                       RCURLY 
                                   
                   )
# 223 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'rCurly));
# 1074 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 229 "../../../TexFormulaCompiler/TexParser.fsy"
                                     LPAREN 
                   )
# 229 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'lParen));
# 1084 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 230 "../../../TexFormulaCompiler/TexParser.fsy"
                                     
                                       report parseState "Left paren" 
                                       LPAREN 
                                   
                   )
# 230 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'lParen));
# 1097 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 243 "../../../TexFormulaCompiler/TexParser.fsy"
                                     RPAREN 
                   )
# 243 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'rParen));
# 1107 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 244 "../../../TexFormulaCompiler/TexParser.fsy"
                                     
                                       report parseState "Right paren" 
                                       RPAREN 
                                   
                   )
# 244 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'rParen));
# 1120 "..\..\..\TexFormulaCompiler\TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 251 "../../../TexFormulaCompiler/TexParser.fsy"
                                                                 
                                                 report parseState "Unexpected RCURLY"
                                                 _1
                                             
                   )
# 251 "../../../TexFormulaCompiler/TexParser.fsy"
                 : 'errRule));
|]
# 1135 "..\..\..\TexFormulaCompiler\TexParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 39;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : TexAst.Expr =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
