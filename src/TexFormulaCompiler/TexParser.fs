// Implementation file for parser generated by fsyacc
module TexParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "TexParser.fsy"

open TexAst
open System
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing
open ErrorHandling

let mutable domainSpecificAnalyzer = Unchecked.defaultof<DomainSpecificContext -> obj>
let mutable errorLogger = Unchecked.defaultof<ErrorLogger>

let analyzeDomainSpecificLanguage token = domainSpecificAnalyzer token

let analyzeDomainSpecificSource token startPos = 
    try
      analyzeDomainSpecificLanguage token
    with
      | DomainSpecificParseException(fString, pos) -> failwithf "%s at pos: %u" fString (startPos)

let analyzeDomainSpecificSingleSource src pos = 
    analyzeDomainSpecificSource (SRefValueSrc(src)) pos |> SRefValue

let isSome = function
    | Some(_) -> true
    | None -> false

let analyzeDomainSpecificSources sources = 
    let rec analyzeDomainSpecificSourcesInternal sources state = 
        match sources with
          | [] -> state
          | (src, pos)::t -> analyzeDomainSpecificSourcesInternal t ((analyzeDomainSpecificSource (MRefValueSrc(src)) pos)::state)
        
    analyzeDomainSpecificSourcesInternal sources [] 
    |> List.rev 
    |> MRefValue

let report (parseState : IParseState) sym = 
    let lexbuf = parseState.ParserLocalStore.["LexBuffer"] :?> LexBuffer<char>
    let errorMsg = sprintf "Unexpected symbol: %s. %s symbol required" (new String(lexbuf.Lexeme)) sym
    let error = Error(errorMsg, {Line = lexbuf.StartPos.Line; Column = lexbuf.StartPos.Column})
    errorLogger.ReportError(error)


# 49 "TexParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | PI
  | EULERNUM
  | FRAC
  | SQRT
  | SUM
  | PROD
  | INTEGRAL
  | TIMES
  | INFTY
  | TO
  | LIM
  | BMOD
  | TEXT
  | SIN
  | COS
  | PLUS
  | SUB
  | MUL
  | DIV
  | LPAREN
  | RPAREN
  | LCURLY
  | RCURLY
  | EXCL
  | CARET
  | EQ
  | UNDERSCORE
  | SLASH
  | COMMA
  | MREFVAL of ((string*int) list)
  | SREFVAL of (string*int)
  | ID of (string)
  | DIFF of (string)
  | FLOAT of (float)
  | INT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_PI
    | TOKEN_EULERNUM
    | TOKEN_FRAC
    | TOKEN_SQRT
    | TOKEN_SUM
    | TOKEN_PROD
    | TOKEN_INTEGRAL
    | TOKEN_TIMES
    | TOKEN_INFTY
    | TOKEN_TO
    | TOKEN_LIM
    | TOKEN_BMOD
    | TOKEN_TEXT
    | TOKEN_SIN
    | TOKEN_COS
    | TOKEN_PLUS
    | TOKEN_SUB
    | TOKEN_MUL
    | TOKEN_DIV
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LCURLY
    | TOKEN_RCURLY
    | TOKEN_EXCL
    | TOKEN_CARET
    | TOKEN_EQ
    | TOKEN_UNDERSCORE
    | TOKEN_SLASH
    | TOKEN_COMMA
    | TOKEN_MREFVAL
    | TOKEN_SREFVAL
    | TOKEN_ID
    | TOKEN_DIFF
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_expression
    | NONTERM_constant
    | NONTERM_sum
    | NONTERM_noname
    | NONTERM_prod
    | NONTERM_fact
    | NONTERM_frac
    | NONTERM_power
    | NONTERM_integral
    | NONTERM_limit
    | NONTERM_refPattern
    | NONTERM_refValue
    | NONTERM_highPriorityFunction
    | NONTERM_trigonometry
    | NONTERM_trigName
    | NONTERM_binaryExpression
    | NONTERM_binaryOperator
    | NONTERM_argumentSet
    | NONTERM_expr
    | NONTERM_recover
    | NONTERM_lCurly
    | NONTERM_rCurly
    | NONTERM_lParen
    | NONTERM_rParen
    | NONTERM_errRule

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | PI  -> 1 
  | EULERNUM  -> 2 
  | FRAC  -> 3 
  | SQRT  -> 4 
  | SUM  -> 5 
  | PROD  -> 6 
  | INTEGRAL  -> 7 
  | TIMES  -> 8 
  | INFTY  -> 9 
  | TO  -> 10 
  | LIM  -> 11 
  | BMOD  -> 12 
  | TEXT  -> 13 
  | SIN  -> 14 
  | COS  -> 15 
  | PLUS  -> 16 
  | SUB  -> 17 
  | MUL  -> 18 
  | DIV  -> 19 
  | LPAREN  -> 20 
  | RPAREN  -> 21 
  | LCURLY  -> 22 
  | RCURLY  -> 23 
  | EXCL  -> 24 
  | CARET  -> 25 
  | EQ  -> 26 
  | UNDERSCORE  -> 27 
  | SLASH  -> 28 
  | COMMA  -> 29 
  | MREFVAL _ -> 30 
  | SREFVAL _ -> 31 
  | ID _ -> 32 
  | DIFF _ -> 33 
  | FLOAT _ -> 34 
  | INT _ -> 35 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_PI 
  | 2 -> TOKEN_EULERNUM 
  | 3 -> TOKEN_FRAC 
  | 4 -> TOKEN_SQRT 
  | 5 -> TOKEN_SUM 
  | 6 -> TOKEN_PROD 
  | 7 -> TOKEN_INTEGRAL 
  | 8 -> TOKEN_TIMES 
  | 9 -> TOKEN_INFTY 
  | 10 -> TOKEN_TO 
  | 11 -> TOKEN_LIM 
  | 12 -> TOKEN_BMOD 
  | 13 -> TOKEN_TEXT 
  | 14 -> TOKEN_SIN 
  | 15 -> TOKEN_COS 
  | 16 -> TOKEN_PLUS 
  | 17 -> TOKEN_SUB 
  | 18 -> TOKEN_MUL 
  | 19 -> TOKEN_DIV 
  | 20 -> TOKEN_LPAREN 
  | 21 -> TOKEN_RPAREN 
  | 22 -> TOKEN_LCURLY 
  | 23 -> TOKEN_RCURLY 
  | 24 -> TOKEN_EXCL 
  | 25 -> TOKEN_CARET 
  | 26 -> TOKEN_EQ 
  | 27 -> TOKEN_UNDERSCORE 
  | 28 -> TOKEN_SLASH 
  | 29 -> TOKEN_COMMA 
  | 30 -> TOKEN_MREFVAL 
  | 31 -> TOKEN_SREFVAL 
  | 32 -> TOKEN_ID 
  | 33 -> TOKEN_DIFF 
  | 34 -> TOKEN_FLOAT 
  | 35 -> TOKEN_INT 
  | 38 -> TOKEN_end_of_input
  | 36 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_expression 
    | 3 -> NONTERM_expression 
    | 4 -> NONTERM_constant 
    | 5 -> NONTERM_constant 
    | 6 -> NONTERM_sum 
    | 7 -> NONTERM_sum 
    | 8 -> NONTERM_sum 
    | 9 -> NONTERM_sum 
    | 10 -> NONTERM_noname 
    | 11 -> NONTERM_prod 
    | 12 -> NONTERM_fact 
    | 13 -> NONTERM_frac 
    | 14 -> NONTERM_power 
    | 15 -> NONTERM_power 
    | 16 -> NONTERM_integral 
    | 17 -> NONTERM_integral 
    | 18 -> NONTERM_limit 
    | 19 -> NONTERM_refPattern 
    | 20 -> NONTERM_refPattern 
    | 21 -> NONTERM_refValue 
    | 22 -> NONTERM_refValue 
    | 23 -> NONTERM_highPriorityFunction 
    | 24 -> NONTERM_highPriorityFunction 
    | 25 -> NONTERM_highPriorityFunction 
    | 26 -> NONTERM_highPriorityFunction 
    | 27 -> NONTERM_highPriorityFunction 
    | 28 -> NONTERM_highPriorityFunction 
    | 29 -> NONTERM_highPriorityFunction 
    | 30 -> NONTERM_highPriorityFunction 
    | 31 -> NONTERM_highPriorityFunction 
    | 32 -> NONTERM_highPriorityFunction 
    | 33 -> NONTERM_highPriorityFunction 
    | 34 -> NONTERM_highPriorityFunction 
    | 35 -> NONTERM_highPriorityFunction 
    | 36 -> NONTERM_highPriorityFunction 
    | 37 -> NONTERM_highPriorityFunction 
    | 38 -> NONTERM_highPriorityFunction 
    | 39 -> NONTERM_trigonometry 
    | 40 -> NONTERM_trigonometry 
    | 41 -> NONTERM_trigonometry 
    | 42 -> NONTERM_trigonometry 
    | 43 -> NONTERM_trigonometry 
    | 44 -> NONTERM_trigName 
    | 45 -> NONTERM_trigName 
    | 46 -> NONTERM_binaryExpression 
    | 47 -> NONTERM_binaryExpression 
    | 48 -> NONTERM_binaryExpression 
    | 49 -> NONTERM_binaryExpression 
    | 50 -> NONTERM_binaryExpression 
    | 51 -> NONTERM_binaryExpression 
    | 52 -> NONTERM_binaryExpression 
    | 53 -> NONTERM_binaryExpression 
    | 54 -> NONTERM_binaryExpression 
    | 55 -> NONTERM_binaryOperator 
    | 56 -> NONTERM_binaryOperator 
    | 57 -> NONTERM_binaryOperator 
    | 58 -> NONTERM_binaryOperator 
    | 59 -> NONTERM_binaryOperator 
    | 60 -> NONTERM_argumentSet 
    | 61 -> NONTERM_argumentSet 
    | 62 -> NONTERM_argumentSet 
    | 63 -> NONTERM_argumentSet 
    | 64 -> NONTERM_expr 
    | 65 -> NONTERM_recover 
    | 66 -> NONTERM_lCurly 
    | 67 -> NONTERM_lCurly 
    | 68 -> NONTERM_rCurly 
    | 69 -> NONTERM_rCurly 
    | 70 -> NONTERM_lParen 
    | 71 -> NONTERM_lParen 
    | 72 -> NONTERM_rParen 
    | 73 -> NONTERM_rParen 
    | 74 -> NONTERM_errRule 
    | 75 -> NONTERM_errRule 
    | 76 -> NONTERM_errRule 
    | 77 -> NONTERM_errRule 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 38 
let _fsyacc_tagOfErrorTerminal = 36

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | PI  -> "PI" 
  | EULERNUM  -> "EULERNUM" 
  | FRAC  -> "FRAC" 
  | SQRT  -> "SQRT" 
  | SUM  -> "SUM" 
  | PROD  -> "PROD" 
  | INTEGRAL  -> "INTEGRAL" 
  | TIMES  -> "TIMES" 
  | INFTY  -> "INFTY" 
  | TO  -> "TO" 
  | LIM  -> "LIM" 
  | BMOD  -> "BMOD" 
  | TEXT  -> "TEXT" 
  | SIN  -> "SIN" 
  | COS  -> "COS" 
  | PLUS  -> "PLUS" 
  | SUB  -> "SUB" 
  | MUL  -> "MUL" 
  | DIV  -> "DIV" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | LCURLY  -> "LCURLY" 
  | RCURLY  -> "RCURLY" 
  | EXCL  -> "EXCL" 
  | CARET  -> "CARET" 
  | EQ  -> "EQ" 
  | UNDERSCORE  -> "UNDERSCORE" 
  | SLASH  -> "SLASH" 
  | COMMA  -> "COMMA" 
  | MREFVAL _ -> "MREFVAL" 
  | SREFVAL _ -> "SREFVAL" 
  | ID _ -> "ID" 
  | DIFF _ -> "DIFF" 
  | FLOAT _ -> "FLOAT" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | PI  -> (null : System.Object) 
  | EULERNUM  -> (null : System.Object) 
  | FRAC  -> (null : System.Object) 
  | SQRT  -> (null : System.Object) 
  | SUM  -> (null : System.Object) 
  | PROD  -> (null : System.Object) 
  | INTEGRAL  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | INFTY  -> (null : System.Object) 
  | TO  -> (null : System.Object) 
  | LIM  -> (null : System.Object) 
  | BMOD  -> (null : System.Object) 
  | TEXT  -> (null : System.Object) 
  | SIN  -> (null : System.Object) 
  | COS  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | SUB  -> (null : System.Object) 
  | MUL  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LCURLY  -> (null : System.Object) 
  | RCURLY  -> (null : System.Object) 
  | EXCL  -> (null : System.Object) 
  | CARET  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | UNDERSCORE  -> (null : System.Object) 
  | SLASH  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | MREFVAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SREFVAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DIFF _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 67us; 65535us; 0us; 2us; 2us; 137us; 10us; 134us; 11us; 137us; 14us; 134us; 15us; 137us; 18us; 136us; 21us; 134us; 22us; 137us; 25us; 134us; 26us; 137us; 30us; 31us; 31us; 137us; 33us; 34us; 34us; 137us; 36us; 37us; 37us; 137us; 40us; 41us; 41us; 137us; 60us; 63us; 61us; 62us; 62us; 137us; 63us; 137us; 66us; 67us; 67us; 137us; 68us; 69us; 69us; 137us; 77us; 78us; 78us; 137us; 79us; 80us; 80us; 137us; 91us; 92us; 92us; 137us; 107us; 108us; 108us; 137us; 110us; 111us; 111us; 137us; 112us; 113us; 113us; 137us; 115us; 116us; 116us; 137us; 118us; 119us; 119us; 137us; 120us; 121us; 121us; 137us; 123us; 124us; 124us; 137us; 127us; 137us; 128us; 137us; 129us; 137us; 130us; 137us; 131us; 137us; 132us; 137us; 133us; 137us; 134us; 137us; 135us; 137us; 136us; 137us; 137us; 137us; 138us; 127us; 139us; 128us; 140us; 129us; 141us; 130us; 142us; 131us; 143us; 132us; 144us; 133us; 145us; 133us; 151us; 135us; 67us; 65535us; 0us; 99us; 2us; 99us; 10us; 99us; 11us; 99us; 14us; 99us; 15us; 99us; 18us; 99us; 21us; 99us; 22us; 99us; 25us; 99us; 26us; 99us; 30us; 99us; 31us; 99us; 33us; 99us; 34us; 99us; 36us; 99us; 37us; 99us; 40us; 99us; 41us; 99us; 60us; 99us; 61us; 99us; 62us; 99us; 63us; 99us; 66us; 99us; 67us; 99us; 68us; 99us; 69us; 99us; 77us; 99us; 78us; 99us; 79us; 99us; 80us; 99us; 91us; 99us; 92us; 99us; 107us; 99us; 108us; 99us; 110us; 99us; 111us; 99us; 112us; 99us; 113us; 99us; 115us; 99us; 116us; 99us; 118us; 99us; 119us; 99us; 120us; 99us; 121us; 99us; 123us; 99us; 124us; 99us; 127us; 99us; 128us; 99us; 129us; 99us; 130us; 99us; 131us; 99us; 132us; 99us; 133us; 99us; 134us; 99us; 135us; 99us; 136us; 99us; 137us; 99us; 138us; 99us; 139us; 99us; 140us; 99us; 141us; 99us; 142us; 99us; 143us; 99us; 144us; 99us; 145us; 99us; 151us; 99us; 67us; 65535us; 0us; 95us; 2us; 95us; 10us; 95us; 11us; 95us; 14us; 95us; 15us; 95us; 18us; 95us; 21us; 95us; 22us; 95us; 25us; 95us; 26us; 95us; 30us; 95us; 31us; 95us; 33us; 95us; 34us; 95us; 36us; 95us; 37us; 95us; 40us; 95us; 41us; 95us; 60us; 95us; 61us; 95us; 62us; 95us; 63us; 95us; 66us; 95us; 67us; 95us; 68us; 95us; 69us; 95us; 77us; 95us; 78us; 95us; 79us; 95us; 80us; 95us; 91us; 95us; 92us; 95us; 107us; 95us; 108us; 95us; 110us; 95us; 111us; 95us; 112us; 95us; 113us; 95us; 115us; 95us; 116us; 95us; 118us; 95us; 119us; 95us; 120us; 95us; 121us; 95us; 123us; 95us; 124us; 95us; 127us; 95us; 128us; 95us; 129us; 95us; 130us; 95us; 131us; 95us; 132us; 95us; 133us; 95us; 134us; 95us; 135us; 95us; 136us; 95us; 137us; 95us; 138us; 95us; 139us; 95us; 140us; 95us; 141us; 95us; 142us; 95us; 143us; 95us; 144us; 95us; 145us; 95us; 151us; 95us; 0us; 65535us; 67us; 65535us; 0us; 96us; 2us; 96us; 10us; 96us; 11us; 96us; 14us; 96us; 15us; 96us; 18us; 96us; 21us; 96us; 22us; 96us; 25us; 96us; 26us; 96us; 30us; 96us; 31us; 96us; 33us; 96us; 34us; 96us; 36us; 96us; 37us; 96us; 40us; 96us; 41us; 96us; 60us; 96us; 61us; 96us; 62us; 96us; 63us; 96us; 66us; 96us; 67us; 96us; 68us; 96us; 69us; 96us; 77us; 96us; 78us; 96us; 79us; 96us; 80us; 96us; 91us; 96us; 92us; 96us; 107us; 96us; 108us; 96us; 110us; 96us; 111us; 96us; 112us; 96us; 113us; 96us; 115us; 96us; 116us; 96us; 118us; 96us; 119us; 96us; 120us; 96us; 121us; 96us; 123us; 96us; 124us; 96us; 127us; 96us; 128us; 96us; 129us; 96us; 130us; 96us; 131us; 96us; 132us; 96us; 133us; 96us; 134us; 96us; 135us; 96us; 136us; 96us; 137us; 96us; 138us; 96us; 139us; 96us; 140us; 96us; 141us; 96us; 142us; 96us; 143us; 96us; 144us; 96us; 145us; 96us; 151us; 96us; 67us; 65535us; 0us; 97us; 2us; 97us; 10us; 97us; 11us; 97us; 14us; 97us; 15us; 97us; 18us; 97us; 21us; 97us; 22us; 97us; 25us; 97us; 26us; 97us; 30us; 97us; 31us; 97us; 33us; 97us; 34us; 97us; 36us; 97us; 37us; 97us; 40us; 97us; 41us; 97us; 60us; 97us; 61us; 97us; 62us; 97us; 63us; 97us; 66us; 97us; 67us; 97us; 68us; 97us; 69us; 97us; 77us; 97us; 78us; 97us; 79us; 97us; 80us; 97us; 91us; 97us; 92us; 97us; 107us; 97us; 108us; 97us; 110us; 97us; 111us; 97us; 112us; 97us; 113us; 97us; 115us; 97us; 116us; 97us; 118us; 97us; 119us; 97us; 120us; 97us; 121us; 97us; 123us; 97us; 124us; 97us; 127us; 97us; 128us; 97us; 129us; 97us; 130us; 97us; 131us; 97us; 132us; 97us; 133us; 97us; 134us; 97us; 135us; 97us; 136us; 97us; 137us; 97us; 138us; 97us; 139us; 97us; 140us; 97us; 141us; 97us; 142us; 97us; 143us; 97us; 144us; 97us; 145us; 97us; 151us; 97us; 67us; 65535us; 0us; 101us; 2us; 101us; 10us; 101us; 11us; 101us; 14us; 101us; 15us; 101us; 18us; 101us; 21us; 101us; 22us; 101us; 25us; 101us; 26us; 101us; 30us; 101us; 31us; 101us; 33us; 101us; 34us; 101us; 36us; 101us; 37us; 101us; 40us; 101us; 41us; 101us; 60us; 101us; 61us; 101us; 62us; 101us; 63us; 101us; 66us; 101us; 67us; 101us; 68us; 101us; 69us; 101us; 77us; 101us; 78us; 101us; 79us; 101us; 80us; 101us; 91us; 101us; 92us; 101us; 107us; 101us; 108us; 101us; 110us; 101us; 111us; 101us; 112us; 101us; 113us; 101us; 115us; 101us; 116us; 101us; 118us; 101us; 119us; 101us; 120us; 101us; 121us; 101us; 123us; 101us; 124us; 101us; 127us; 101us; 128us; 101us; 129us; 101us; 130us; 101us; 131us; 101us; 132us; 101us; 133us; 101us; 134us; 101us; 135us; 101us; 136us; 101us; 137us; 101us; 138us; 101us; 139us; 101us; 140us; 101us; 141us; 101us; 142us; 101us; 143us; 101us; 144us; 101us; 145us; 101us; 151us; 101us; 67us; 65535us; 0us; 100us; 2us; 100us; 10us; 100us; 11us; 100us; 14us; 100us; 15us; 100us; 18us; 100us; 21us; 100us; 22us; 100us; 25us; 100us; 26us; 100us; 30us; 100us; 31us; 100us; 33us; 100us; 34us; 100us; 36us; 100us; 37us; 100us; 40us; 100us; 41us; 100us; 60us; 100us; 61us; 100us; 62us; 100us; 63us; 100us; 66us; 100us; 67us; 100us; 68us; 100us; 69us; 100us; 77us; 100us; 78us; 100us; 79us; 100us; 80us; 100us; 91us; 100us; 92us; 100us; 107us; 100us; 108us; 100us; 110us; 100us; 111us; 100us; 112us; 100us; 113us; 100us; 115us; 100us; 116us; 100us; 118us; 100us; 119us; 100us; 120us; 100us; 121us; 100us; 123us; 100us; 124us; 100us; 127us; 100us; 128us; 100us; 129us; 100us; 130us; 100us; 131us; 100us; 132us; 100us; 133us; 100us; 134us; 100us; 135us; 100us; 136us; 100us; 137us; 100us; 138us; 100us; 139us; 100us; 140us; 100us; 141us; 100us; 142us; 100us; 143us; 100us; 144us; 100us; 145us; 100us; 151us; 100us; 67us; 65535us; 0us; 98us; 2us; 98us; 10us; 98us; 11us; 98us; 14us; 98us; 15us; 98us; 18us; 98us; 21us; 98us; 22us; 98us; 25us; 98us; 26us; 98us; 30us; 98us; 31us; 98us; 33us; 98us; 34us; 98us; 36us; 98us; 37us; 98us; 40us; 98us; 41us; 98us; 60us; 98us; 61us; 98us; 62us; 98us; 63us; 98us; 66us; 98us; 67us; 98us; 68us; 98us; 69us; 98us; 77us; 98us; 78us; 98us; 79us; 98us; 80us; 98us; 91us; 98us; 92us; 98us; 107us; 98us; 108us; 98us; 110us; 98us; 111us; 98us; 112us; 98us; 113us; 98us; 115us; 98us; 116us; 98us; 118us; 98us; 119us; 98us; 120us; 98us; 121us; 98us; 123us; 98us; 124us; 98us; 127us; 98us; 128us; 98us; 129us; 98us; 130us; 98us; 131us; 98us; 132us; 98us; 133us; 98us; 134us; 98us; 135us; 98us; 136us; 98us; 137us; 98us; 138us; 98us; 139us; 98us; 140us; 98us; 141us; 98us; 142us; 98us; 143us; 98us; 144us; 98us; 145us; 98us; 151us; 98us; 67us; 65535us; 0us; 102us; 2us; 102us; 10us; 102us; 11us; 102us; 14us; 102us; 15us; 102us; 18us; 102us; 21us; 102us; 22us; 102us; 25us; 102us; 26us; 102us; 30us; 102us; 31us; 102us; 33us; 102us; 34us; 102us; 36us; 102us; 37us; 102us; 40us; 102us; 41us; 102us; 60us; 102us; 61us; 102us; 62us; 102us; 63us; 102us; 66us; 102us; 67us; 102us; 68us; 102us; 69us; 102us; 77us; 102us; 78us; 102us; 79us; 102us; 80us; 102us; 91us; 102us; 92us; 102us; 107us; 102us; 108us; 102us; 110us; 102us; 111us; 102us; 112us; 102us; 113us; 102us; 115us; 102us; 116us; 102us; 118us; 102us; 119us; 102us; 120us; 102us; 121us; 102us; 123us; 102us; 124us; 102us; 127us; 102us; 128us; 102us; 129us; 102us; 130us; 102us; 131us; 102us; 132us; 102us; 133us; 102us; 134us; 102us; 135us; 102us; 136us; 102us; 137us; 102us; 138us; 102us; 139us; 102us; 140us; 102us; 141us; 102us; 142us; 102us; 143us; 102us; 144us; 102us; 145us; 102us; 151us; 102us; 67us; 65535us; 0us; 103us; 2us; 103us; 10us; 103us; 11us; 103us; 14us; 103us; 15us; 103us; 18us; 103us; 21us; 103us; 22us; 103us; 25us; 103us; 26us; 103us; 30us; 103us; 31us; 103us; 33us; 103us; 34us; 103us; 36us; 103us; 37us; 103us; 40us; 103us; 41us; 103us; 60us; 103us; 61us; 103us; 62us; 103us; 63us; 103us; 66us; 103us; 67us; 103us; 68us; 103us; 69us; 103us; 77us; 103us; 78us; 103us; 79us; 103us; 80us; 103us; 91us; 103us; 92us; 103us; 107us; 103us; 108us; 103us; 110us; 103us; 111us; 103us; 112us; 103us; 113us; 103us; 115us; 103us; 116us; 103us; 118us; 103us; 119us; 103us; 120us; 103us; 121us; 103us; 123us; 103us; 124us; 103us; 127us; 103us; 128us; 103us; 129us; 103us; 130us; 103us; 131us; 103us; 132us; 103us; 133us; 103us; 134us; 103us; 135us; 103us; 136us; 103us; 137us; 103us; 138us; 103us; 139us; 103us; 140us; 103us; 141us; 103us; 142us; 103us; 143us; 103us; 144us; 103us; 145us; 103us; 151us; 103us; 68us; 65535us; 0us; 81us; 2us; 81us; 10us; 81us; 11us; 81us; 14us; 81us; 15us; 81us; 18us; 81us; 21us; 81us; 22us; 81us; 25us; 81us; 26us; 81us; 30us; 81us; 31us; 81us; 33us; 81us; 34us; 81us; 36us; 81us; 37us; 81us; 40us; 81us; 41us; 81us; 60us; 81us; 61us; 81us; 62us; 81us; 63us; 81us; 66us; 81us; 67us; 81us; 68us; 81us; 69us; 81us; 77us; 81us; 78us; 81us; 79us; 81us; 80us; 81us; 83us; 84us; 91us; 81us; 92us; 81us; 107us; 81us; 108us; 81us; 110us; 81us; 111us; 81us; 112us; 81us; 113us; 81us; 115us; 81us; 116us; 81us; 118us; 81us; 119us; 81us; 120us; 81us; 121us; 81us; 123us; 81us; 124us; 81us; 127us; 81us; 128us; 81us; 129us; 81us; 130us; 81us; 131us; 81us; 132us; 81us; 133us; 81us; 134us; 81us; 135us; 81us; 136us; 81us; 137us; 81us; 138us; 81us; 139us; 81us; 140us; 81us; 141us; 81us; 142us; 81us; 143us; 81us; 144us; 81us; 145us; 81us; 151us; 81us; 67us; 65535us; 0us; 5us; 2us; 5us; 10us; 5us; 11us; 5us; 14us; 5us; 15us; 5us; 18us; 5us; 21us; 5us; 22us; 5us; 25us; 5us; 26us; 5us; 30us; 5us; 31us; 5us; 33us; 5us; 34us; 5us; 36us; 5us; 37us; 5us; 40us; 5us; 41us; 5us; 60us; 5us; 61us; 5us; 62us; 5us; 63us; 5us; 66us; 5us; 67us; 5us; 68us; 5us; 69us; 5us; 77us; 5us; 78us; 5us; 79us; 5us; 80us; 5us; 91us; 5us; 92us; 5us; 107us; 5us; 108us; 5us; 110us; 5us; 111us; 5us; 112us; 5us; 113us; 5us; 115us; 5us; 116us; 5us; 118us; 5us; 119us; 5us; 120us; 5us; 121us; 5us; 123us; 5us; 124us; 5us; 127us; 5us; 128us; 5us; 129us; 5us; 130us; 5us; 131us; 5us; 132us; 5us; 133us; 5us; 134us; 5us; 135us; 5us; 136us; 5us; 137us; 5us; 138us; 5us; 139us; 5us; 140us; 5us; 141us; 5us; 142us; 5us; 143us; 5us; 144us; 5us; 145us; 5us; 151us; 5us; 67us; 65535us; 0us; 94us; 2us; 94us; 10us; 94us; 11us; 94us; 14us; 94us; 15us; 94us; 18us; 94us; 21us; 94us; 22us; 94us; 25us; 94us; 26us; 94us; 30us; 94us; 31us; 94us; 33us; 94us; 34us; 94us; 36us; 94us; 37us; 94us; 40us; 94us; 41us; 94us; 60us; 94us; 61us; 94us; 62us; 94us; 63us; 94us; 66us; 94us; 67us; 94us; 68us; 94us; 69us; 94us; 77us; 94us; 78us; 94us; 79us; 94us; 80us; 94us; 91us; 94us; 92us; 94us; 107us; 94us; 108us; 94us; 110us; 94us; 111us; 94us; 112us; 94us; 113us; 94us; 115us; 94us; 116us; 94us; 118us; 94us; 119us; 94us; 120us; 94us; 121us; 94us; 123us; 94us; 124us; 94us; 127us; 94us; 128us; 94us; 129us; 94us; 130us; 94us; 131us; 94us; 132us; 94us; 133us; 94us; 134us; 94us; 135us; 94us; 136us; 94us; 137us; 94us; 138us; 94us; 139us; 94us; 140us; 94us; 141us; 94us; 142us; 94us; 143us; 94us; 144us; 94us; 145us; 94us; 151us; 94us; 2us; 65535us; 18us; 122us; 19us; 122us; 67us; 65535us; 0us; 4us; 2us; 4us; 10us; 4us; 11us; 4us; 14us; 4us; 15us; 4us; 18us; 4us; 21us; 4us; 22us; 4us; 25us; 4us; 26us; 4us; 30us; 4us; 31us; 4us; 33us; 4us; 34us; 4us; 36us; 4us; 37us; 4us; 40us; 4us; 41us; 4us; 60us; 4us; 61us; 4us; 62us; 4us; 63us; 4us; 66us; 4us; 67us; 4us; 68us; 4us; 69us; 4us; 77us; 4us; 78us; 4us; 79us; 4us; 80us; 4us; 91us; 4us; 92us; 4us; 107us; 4us; 108us; 4us; 110us; 4us; 111us; 4us; 112us; 4us; 113us; 4us; 115us; 4us; 116us; 4us; 118us; 4us; 119us; 4us; 120us; 4us; 121us; 4us; 123us; 4us; 124us; 4us; 127us; 4us; 128us; 4us; 129us; 4us; 130us; 4us; 131us; 4us; 132us; 4us; 133us; 4us; 134us; 4us; 135us; 4us; 136us; 4us; 137us; 4us; 138us; 4us; 139us; 4us; 140us; 4us; 141us; 4us; 142us; 4us; 143us; 4us; 144us; 4us; 145us; 4us; 151us; 4us; 67us; 65535us; 0us; 144us; 2us; 145us; 10us; 144us; 11us; 144us; 14us; 144us; 15us; 144us; 18us; 144us; 21us; 144us; 22us; 144us; 25us; 144us; 26us; 144us; 30us; 144us; 31us; 145us; 33us; 144us; 34us; 145us; 36us; 144us; 37us; 145us; 40us; 144us; 41us; 145us; 60us; 144us; 61us; 144us; 62us; 145us; 63us; 145us; 66us; 144us; 67us; 145us; 68us; 144us; 69us; 145us; 77us; 144us; 78us; 145us; 79us; 144us; 80us; 145us; 91us; 144us; 92us; 145us; 107us; 144us; 108us; 145us; 110us; 144us; 111us; 145us; 112us; 144us; 113us; 145us; 115us; 144us; 116us; 145us; 118us; 144us; 119us; 145us; 120us; 144us; 121us; 145us; 123us; 144us; 124us; 145us; 127us; 145us; 128us; 145us; 129us; 145us; 130us; 145us; 131us; 145us; 132us; 145us; 133us; 145us; 134us; 145us; 135us; 145us; 136us; 145us; 137us; 145us; 138us; 144us; 139us; 144us; 140us; 144us; 141us; 144us; 142us; 144us; 143us; 144us; 144us; 144us; 145us; 144us; 151us; 144us; 4us; 65535us; 10us; 11us; 14us; 15us; 21us; 22us; 25us; 26us; 34us; 65535us; 2us; 146us; 11us; 152us; 15us; 152us; 22us; 152us; 26us; 152us; 31us; 146us; 34us; 146us; 37us; 146us; 41us; 146us; 62us; 146us; 63us; 146us; 67us; 146us; 69us; 146us; 78us; 146us; 80us; 146us; 92us; 146us; 108us; 146us; 111us; 146us; 113us; 146us; 116us; 146us; 119us; 146us; 121us; 146us; 124us; 146us; 127us; 146us; 128us; 146us; 129us; 146us; 130us; 146us; 131us; 146us; 132us; 146us; 133us; 146us; 134us; 146us; 135us; 146us; 136us; 146us; 137us; 146us; 1us; 65535us; 8us; 13us; 21us; 65535us; 9us; 10us; 13us; 14us; 20us; 21us; 24us; 25us; 29us; 30us; 32us; 33us; 39us; 40us; 44us; 68us; 48us; 79us; 51us; 112us; 54us; 120us; 58us; 60us; 59us; 61us; 65us; 66us; 74us; 75us; 82us; 83us; 106us; 107us; 109us; 110us; 114us; 115us; 117us; 118us; 122us; 123us; 69us; 65535us; 0us; 43us; 2us; 57us; 10us; 17us; 11us; 12us; 14us; 43us; 15us; 16us; 18us; 43us; 21us; 43us; 22us; 23us; 25us; 43us; 26us; 27us; 30us; 43us; 31us; 32us; 33us; 43us; 34us; 35us; 36us; 43us; 37us; 38us; 40us; 43us; 41us; 42us; 60us; 43us; 61us; 43us; 62us; 44us; 63us; 45us; 66us; 43us; 67us; 46us; 68us; 43us; 69us; 47us; 71us; 72us; 77us; 43us; 78us; 48us; 79us; 43us; 80us; 49us; 84us; 85us; 91us; 43us; 92us; 57us; 107us; 43us; 108us; 50us; 110us; 43us; 111us; 51us; 112us; 43us; 113us; 52us; 115us; 43us; 116us; 53us; 118us; 43us; 119us; 54us; 120us; 43us; 121us; 55us; 123us; 43us; 124us; 56us; 127us; 57us; 128us; 57us; 129us; 57us; 130us; 57us; 131us; 57us; 132us; 57us; 133us; 57us; 134us; 57us; 135us; 57us; 136us; 57us; 137us; 57us; 138us; 43us; 139us; 43us; 140us; 43us; 141us; 43us; 142us; 43us; 143us; 43us; 144us; 43us; 145us; 43us; 151us; 43us; 0us; 65535us; 0us; 65535us; 67us; 65535us; 0us; 105us; 2us; 105us; 10us; 105us; 11us; 105us; 14us; 105us; 15us; 105us; 18us; 105us; 21us; 105us; 22us; 105us; 25us; 105us; 26us; 105us; 30us; 105us; 31us; 105us; 33us; 105us; 34us; 105us; 36us; 105us; 37us; 105us; 40us; 105us; 41us; 105us; 60us; 105us; 61us; 105us; 62us; 105us; 63us; 105us; 66us; 105us; 67us; 105us; 68us; 105us; 69us; 105us; 77us; 105us; 78us; 105us; 79us; 105us; 80us; 105us; 91us; 105us; 92us; 105us; 107us; 105us; 108us; 105us; 110us; 105us; 111us; 105us; 112us; 105us; 113us; 105us; 115us; 105us; 116us; 105us; 118us; 105us; 119us; 105us; 120us; 105us; 121us; 105us; 123us; 105us; 124us; 105us; 127us; 105us; 128us; 105us; 129us; 105us; 130us; 105us; 131us; 105us; 132us; 105us; 133us; 105us; 134us; 105us; 135us; 105us; 136us; 105us; 137us; 105us; 138us; 105us; 139us; 105us; 140us; 105us; 141us; 105us; 142us; 105us; 143us; 105us; 144us; 105us; 145us; 105us; 151us; 105us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 71us; 139us; 207us; 208us; 276us; 344us; 412us; 480us; 548us; 616us; 684us; 753us; 821us; 889us; 892us; 960us; 1028us; 1033us; 1068us; 1070us; 1092us; 1162us; 1163us; 1164us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 10us; 1us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 74us; 75us; 1us; 1us; 1us; 2us; 2us; 3us; 12us; 1us; 4us; 1us; 5us; 14us; 6us; 7us; 8us; 11us; 13us; 16us; 17us; 18us; 20us; 25us; 39us; 40us; 41us; 42us; 2us; 6us; 8us; 2us; 6us; 8us; 4us; 6us; 61us; 62us; 63us; 2us; 6us; 15us; 1us; 7us; 1us; 7us; 4us; 7us; 61us; 62us; 63us; 2us; 7us; 15us; 2us; 8us; 15us; 4us; 9us; 43us; 62us; 69us; 3us; 9us; 43us; 69us; 1us; 9us; 1us; 9us; 4us; 9us; 61us; 62us; 63us; 2us; 9us; 15us; 1us; 11us; 1us; 11us; 4us; 11us; 61us; 62us; 63us; 2us; 11us; 15us; 1us; 12us; 1us; 13us; 1us; 13us; 10us; 13us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 74us; 75us; 3us; 13us; 15us; 74us; 1us; 13us; 10us; 13us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 74us; 75us; 3us; 13us; 15us; 74us; 2us; 14us; 77us; 11us; 14us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 74us; 75us; 77us; 3us; 14us; 15us; 74us; 2us; 14us; 15us; 2us; 14us; 15us; 11us; 14us; 15us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 74us; 75us; 4us; 14us; 15us; 15us; 74us; 1us; 15us; 5us; 15us; 15us; 16us; 17us; 74us; 3us; 15us; 15us; 74us; 4us; 15us; 16us; 17us; 74us; 3us; 15us; 16us; 74us; 3us; 15us; 18us; 74us; 3us; 15us; 18us; 74us; 3us; 15us; 39us; 74us; 3us; 15us; 40us; 74us; 3us; 15us; 40us; 74us; 3us; 15us; 41us; 74us; 3us; 15us; 42us; 74us; 3us; 15us; 42us; 74us; 3us; 15us; 43us; 74us; 2us; 15us; 74us; 1us; 15us; 3us; 15us; 16us; 17us; 1us; 15us; 3us; 15us; 16us; 17us; 12us; 15us; 16us; 17us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 74us; 75us; 10us; 15us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 74us; 75us; 2us; 16us; 17us; 2us; 16us; 17us; 2us; 16us; 17us; 11us; 16us; 17us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 74us; 75us; 2us; 16us; 17us; 11us; 16us; 17us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 74us; 75us; 1us; 16us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 18us; 10us; 18us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 74us; 75us; 1us; 18us; 10us; 18us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 74us; 75us; 1us; 19us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 2us; 26us; 76us; 11us; 26us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 74us; 75us; 76us; 2us; 26us; 75us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 33us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 37us; 1us; 38us; 2us; 39us; 40us; 1us; 39us; 10us; 39us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 74us; 75us; 1us; 40us; 1us; 40us; 10us; 40us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 74us; 75us; 1us; 40us; 10us; 40us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 74us; 75us; 2us; 41us; 42us; 1us; 41us; 10us; 41us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 74us; 75us; 1us; 42us; 1us; 42us; 10us; 42us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 74us; 75us; 1us; 42us; 10us; 42us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 74us; 75us; 1us; 43us; 1us; 43us; 10us; 43us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 74us; 75us; 1us; 44us; 1us; 45us; 10us; 46us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 74us; 75us; 11us; 46us; 47us; 47us; 48us; 49us; 50us; 51us; 53us; 54us; 74us; 75us; 10us; 46us; 47us; 48us; 48us; 49us; 50us; 53us; 54us; 74us; 75us; 10us; 46us; 47us; 48us; 49us; 49us; 50us; 53us; 54us; 74us; 75us; 10us; 46us; 47us; 48us; 49us; 50us; 50us; 53us; 54us; 74us; 75us; 10us; 46us; 47us; 48us; 49us; 50us; 51us; 53us; 54us; 74us; 75us; 10us; 46us; 47us; 48us; 49us; 50us; 52us; 53us; 54us; 74us; 75us; 10us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 60us; 74us; 75us; 10us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 61us; 74us; 75us; 10us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 62us; 74us; 75us; 10us; 46us; 47us; 48us; 49us; 50us; 53us; 54us; 64us; 74us; 75us; 2us; 46us; 55us; 3us; 47us; 51us; 56us; 2us; 48us; 57us; 2us; 49us; 58us; 2us; 50us; 59us; 2us; 51us; 56us; 1us; 52us; 2us; 52us; 53us; 1us; 54us; 1us; 55us; 1us; 57us; 1us; 58us; 1us; 59us; 1us; 61us; 1us; 63us; 1us; 65us; 1us; 66us; 1us; 67us; 1us; 68us; 1us; 69us; 1us; 75us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 15us; 17us; 19us; 22us; 24us; 26us; 41us; 44us; 47us; 52us; 55us; 57us; 59us; 64us; 67us; 70us; 75us; 79us; 81us; 83us; 88us; 91us; 93us; 95us; 100us; 103us; 105us; 107us; 109us; 120us; 124us; 126us; 137us; 141us; 144us; 156us; 160us; 163us; 166us; 178us; 183us; 185us; 191us; 195us; 200us; 204us; 208us; 212us; 216us; 220us; 224us; 228us; 232us; 236us; 240us; 243us; 245us; 249us; 251us; 255us; 268us; 279us; 282us; 285us; 288us; 300us; 303us; 315us; 317us; 319us; 321us; 323us; 325us; 327us; 329us; 331us; 342us; 344us; 355us; 357us; 359us; 361us; 363us; 365us; 367us; 369us; 371us; 373us; 375us; 378us; 390us; 393us; 395us; 397us; 399us; 401us; 403us; 405us; 407us; 409us; 411us; 413us; 415us; 417us; 420us; 422us; 433us; 435us; 437us; 448us; 450us; 461us; 464us; 466us; 477us; 479us; 481us; 492us; 494us; 505us; 507us; 509us; 520us; 522us; 524us; 535us; 547us; 558us; 569us; 580us; 591us; 602us; 613us; 624us; 635us; 646us; 649us; 653us; 656us; 659us; 662us; 665us; 667us; 670us; 672us; 674us; 676us; 678us; 680us; 682us; 684us; 686us; 688us; 690us; 692us; 694us; |]
let _fsyacc_action_rows = 159
let _fsyacc_actionTableElements = [|17us; 32768us; 1us; 6us; 2us; 7us; 12us; 150us; 16us; 147us; 17us; 143us; 18us; 148us; 19us; 149us; 20us; 91us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 0us; 49152us; 19us; 32768us; 0us; 3us; 1us; 6us; 2us; 7us; 12us; 142us; 16us; 138us; 17us; 139us; 18us; 140us; 19us; 141us; 20us; 91us; 21us; 158us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 0us; 16385us; 0us; 16386us; 1us; 16387us; 24us; 28us; 0us; 16388us; 0us; 16389us; 10us; 32768us; 3us; 29us; 5us; 9us; 6us; 24us; 7us; 64us; 9us; 90us; 11us; 73us; 13us; 82us; 14us; 106us; 15us; 114us; 36us; 153us; 2us; 32768us; 22us; 154us; 36us; 155us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 150us; 16us; 147us; 17us; 143us; 18us; 148us; 19us; 149us; 20us; 91us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 150us; 16us; 147us; 17us; 143us; 18us; 148us; 19us; 149us; 20us; 91us; 22us; 36us; 23us; 156us; 28us; 8us; 29us; 151us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 18us; 1us; 16390us; 25us; 58us; 2us; 32768us; 22us; 154us; 36us; 155us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 150us; 16us; 147us; 17us; 143us; 18us; 148us; 19us; 149us; 20us; 91us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 150us; 16us; 147us; 17us; 143us; 18us; 148us; 19us; 149us; 20us; 91us; 22us; 36us; 23us; 156us; 28us; 8us; 29us; 151us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 18us; 1us; 16391us; 25us; 58us; 1us; 16392us; 25us; 58us; 20us; 16453us; 1us; 6us; 2us; 7us; 5us; 20us; 12us; 150us; 14us; 125us; 15us; 126us; 16us; 147us; 17us; 143us; 18us; 148us; 19us; 149us; 20us; 91us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 3us; 16453us; 5us; 20us; 14us; 125us; 15us; 126us; 2us; 32768us; 22us; 154us; 36us; 155us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 150us; 16us; 147us; 17us; 143us; 18us; 148us; 19us; 149us; 20us; 91us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 150us; 16us; 147us; 17us; 143us; 18us; 148us; 19us; 149us; 20us; 91us; 22us; 36us; 23us; 156us; 28us; 8us; 29us; 151us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 18us; 1us; 16393us; 25us; 58us; 2us; 32768us; 22us; 154us; 36us; 155us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 150us; 16us; 147us; 17us; 143us; 18us; 148us; 19us; 149us; 20us; 91us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 150us; 16us; 147us; 17us; 143us; 18us; 148us; 19us; 149us; 20us; 91us; 22us; 36us; 23us; 156us; 28us; 8us; 29us; 151us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 18us; 1us; 16395us; 25us; 58us; 0us; 16396us; 2us; 32768us; 22us; 154us; 36us; 155us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 150us; 16us; 147us; 17us; 143us; 18us; 148us; 19us; 149us; 20us; 91us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 142us; 16us; 138us; 17us; 139us; 18us; 140us; 19us; 141us; 20us; 91us; 21us; 158us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 3us; 16458us; 22us; 154us; 25us; 58us; 36us; 155us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 150us; 16us; 147us; 17us; 143us; 18us; 148us; 19us; 149us; 20us; 91us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 142us; 16us; 138us; 17us; 139us; 18us; 140us; 19us; 141us; 20us; 91us; 21us; 158us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 1us; 16397us; 25us; 58us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 150us; 16us; 147us; 17us; 143us; 18us; 148us; 19us; 149us; 20us; 91us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 18us; 16461us; 1us; 6us; 2us; 7us; 12us; 142us; 16us; 138us; 17us; 139us; 18us; 140us; 19us; 141us; 20us; 91us; 21us; 158us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 1us; 16458us; 25us; 39us; 2us; 32768us; 22us; 154us; 36us; 155us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 150us; 16us; 147us; 17us; 143us; 18us; 148us; 19us; 149us; 20us; 91us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 142us; 16us; 138us; 17us; 139us; 18us; 140us; 19us; 141us; 20us; 91us; 21us; 158us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 1us; 16398us; 25us; 58us; 1us; 32768us; 25us; 58us; 3us; 16399us; 22us; 154us; 25us; 58us; 36us; 155us; 1us; 16399us; 25us; 58us; 1us; 16458us; 25us; 59us; 2us; 16458us; 25us; 58us; 33us; 70us; 3us; 16458us; 22us; 154us; 25us; 58us; 36us; 155us; 1us; 16402us; 25us; 58us; 1us; 16423us; 25us; 58us; 3us; 16458us; 22us; 154us; 25us; 58us; 36us; 155us; 1us; 16424us; 25us; 58us; 1us; 16425us; 25us; 58us; 3us; 16458us; 22us; 154us; 25us; 58us; 36us; 155us; 1us; 16426us; 25us; 58us; 1us; 16427us; 25us; 58us; 1us; 16458us; 25us; 58us; 2us; 32768us; 22us; 154us; 36us; 155us; 2us; 32768us; 22us; 154us; 36us; 155us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 150us; 16us; 147us; 17us; 143us; 18us; 148us; 19us; 149us; 20us; 91us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 150us; 16us; 147us; 17us; 143us; 18us; 148us; 19us; 149us; 20us; 91us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 142us; 16us; 138us; 17us; 139us; 18us; 140us; 19us; 141us; 20us; 91us; 21us; 158us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 142us; 16us; 138us; 17us; 139us; 18us; 140us; 19us; 141us; 20us; 91us; 21us; 158us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 1us; 32768us; 27us; 65us; 2us; 32768us; 22us; 154us; 36us; 155us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 150us; 16us; 147us; 17us; 143us; 18us; 148us; 19us; 149us; 20us; 91us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 142us; 16us; 138us; 17us; 139us; 18us; 140us; 19us; 141us; 20us; 91us; 21us; 158us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 150us; 16us; 147us; 17us; 143us; 18us; 148us; 19us; 149us; 20us; 91us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 19us; 32768us; 1us; 6us; 2us; 7us; 12us; 142us; 16us; 138us; 17us; 139us; 18us; 140us; 19us; 141us; 20us; 91us; 21us; 158us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 33us; 71us; 34us; 89us; 35us; 88us; 36us; 19us; 0us; 16400us; 2us; 32768us; 23us; 156us; 36us; 157us; 0us; 16401us; 1us; 32768us; 27us; 74us; 2us; 32768us; 22us; 154us; 36us; 155us; 1us; 32768us; 32us; 76us; 1us; 32768us; 10us; 77us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 150us; 16us; 147us; 17us; 143us; 18us; 148us; 19us; 149us; 20us; 91us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 142us; 16us; 138us; 17us; 139us; 18us; 140us; 19us; 141us; 20us; 91us; 21us; 158us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 150us; 16us; 147us; 17us; 143us; 18us; 148us; 19us; 149us; 20us; 91us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 142us; 16us; 138us; 17us; 139us; 18us; 140us; 19us; 141us; 20us; 91us; 21us; 158us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 0us; 16403us; 2us; 32768us; 22us; 154us; 36us; 155us; 2us; 32768us; 30us; 87us; 31us; 86us; 2us; 32768us; 23us; 156us; 36us; 157us; 0us; 16404us; 0us; 16405us; 0us; 16406us; 0us; 16407us; 0us; 16408us; 0us; 16409us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 150us; 16us; 147us; 17us; 143us; 18us; 148us; 19us; 149us; 20us; 91us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 18us; 16460us; 1us; 6us; 2us; 7us; 12us; 142us; 16us; 138us; 17us; 139us; 18us; 140us; 19us; 141us; 20us; 91us; 21us; 93us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 0us; 16410us; 0us; 16411us; 0us; 16412us; 0us; 16413us; 0us; 16414us; 0us; 16415us; 0us; 16416us; 0us; 16417us; 0us; 16418us; 0us; 16419us; 0us; 16420us; 0us; 16421us; 0us; 16422us; 3us; 32768us; 22us; 154us; 25us; 109us; 36us; 155us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 150us; 16us; 147us; 17us; 143us; 18us; 148us; 19us; 149us; 20us; 91us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 142us; 16us; 138us; 17us; 139us; 18us; 140us; 19us; 141us; 20us; 91us; 21us; 158us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 2us; 32768us; 22us; 154us; 36us; 155us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 150us; 16us; 147us; 17us; 143us; 18us; 148us; 19us; 149us; 20us; 91us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 142us; 16us; 138us; 17us; 139us; 18us; 140us; 19us; 141us; 20us; 91us; 21us; 158us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 150us; 16us; 147us; 17us; 143us; 18us; 148us; 19us; 149us; 20us; 91us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 142us; 16us; 138us; 17us; 139us; 18us; 140us; 19us; 141us; 20us; 91us; 21us; 158us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 3us; 32768us; 22us; 154us; 25us; 117us; 36us; 155us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 150us; 16us; 147us; 17us; 143us; 18us; 148us; 19us; 149us; 20us; 91us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 142us; 16us; 138us; 17us; 139us; 18us; 140us; 19us; 141us; 20us; 91us; 21us; 158us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 2us; 32768us; 22us; 154us; 36us; 155us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 150us; 16us; 147us; 17us; 143us; 18us; 148us; 19us; 149us; 20us; 91us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 142us; 16us; 138us; 17us; 139us; 18us; 140us; 19us; 141us; 20us; 91us; 21us; 158us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 150us; 16us; 147us; 17us; 143us; 18us; 148us; 19us; 149us; 20us; 91us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 142us; 16us; 138us; 17us; 139us; 18us; 140us; 19us; 141us; 20us; 91us; 21us; 158us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 2us; 32768us; 22us; 154us; 36us; 155us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 150us; 16us; 147us; 17us; 143us; 18us; 148us; 19us; 149us; 20us; 91us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 18us; 32768us; 1us; 6us; 2us; 7us; 12us; 142us; 16us; 138us; 17us; 139us; 18us; 140us; 19us; 141us; 20us; 91us; 21us; 158us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 0us; 16428us; 0us; 16429us; 14us; 16430us; 1us; 6us; 2us; 7us; 12us; 142us; 18us; 140us; 19us; 141us; 20us; 91us; 22us; 36us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 14us; 16431us; 1us; 6us; 2us; 7us; 12us; 16435us; 18us; 16435us; 19us; 16435us; 20us; 91us; 22us; 36us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 11us; 16432us; 1us; 6us; 2us; 7us; 20us; 91us; 22us; 36us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 11us; 16433us; 1us; 6us; 2us; 7us; 20us; 91us; 22us; 36us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 11us; 16434us; 1us; 6us; 2us; 7us; 20us; 91us; 22us; 36us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 11us; 16435us; 1us; 6us; 2us; 7us; 20us; 91us; 22us; 36us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 18us; 16436us; 1us; 6us; 2us; 7us; 12us; 142us; 16us; 138us; 17us; 139us; 18us; 140us; 19us; 141us; 20us; 91us; 21us; 158us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 18us; 16444us; 1us; 6us; 2us; 7us; 12us; 142us; 16us; 138us; 17us; 139us; 18us; 140us; 19us; 141us; 20us; 91us; 21us; 158us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 17us; 16445us; 1us; 6us; 2us; 7us; 12us; 142us; 16us; 138us; 17us; 139us; 18us; 140us; 19us; 141us; 20us; 91us; 21us; 158us; 22us; 36us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 12us; 16446us; 1us; 6us; 2us; 7us; 20us; 91us; 21us; 158us; 22us; 36us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 11us; 16448us; 1us; 6us; 2us; 7us; 20us; 91us; 22us; 36us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 17us; 16439us; 1us; 6us; 2us; 7us; 12us; 150us; 16us; 147us; 17us; 143us; 18us; 148us; 19us; 149us; 20us; 91us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 17us; 16440us; 1us; 6us; 2us; 7us; 12us; 150us; 16us; 147us; 17us; 143us; 18us; 148us; 19us; 149us; 20us; 91us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 17us; 16441us; 1us; 6us; 2us; 7us; 12us; 150us; 16us; 147us; 17us; 143us; 18us; 148us; 19us; 149us; 20us; 91us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 17us; 16442us; 1us; 6us; 2us; 7us; 12us; 150us; 16us; 147us; 17us; 143us; 18us; 148us; 19us; 149us; 20us; 91us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 17us; 16443us; 1us; 6us; 2us; 7us; 12us; 150us; 16us; 147us; 17us; 143us; 18us; 148us; 19us; 149us; 20us; 91us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 17us; 16440us; 1us; 6us; 2us; 7us; 12us; 150us; 16us; 147us; 17us; 143us; 18us; 148us; 19us; 149us; 20us; 91us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 150us; 16us; 147us; 17us; 143us; 18us; 148us; 19us; 149us; 20us; 91us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 17us; 16437us; 1us; 6us; 2us; 7us; 12us; 150us; 16us; 147us; 17us; 143us; 18us; 148us; 19us; 149us; 20us; 91us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 0us; 16438us; 0us; 16439us; 0us; 16441us; 0us; 16442us; 0us; 16443us; 17us; 32768us; 1us; 6us; 2us; 7us; 12us; 150us; 16us; 147us; 17us; 143us; 18us; 148us; 19us; 149us; 20us; 91us; 22us; 36us; 23us; 156us; 28us; 8us; 30us; 87us; 31us; 86us; 32us; 104us; 34us; 89us; 35us; 88us; 36us; 19us; 0us; 16447us; 0us; 16449us; 0us; 16450us; 0us; 16451us; 0us; 16452us; 0us; 16453us; 0us; 16459us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 18us; 19us; 39us; 40us; 41us; 43us; 44us; 45us; 56us; 59us; 77us; 96us; 98us; 101us; 119us; 138us; 140us; 142us; 163us; 167us; 170us; 188us; 207us; 209us; 212us; 230us; 249us; 251us; 252us; 255us; 273us; 292us; 296us; 314us; 333us; 335us; 353us; 372us; 374us; 377us; 395us; 414us; 416us; 418us; 422us; 424us; 426us; 429us; 433us; 435us; 437us; 441us; 443us; 445us; 449us; 451us; 453us; 455us; 458us; 461us; 479us; 497us; 516us; 535us; 537us; 540us; 558us; 577us; 595us; 615us; 616us; 619us; 620us; 622us; 625us; 627us; 629us; 647us; 666us; 684us; 703us; 704us; 707us; 710us; 713us; 714us; 715us; 716us; 717us; 718us; 719us; 737us; 756us; 757us; 758us; 759us; 760us; 761us; 762us; 763us; 764us; 765us; 766us; 767us; 768us; 769us; 773us; 791us; 810us; 813us; 831us; 850us; 868us; 887us; 891us; 909us; 928us; 931us; 949us; 968us; 986us; 1005us; 1008us; 1026us; 1045us; 1046us; 1047us; 1062us; 1077us; 1089us; 1101us; 1113us; 1125us; 1144us; 1163us; 1181us; 1194us; 1206us; 1224us; 1242us; 1260us; 1278us; 1296us; 1314us; 1332us; 1350us; 1351us; 1352us; 1353us; 1354us; 1355us; 1373us; 1374us; 1375us; 1376us; 1377us; 1378us; 1379us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 1us; 1us; 1us; 5us; 5us; 4us; 5us; 1us; 5us; 2us; 8us; 7us; 5us; 14us; 14us; 11us; 1us; 5us; 1us; 1us; 1us; 1us; 2us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 5us; 9us; 5us; 9us; 5us; 1us; 1us; 3us; 3us; 3us; 3us; 3us; 2us; 2us; 2us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 3us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 2us; 2us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 4us; 4us; 4us; 4us; 5us; 6us; 7us; 8us; 9us; 9us; 10us; 10us; 11us; 12us; 12us; 13us; 13us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 15us; 15us; 15us; 15us; 15us; 16us; 16us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 18us; 18us; 18us; 18us; 18us; 19us; 19us; 19us; 19us; 20us; 21us; 22us; 22us; 23us; 23us; 24us; 24us; 25us; 25us; 26us; 26us; 26us; 26us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 65535us; 16388us; 16389us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16396us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16400us; 65535us; 16401us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16403us; 65535us; 65535us; 65535us; 16404us; 16405us; 16406us; 16407us; 16408us; 16409us; 65535us; 65535us; 65535us; 16411us; 16412us; 16413us; 16414us; 16415us; 16416us; 16417us; 16418us; 16419us; 16420us; 16421us; 16422us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16428us; 16429us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16438us; 16439us; 16441us; 16442us; 16443us; 65535us; 16447us; 16449us; 16450us; 16451us; 16452us; 16453us; 16459us; |]
let _fsyacc_reductions ()  =    [| 
# 417 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : TexAst.Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 426 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "TexParser.fsy"
                                         _1 
                   )
# 75 "TexParser.fsy"
                 : TexAst.Expr));
# 437 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'binaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "TexParser.fsy"
                                                   _1 
                   )
# 82 "TexParser.fsy"
                 : 'expression));
# 448 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'highPriorityFunction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "TexParser.fsy"
                                                                   _1 
                   )
# 83 "TexParser.fsy"
                 : 'expression));
# 459 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "TexParser.fsy"
                                   Constant(Pi) 
                   )
# 91 "TexParser.fsy"
                 : 'constant));
# 469 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "TexParser.fsy"
                                   Constant(E) 
                   )
# 92 "TexParser.fsy"
                 : 'constant));
# 479 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "TexParser.fsy"
                                                                       Sum(List.rev _4) 
                   )
# 95 "TexParser.fsy"
                 : 'sum));
# 492 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "TexParser.fsy"
                                                                                     
                                                                                        let wrongLexeme, sPos, ePos = _2
                                                                                        let errorMsg = sprintf "Unexpected symbol: %s. Required SUM op" wrongLexeme
                                                                                        let error = Error(errorMsg, {Line = sPos; Column = ePos})
                                                                                        errorLogger.ReportError(error)
                                                                                        Sum(List.rev _4) 
                                                                                      
                   )
# 96 "TexParser.fsy"
                 : 'sum));
# 512 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "TexParser.fsy"
                                                     
                                                        report parseState "SUM should have parameters"
                                                        Sum([Int(1)])
                                                    
                   )
# 103 "TexParser.fsy"
                 : 'sum));
# 527 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "TexParser.fsy"
                                                                                 
                                                                                     report parseState "SUM operation should starts with SLASH"
                                                                                     Sum(List.rev _4)
                                                                                  
                   )
# 107 "TexParser.fsy"
                 : 'sum));
# 543 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "TexParser.fsy"
                                      report parseState "unexpected NAME"
                   )
# 121 "TexParser.fsy"
                 : 'noname));
# 553 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "TexParser.fsy"
                                                                      Prod(List.rev _4) 
                   )
# 124 "TexParser.fsy"
                 : 'prod));
# 566 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'highPriorityFunction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "TexParser.fsy"
                                                      Fact(_1) 
                   )
# 127 "TexParser.fsy"
                 : 'fact));
# 577 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "TexParser.fsy"
                                                                                          Div(_4, _7) 
                   )
# 130 "TexParser.fsy"
                 : 'frac));
# 593 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "TexParser.fsy"
                                                                                                 
                                                                                                  let a = 1
                                                                                                  Pow(_2, _6) 
                                                                                               
                   )
# 133 "TexParser.fsy"
                 : 'power));
# 611 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "TexParser.fsy"
                                                                    
                                                                      report parseState "Right curly unmatched"
                                                                      Pow(Int(1), _4) 
                                                                  
                   )
# 137 "TexParser.fsy"
                 : 'power));
# 628 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _11 = (let data = parseState.GetInput(11) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _12 = (let data = parseState.GetInput(12) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _13 = (let data = parseState.GetInput(13) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _14 = (let data = parseState.GetInput(14) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "TexParser.fsy"
                                                                                                                           Integral(_12, _14, _5, _9) 
                   )
# 144 "TexParser.fsy"
                 : 'integral));
# 648 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _11 = (let data = parseState.GetInput(11) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _12 = (let data = parseState.GetInput(12) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _13 = (let data = parseState.GetInput(13) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _14 = (let data = parseState.GetInput(14) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "TexParser.fsy"
                                                                                                                           Integral(_12, _13, _5, _9) 
                   )
# 147 "TexParser.fsy"
                 : 'integral));
# 668 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _11 = (let data = parseState.GetInput(11) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "TexParser.fsy"
                                                                                                         Lim(_10, _5, _7) 
                   )
# 150 "TexParser.fsy"
                 : 'limit));
# 685 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'refValue)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "TexParser.fsy"
                                                                _1 
                   )
# 153 "TexParser.fsy"
                 : 'refPattern));
# 696 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'refValue)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "TexParser.fsy"
                                                             _4 
                   )
# 154 "TexParser.fsy"
                 : 'refPattern));
# 709 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string*int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "TexParser.fsy"
                                          analyzeDomainSpecificSingleSource (fst _1) (snd _1) |> DsAst 
                   )
# 159 "TexParser.fsy"
                 : 'refValue));
# 720 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : (string*int) list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "TexParser.fsy"
                                       analyzeDomainSpecificSources _1 |> DsAst 
                   )
# 160 "TexParser.fsy"
                 : 'refValue));
# 731 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "TexParser.fsy"
                                                        Int(_1) 
                   )
# 163 "TexParser.fsy"
                 : 'highPriorityFunction));
# 742 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "TexParser.fsy"
                                                        Float(_1) 
                   )
# 164 "TexParser.fsy"
                 : 'highPriorityFunction));
# 753 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "TexParser.fsy"
                                                        Float(Double.PositiveInfinity) 
                   )
# 165 "TexParser.fsy"
                 : 'highPriorityFunction));
# 763 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "TexParser.fsy"
                                                        _2 
                   )
# 166 "TexParser.fsy"
                 : 'highPriorityFunction));
# 774 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'trigonometry)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "TexParser.fsy"
                                                     _1 
                   )
# 167 "TexParser.fsy"
                 : 'highPriorityFunction));
# 785 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'sum)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "TexParser.fsy"
                                                     _1 
                   )
# 168 "TexParser.fsy"
                 : 'highPriorityFunction));
# 796 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'prod)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "TexParser.fsy"
                                                     _1 
                   )
# 169 "TexParser.fsy"
                 : 'highPriorityFunction));
# 807 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fact)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "TexParser.fsy"
                                                     _1 
                   )
# 170 "TexParser.fsy"
                 : 'highPriorityFunction));
# 818 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'integral)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "TexParser.fsy"
                                                     _1 
                   )
# 171 "TexParser.fsy"
                 : 'highPriorityFunction));
# 829 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'constant)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "TexParser.fsy"
                                                     _1 
                   )
# 172 "TexParser.fsy"
                 : 'highPriorityFunction));
# 840 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'power)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "TexParser.fsy"
                                                        _1 
                   )
# 173 "TexParser.fsy"
                 : 'highPriorityFunction));
# 851 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'frac)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "TexParser.fsy"
                                                        _1 
                   )
# 174 "TexParser.fsy"
                 : 'highPriorityFunction));
# 862 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'limit)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "TexParser.fsy"
                                                     _1 
                   )
# 175 "TexParser.fsy"
                 : 'highPriorityFunction));
# 873 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'refPattern)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 176 "TexParser.fsy"
                                                     _1 
                   )
# 176 "TexParser.fsy"
                 : 'highPriorityFunction));
# 884 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "TexParser.fsy"
                                                     Var(_1) 
                   )
# 177 "TexParser.fsy"
                 : 'highPriorityFunction));
# 895 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'errRule)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "TexParser.fsy"
                                         _1 
                   )
# 178 "TexParser.fsy"
                 : 'highPriorityFunction));
# 906 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 186 "TexParser.fsy"
                                                                                                Sin(_4, Int(1)) 
                   )
# 186 "TexParser.fsy"
                 : 'trigonometry));
# 919 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 187 "TexParser.fsy"
                                                                                                Sin(_8, _5) 
                   )
# 187 "TexParser.fsy"
                 : 'trigonometry));
# 935 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 188 "TexParser.fsy"
                                                                                                Cos(_4, Int(1)) 
                   )
# 188 "TexParser.fsy"
                 : 'trigonometry));
# 948 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 189 "TexParser.fsy"
                                                                                                Cos(_8, _5) 
                   )
# 189 "TexParser.fsy"
                 : 'trigonometry));
# 964 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'trigName)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lCurly)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 190 "TexParser.fsy"
                                                                                     
                                                                                          report parseState "SIN/COS operation should starts with SLASH"
                                                                                          Sin(_4, Int(1))
                                                                                       
                   )
# 190 "TexParser.fsy"
                 : 'trigonometry));
# 981 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 196 "TexParser.fsy"
                                
                   )
# 196 "TexParser.fsy"
                 : 'trigName));
# 991 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 197 "TexParser.fsy"
                             
                   )
# 197 "TexParser.fsy"
                 : 'trigName));
# 1001 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 200 "TexParser.fsy"
                                                          
                                                          let p = 1
                                                          Plus(_1, _3)
                                                        
                   )
# 200 "TexParser.fsy"
                 : 'binaryExpression));
# 1016 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 204 "TexParser.fsy"
                                                          Sub(_1, _3)  
                   )
# 204 "TexParser.fsy"
                 : 'binaryExpression));
# 1028 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 205 "TexParser.fsy"
                                                          Mul(_1, _3)  
                   )
# 205 "TexParser.fsy"
                 : 'binaryExpression));
# 1040 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 206 "TexParser.fsy"
                                                          Div(_1, _3)  
                   )
# 206 "TexParser.fsy"
                 : 'binaryExpression));
# 1052 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 207 "TexParser.fsy"
                                                          Bmod(_1, _3) 
                   )
# 207 "TexParser.fsy"
                 : 'binaryExpression));
# 1064 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 208 "TexParser.fsy"
                                                       Neg(_2) 
                   )
# 208 "TexParser.fsy"
                 : 'binaryExpression));
# 1075 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'binaryOperator)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 220 "TexParser.fsy"
                                                                      
                                                            report parseState "First operand" 
                                                            Plus(_2, _2)
                                                        
                   )
# 220 "TexParser.fsy"
                 : 'binaryExpression));
# 1090 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'binaryOperator)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 224 "TexParser.fsy"
                                                                         
                                                            report parseState "Second operand" 
                                                            Plus(_1, _1)
                                                        
                   )
# 224 "TexParser.fsy"
                 : 'binaryExpression));
# 1105 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 228 "TexParser.fsy"
                                                                       
                                                 let lexeme, sPos, ePos, exVal = _2
                                                 let errorMsg = "MAYBE missing binary operator?"
                                                 let error = Error(errorMsg, {Line = sPos; Column = ePos})
                                                 errorLogger.ReportError(error)
                                                 
                                                 Plus(_1, exVal)
                                              
                   )
# 228 "TexParser.fsy"
                 : 'binaryExpression));
# 1124 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 238 "TexParser.fsy"
                                                 
                   )
# 238 "TexParser.fsy"
                 : 'binaryOperator));
# 1134 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 239 "TexParser.fsy"
                                                 
                   )
# 239 "TexParser.fsy"
                 : 'binaryOperator));
# 1144 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 240 "TexParser.fsy"
                                                 
                   )
# 240 "TexParser.fsy"
                 : 'binaryOperator));
# 1154 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 241 "TexParser.fsy"
                                                 
                   )
# 241 "TexParser.fsy"
                 : 'binaryOperator));
# 1164 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 242 "TexParser.fsy"
                                                 
                   )
# 242 "TexParser.fsy"
                 : 'binaryOperator));
# 1174 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 245 "TexParser.fsy"
                                                              
                                                                let a = 1
                                                                //report parseState "argPassed"
                                                                [_1]
                                                               
                   )
# 245 "TexParser.fsy"
                 : 'argumentSet));
# 1189 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 250 "TexParser.fsy"
                                                       
                                                          //report parseState "argPassed"
                                                          _3::_1 
                                                        
                   )
# 250 "TexParser.fsy"
                 : 'argumentSet));
# 1204 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 275 "TexParser.fsy"
                                                                               
                                                            let lexbuf = parseState.ParserLocalStore.["LexBuffer"] :?> LexBuffer<char>
                                                            let errorMsg = sprintf "Unexpected symbol: %s. Comma symbol required" (new String(lexbuf.Lexeme))
                                                            let error = Error(errorMsg, {Line = lexbuf.StartPos.Line; Column = lexbuf.StartPos.Column})
                                                            errorLogger.ReportError(error)
                                                            
                                                            _3::_1
                                                        
                   )
# 275 "TexParser.fsy"
                 : 'argumentSet));
# 1223 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 283 "TexParser.fsy"
                                                                      
                                                            let lexeme, sPos, ePos, exVal = _2
                                                            let errorMsg = "Expected comma symbol"
                                                            let error = Error(errorMsg, {Line = sPos; Column = ePos})
                                                            errorLogger.ReportError(error)
                                                            
                                                            exVal::_1
                                                        
                   )
# 283 "TexParser.fsy"
                 : 'argumentSet));
# 1242 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 293 "TexParser.fsy"
                                                                
                                          let lexbuf = parseState.ParserLocalStore.["LexBuffer"] :?> LexBuffer<char>
                                          let posis = parseState.GetInput(1)
                                          let posix = parseState.InputStartPosition(1)
                                          (new string(lexbuf.Lexeme), posix.Line, posix.Column, _1) 
                                      
                   )
# 293 "TexParser.fsy"
                 : 'expr));
# 1258 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 301 "TexParser.fsy"
                                                   
                                      let lexbuf = parseState.ParserLocalStore.["LexBuffer"] :?> LexBuffer<char>
                                      (new string(lexbuf.Lexeme), lexbuf.StartPos.Line, lexbuf.StartPos.Column) 
                                  
                   )
# 301 "TexParser.fsy"
                 : 'recover));
# 1271 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 307 "TexParser.fsy"
                                     LCURLY 
                   )
# 307 "TexParser.fsy"
                 : 'lCurly));
# 1281 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 308 "TexParser.fsy"
                                  
                                       report parseState "Left curly brace" 
                                       LCURLY 
                                   
                   )
# 308 "TexParser.fsy"
                 : 'lCurly));
# 1294 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 314 "TexParser.fsy"
                                    Some(RCURLY) 
                   )
# 314 "TexParser.fsy"
                 : 'rCurly));
# 1304 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 315 "TexParser.fsy"
                                                 
                                       report parseState "Right curly brace" 
                                       None 
                                   
                   )
# 315 "TexParser.fsy"
                 : 'rCurly));
# 1317 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 321 "TexParser.fsy"
                                     LPAREN 
                   )
# 321 "TexParser.fsy"
                 : 'lParen));
# 1327 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 322 "TexParser.fsy"
                                     
                                       report parseState "Left paren" 
                                       LPAREN 
                                   
                   )
# 322 "TexParser.fsy"
                 : 'lParen));
# 1340 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 328 "TexParser.fsy"
                                     RPAREN 
                   )
# 328 "TexParser.fsy"
                 : 'rParen));
# 1350 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 329 "TexParser.fsy"
                                     
                                       report parseState "Right paren" 
                                       RPAREN 
                                   
                   )
# 329 "TexParser.fsy"
                 : 'rParen));
# 1363 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'rCurly)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 336 "TexParser.fsy"
                                                                        
                                                 if isSome _2 then report parseState "Unexpected RCURLY"
                                                 _1
                                             
                   )
# 336 "TexParser.fsy"
                 : 'errRule));
# 1378 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 340 "TexParser.fsy"
                                                                        
                                                 report parseState "Unexpected RPAREN"
                                                 _1
                                              
                   )
# 340 "TexParser.fsy"
                 : 'errRule));
# 1392 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 344 "TexParser.fsy"
                                                                         
                                                  report parseState "LPAREN WITHOUT RPAREN"
                                                  _2
                                              
                   )
# 344 "TexParser.fsy"
                 : 'errRule));
# 1406 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 348 "TexParser.fsy"
                                                                         
                                                  report parseState "LCURLY WITHOUT RCURLY"
                                                  _2
                                              
                   )
# 348 "TexParser.fsy"
                 : 'errRule));
|]
# 1421 "TexParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 39;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : TexAst.Expr =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
