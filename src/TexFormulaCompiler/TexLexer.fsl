{
module TexLexer

open TexParser
open System
open Microsoft.FSharp.Text.Lexing
open System.Text
open ErrorHandling

let lexeme = LexBuffer<_>.LexemeString
let mutable errorLogger = Unchecked.defaultof<ErrorLogger>

let report (lexbuf: LexBuffer<char>) msg = 
    let error = Error(msg, {Line = lexbuf.StartPos.Line; Column = lexbuf.StartPos.Column})
    errorLogger.ReportError(error)
}

let plus = "+"
let sub = "-"
let mul = "*"
let div = "/"
let slash = "\\"
let lCurly = "{"
let rCurly = "}"
let lParen = "("
let rParen = ")"
let lSqBrace = "["
let rSqBrace = "]"
let excl = "!"
let caret = "^"
let eq = "="
let comma = ","
let underscore = "_"
let frac = "frac"
let sqrt = "sqrt"
let bmod = "\\bmod"
let sum = "sum"
let sin = "sin"
let cos = "cos"
let prod = "prod"
let integral = "int"
let times = "times"
let infinite = "infty"
let to = "to"
let limit = "lim"
let text = "text"

let digit = ['0' - '9']
let fraction = '.' digit*
let char = ['a'-'z' 'A'-'Z'] 
let int = digit+
let float = digit* fraction?
let identifier  = char(char|digit)*
let ignore = ' ' | '\t' | "\\," | "\\mathrm"

rule lex = parse
    | ignore        { lex lexbuf }
	| int           { INT (int (lexeme lexbuf)) }
	| float         { FLOAT (float (lexeme lexbuf)) }
	| plus          { PLUS }
	| sub           { SUB }
	| mul           { MUL }
    | div           { DIV }
    | sin           { SIN }
    | cos           { COS }
	| caret         { CARET }
	| slash         { SLASH }
	| lParen        { LPAREN }
	| rParen        { RPAREN }
	| lCurly        { LCURLY }
	| rCurly        { RCURLY }
	| excl          { EXCL }
	| eq            { EQ }
	| comma         { COMMA }
	| underscore    { UNDERSCORE }
	| frac          { FRAC }
	| sqrt          { SQRT }
	| bmod          { BMOD }
	| sum           { SUM }
	| prod          { PROD }
	| integral      { INTEGRAL }
	| times         { TIMES }
	| infinite      { INFTY }
	| to            { TO }
	| limit         { LIM }
	| text          { TEXT }
	| "d"           { diff lexbuf }
	| "e"           { EULERNUM }
	| "\\pi"        { PI }
	| "[||]"        { 
                      report lexbuf ErrorTextFormatter.EmptyRef
                      lex lexbuf
                    }
	| "[|"          { domainSpecificSValue (new StringBuilder()) (lexbuf.EndPos.Column) lexbuf }
	| "[||"         { domainSpecificMValue (new StringBuilder()) [] false (lexbuf.EndPos.Column) lexbuf }
	| identifier    { ID(lexeme lexbuf) }
    | _             { 
                      report lexbuf (ErrorTextFormatter.UnexpectedSymbol (new String(lexbuf.Lexeme)))
                      lex lexbuf
                    }
	| eof			{ EOF }

and diff = parse
    | "{"identifier"}"    { 
                            let matched = lexeme lexbuf
                            DIFF(matched.Substring(1, matched.Length-2))
                          }

and domainSpecificSValue s dsPos = parse
    | "|]"   { 
                 let s' = s.ToString()

                 if String.IsNullOrWhiteSpace(s') then 
                   report lexbuf (ErrorTextFormatter.UnexpectedSymbol (new String(lexbuf.Lexeme)))
                   INT(1)
                 else SREFVAL(s', dsPos)
             }
    | _      { domainSpecificSValue (s.Append(lexeme lexbuf)) dsPos lexbuf  }

and domainSpecificMValue s vals commaSeparated dsPos = parse
    | "||]"  { 
                 let lastVal = s.ToString()

                 match List.length vals, commaSeparated, String.IsNullOrWhiteSpace(lastVal) with
                     | (x, true, _) | (x, false, true) when x>0 -> 
                           report lexbuf ErrorTextFormatter.UnexpectedRefComma
                           INT(1)
                           //failwithf "Unexpected comma symbol at pos: %A" (dsPos-1)
                     | (_, _, true) -> 
                           report lexbuf ErrorTextFormatter.EmptyRef
                           INT(1)
                           //failwithf "Empty multi value at pos: %A" lexbuf.StartPos.Column
                     | (_, false, _) -> (lastVal, dsPos)::vals |> List.rev |> MREFVAL
             }    
    | _ ","  { 
                 let matched = lexeme lexbuf
                 let matched = matched.Substring(0, matched.Length-1)

                 if String.IsNullOrWhiteSpace(matched) then 
                   report lexbuf ErrorTextFormatter.EmptyRef
                   domainSpecificMValue (new StringBuilder()) vals true lexbuf.EndPos.Column lexbuf
                   //failwithf "Empty multi value at pos: %A" lexbuf.StartPos.Column
                 else
                   domainSpecificMValue (new StringBuilder()) ((s.Append(matched).ToString(), dsPos)::vals) true lexbuf.EndPos.Column lexbuf
             }
    | _      { domainSpecificMValue (s.Append(lexeme lexbuf)) vals false dsPos lexbuf }