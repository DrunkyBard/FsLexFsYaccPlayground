%{
open TexAst
open System
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing
open ErrorHandling

let mutable domainSpecificAnalyzer = Unchecked.defaultof<DomainSpecificContext -> obj>
let mutable errorLogger = Unchecked.defaultof<ErrorLogger>

let analyzeDomainSpecificLanguage token = domainSpecificAnalyzer token

let analyzeDomainSpecificSource token startPos = 
    try
      analyzeDomainSpecificLanguage token
    with
      | DomainSpecificParseException(fString, pos) -> failwithf "%s at pos: %u" fString (startPos)

let analyzeDomainSpecificSingleSource src pos = 
    analyzeDomainSpecificSource (SRefValueSrc(src)) pos |> SRefValue

let analyzeDomainSpecificSources sources = 
    let rec analyzeDomainSpecificSourcesInternal sources state = 
        match sources with
          | [] -> state
          | (src, pos)::t -> analyzeDomainSpecificSourcesInternal t ((analyzeDomainSpecificSource (MRefValueSrc(src)) pos)::state)
        
    analyzeDomainSpecificSourcesInternal sources [] 
    |> List.rev 
    |> MRefValue

%}

%token <int> INT
%token <float> FLOAT
%token <string> DIFF
%token <string> ID
%token <string*int> SREFVAL
%token <(string*int) list> MREFVAL
%token LSREFBRACKET RSREFBRACKET LMREFBRACKET RMREFBRACKET
%token LSQBRACE RSQBRACE LPAREN RPAREN LCURLY RCURLY EXCL CARET EQ UNDERSCORE SLASH COMMA
%token PLUS SUB MUL DIV 
%token FRAC SQRT SUM PROD INTEGRAL TIMES INFTY TO LIM BMOD TEXT SIN COS
%token PI EULERNUM
%token EOF

%left PLUS SUB 
%left DIV MUL BMOD

%start start
%type <TexAst.Expr> start


%%

start:
	| expression EOF { $1 }

expression:
    | binaryExpression      { $1 }
	| highPriorityFunction  { $1 }

constant:
	| PI       { Constant(Pi) }
	| EULERNUM { Constant(E) }

sum:
    | SLASH SUM LCURLY argumentSet RCURLY      { Sum(List.rev $4) }

prod:
    | SLASH PROD LCURLY argumentSet RCURLY     { Prod(List.rev $4) }

fact:
    highPriorityFunction EXCL  { Fact($1) }

frac:
    SLASH FRAC LCURLY expression RCURLY LCURLY expression RCURLY   { Div($4, $7) }

power:
    LCURLY expression RCURLY CARET LCURLY expression RCURLY  { Pow($2, $6) }

integral:
    | SLASH INTEGRAL UNDERSCORE LCURLY expression RCURLY CARET LCURLY expression RCURLY LCURLY expression RCURLY DIFF 
                                                                                                    { Integral($12, $14, $5, $9) }
																									
    | SLASH INTEGRAL UNDERSCORE LCURLY expression RCURLY CARET LCURLY expression RCURLY LCURLY expression DIFF RCURLY  
                                                                                                    { Integral($12, $13, $5, $9) }

limit:
    SLASH LIM UNDERSCORE LCURLY ID TO expression RCURLY LCURLY expression RCURLY  { Lim($10, $5, $7) }

refPattern:
    | refValue                           { $1 }
	| SLASH TEXT LCURLY refValue RCURLY  { $4 }

trigonometry:
    | SLASH SIN LCURLY expression RCURLY                                 { Sin($4, Int(1)) }
    | SLASH SIN CARET LCURLY expression RCURLY LCURLY expression RCURLY  { Sin($8, $5) }
    | SLASH COS LCURLY expression RCURLY                                 { Cos($4, Int(1)) }
    | SLASH COS CARET LCURLY expression RCURLY LCURLY expression RCURLY  { Cos($8, $5) }

refValue:
    | SREFVAL      { analyzeDomainSpecificSingleSource (fst $1) (snd $1) |> DsAst }
	| MREFVAL      { analyzeDomainSpecificSources $1 |> DsAst }

highPriorityFunction:
    | INT                        { Int($1) }
    | FLOAT                      { Float($1) }
    | SLASH INFTY                { Float(Double.PositiveInfinity) }
    | LPAREN expression RPAREN   { $2 }
	| trigonometry               { $1 }
	| sum                        { $1 }
	| prod                       { $1 }
	| fact                       { $1 }
	| integral                   { $1 }
	| constant                   { $1 }
    | power                      { $1 }
    | frac                       { $1 }
	| limit                      { $1 }
	| refPattern                 { $1 }
	| ID                         { Var($1) }

binaryExpression:
    | expression PLUS expression   { Plus($1, $3) }
    | expression SUB expression    { Sub($1, $3)  }
    | expression MUL expression    { Mul($1, $3)  }
    | expression DIV expression    { Div($1, $3)  }
    | expression BMOD expression   { Bmod($1, $3) }
	//
	| expression error expression  { 
                                       let lexbuf = parseState.ParserLocalStore.["LexBuffer"] :?> LexBuffer<char>
                                       let errorMsg = sprintf "Unexpected symbol: %s" (lexbuf.Lexeme.ToString())
                                       let error = Error(errorMsg, {Line = lexbuf.StartPos.Line; Column = lexbuf.StartPos.Column})
                                       errorLogger.ReportError(error)

                                       Plus($1, $3) 
                                   }

argumentSet:
    | expression  { [$1] }
	| argumentSet COMMA expression { $3::$1 }
	//
	| argumentSet error expression {
                                       let lexbuf = parseState.ParserLocalStore.["LexBuffer"] :?> LexBuffer<char>
                                       let errorMsg = sprintf "Unexpected symbol: %s. Comma symbol required" (lexbuf.Lexeme.ToString())
                                       let error = Error(errorMsg, {Line = lexbuf.StartPos.Line; Column = lexbuf.StartPos.Column})
                                       errorLogger.ReportError(error)
                                       
                                       $3::$1
                                   }
