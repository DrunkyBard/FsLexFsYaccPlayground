// Implementation file for parser generated by fsyacc
module SqlParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open SqlQuery
open Microsoft.FSharp.Text.Lexing

# 11 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | DOT
  | COMMA
  | EQ
  | LT
  | LE
  | GT
  | GE
  | NEQ
  | ASC
  | DESC
  | AND
  | OR
  | ON
  | JOIN
  | INNER
  | LEFT
  | RIGHT
  | SELECT
  | FROM
  | AS
  | WHERE
  | ORDER
  | BY
  | ID of (string)
  | BOOL of (bool)
  | STRING of (string)
  | INT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_DOT
    | TOKEN_COMMA
    | TOKEN_EQ
    | TOKEN_LT
    | TOKEN_LE
    | TOKEN_GT
    | TOKEN_GE
    | TOKEN_NEQ
    | TOKEN_ASC
    | TOKEN_DESC
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_ON
    | TOKEN_JOIN
    | TOKEN_INNER
    | TOKEN_LEFT
    | TOKEN_RIGHT
    | TOKEN_SELECT
    | TOKEN_FROM
    | TOKEN_AS
    | TOKEN_WHERE
    | TOKEN_ORDER
    | TOKEN_BY
    | TOKEN_ID
    | TOKEN_BOOL
    | TOKEN_STRING
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_fromRule
    | NONTERM_tableDef
    | NONTERM_columns
    | NONTERM_column
    | NONTERM_joinRuleList
    | NONTERM_joinRule
    | NONTERM_joinTable
    | NONTERM_joinType
    | NONTERM_joinWhereExpr
    | NONTERM_whereRule
    | NONTERM_whereExpr
    | NONTERM_whereOp
    | NONTERM_orderRule
    | NONTERM_orderColumnList
    | NONTERM_orderDirectionRule
    | NONTERM_value
    | NONTERM_op

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | DOT  -> 1 
  | COMMA  -> 2 
  | EQ  -> 3 
  | LT  -> 4 
  | LE  -> 5 
  | GT  -> 6 
  | GE  -> 7 
  | NEQ  -> 8 
  | ASC  -> 9 
  | DESC  -> 10 
  | AND  -> 11 
  | OR  -> 12 
  | ON  -> 13 
  | JOIN  -> 14 
  | INNER  -> 15 
  | LEFT  -> 16 
  | RIGHT  -> 17 
  | SELECT  -> 18 
  | FROM  -> 19 
  | AS  -> 20 
  | WHERE  -> 21 
  | ORDER  -> 22 
  | BY  -> 23 
  | ID _ -> 24 
  | BOOL _ -> 25 
  | STRING _ -> 26 
  | INT _ -> 27 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_DOT 
  | 2 -> TOKEN_COMMA 
  | 3 -> TOKEN_EQ 
  | 4 -> TOKEN_LT 
  | 5 -> TOKEN_LE 
  | 6 -> TOKEN_GT 
  | 7 -> TOKEN_GE 
  | 8 -> TOKEN_NEQ 
  | 9 -> TOKEN_ASC 
  | 10 -> TOKEN_DESC 
  | 11 -> TOKEN_AND 
  | 12 -> TOKEN_OR 
  | 13 -> TOKEN_ON 
  | 14 -> TOKEN_JOIN 
  | 15 -> TOKEN_INNER 
  | 16 -> TOKEN_LEFT 
  | 17 -> TOKEN_RIGHT 
  | 18 -> TOKEN_SELECT 
  | 19 -> TOKEN_FROM 
  | 20 -> TOKEN_AS 
  | 21 -> TOKEN_WHERE 
  | 22 -> TOKEN_ORDER 
  | 23 -> TOKEN_BY 
  | 24 -> TOKEN_ID 
  | 25 -> TOKEN_BOOL 
  | 26 -> TOKEN_STRING 
  | 27 -> TOKEN_INT 
  | 30 -> TOKEN_end_of_input
  | 28 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_fromRule 
    | 3 -> NONTERM_tableDef 
    | 4 -> NONTERM_tableDef 
    | 5 -> NONTERM_tableDef 
    | 6 -> NONTERM_columns 
    | 7 -> NONTERM_columns 
    | 8 -> NONTERM_column 
    | 9 -> NONTERM_column 
    | 10 -> NONTERM_column 
    | 11 -> NONTERM_joinRuleList 
    | 12 -> NONTERM_joinRuleList 
    | 13 -> NONTERM_joinRuleList 
    | 14 -> NONTERM_joinRule 
    | 15 -> NONTERM_joinTable 
    | 16 -> NONTERM_joinTable 
    | 17 -> NONTERM_joinTable 
    | 18 -> NONTERM_joinType 
    | 19 -> NONTERM_joinType 
    | 20 -> NONTERM_joinType 
    | 21 -> NONTERM_joinWhereExpr 
    | 22 -> NONTERM_joinWhereExpr 
    | 23 -> NONTERM_whereRule 
    | 24 -> NONTERM_whereRule 
    | 25 -> NONTERM_whereExpr 
    | 26 -> NONTERM_whereExpr 
    | 27 -> NONTERM_whereExpr 
    | 28 -> NONTERM_whereOp 
    | 29 -> NONTERM_whereOp 
    | 30 -> NONTERM_whereOp 
    | 31 -> NONTERM_orderRule 
    | 32 -> NONTERM_orderRule 
    | 33 -> NONTERM_orderColumnList 
    | 34 -> NONTERM_orderColumnList 
    | 35 -> NONTERM_orderDirectionRule 
    | 36 -> NONTERM_orderDirectionRule 
    | 37 -> NONTERM_orderDirectionRule 
    | 38 -> NONTERM_value 
    | 39 -> NONTERM_value 
    | 40 -> NONTERM_value 
    | 41 -> NONTERM_op 
    | 42 -> NONTERM_op 
    | 43 -> NONTERM_op 
    | 44 -> NONTERM_op 
    | 45 -> NONTERM_op 
    | 46 -> NONTERM_op 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 30 
let _fsyacc_tagOfErrorTerminal = 28

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | DOT  -> "DOT" 
  | COMMA  -> "COMMA" 
  | EQ  -> "EQ" 
  | LT  -> "LT" 
  | LE  -> "LE" 
  | GT  -> "GT" 
  | GE  -> "GE" 
  | NEQ  -> "NEQ" 
  | ASC  -> "ASC" 
  | DESC  -> "DESC" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | ON  -> "ON" 
  | JOIN  -> "JOIN" 
  | INNER  -> "INNER" 
  | LEFT  -> "LEFT" 
  | RIGHT  -> "RIGHT" 
  | SELECT  -> "SELECT" 
  | FROM  -> "FROM" 
  | AS  -> "AS" 
  | WHERE  -> "WHERE" 
  | ORDER  -> "ORDER" 
  | BY  -> "BY" 
  | ID _ -> "ID" 
  | BOOL _ -> "BOOL" 
  | STRING _ -> "STRING" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | ASC  -> (null : System.Object) 
  | DESC  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | ON  -> (null : System.Object) 
  | JOIN  -> (null : System.Object) 
  | INNER  -> (null : System.Object) 
  | LEFT  -> (null : System.Object) 
  | RIGHT  -> (null : System.Object) 
  | SELECT  -> (null : System.Object) 
  | FROM  -> (null : System.Object) 
  | AS  -> (null : System.Object) 
  | WHERE  -> (null : System.Object) 
  | ORDER  -> (null : System.Object) 
  | BY  -> (null : System.Object) 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 3us; 4us; 1us; 65535us; 9us; 10us; 1us; 65535us; 2us; 3us; 9us; 65535us; 2us; 17us; 15us; 16us; 37us; 46us; 39us; 46us; 42us; 46us; 44us; 46us; 47us; 49us; 54us; 56us; 58us; 59us; 1us; 65535us; 4us; 5us; 2us; 65535us; 4us; 22us; 5us; 23us; 1us; 65535us; 24us; 25us; 2us; 65535us; 4us; 24us; 5us; 24us; 1us; 65535us; 25us; 26us; 1us; 65535us; 5us; 6us; 4us; 65535us; 37us; 38us; 39us; 40us; 42us; 43us; 44us; 45us; 4us; 65535us; 37us; 41us; 39us; 41us; 42us; 41us; 44us; 41us; 1us; 65535us; 6us; 7us; 1us; 65535us; 54us; 55us; 2us; 65535us; 56us; 57us; 59us; 60us; 6us; 65535us; 37us; 50us; 39us; 50us; 42us; 50us; 44us; 50us; 47us; 48us; 51us; 52us; 2us; 65535us; 46us; 47us; 50us; 51us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 7us; 9us; 19us; 21us; 24us; 26us; 29us; 31us; 33us; 38us; 43us; 45us; 47us; 50us; 57us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 2us; 1us; 6us; 1us; 1us; 2us; 1us; 13us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 2us; 3us; 3us; 4us; 5us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 6us; 1us; 6us; 1us; 7us; 3us; 8us; 9us; 10us; 1us; 8us; 1us; 8us; 1us; 9us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 14us; 1us; 14us; 3us; 15us; 16us; 17us; 1us; 15us; 1us; 16us; 1us; 16us; 1us; 18us; 1us; 18us; 1us; 19us; 1us; 19us; 1us; 20us; 1us; 20us; 1us; 22us; 1us; 22us; 1us; 24us; 1us; 24us; 3us; 25us; 26us; 27us; 1us; 26us; 1us; 26us; 1us; 27us; 1us; 27us; 2us; 28us; 29us; 2us; 28us; 29us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 30us; 1us; 30us; 1us; 32us; 1us; 32us; 2us; 32us; 34us; 1us; 33us; 1us; 33us; 1us; 34us; 1us; 34us; 1us; 34us; 1us; 36us; 1us; 37us; 1us; 38us; 1us; 39us; 1us; 40us; 1us; 41us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 45us; 1us; 46us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 9us; 11us; 14us; 16us; 18us; 20us; 22us; 24us; 28us; 30us; 32us; 34us; 36us; 38us; 40us; 44us; 46us; 48us; 50us; 52us; 54us; 56us; 58us; 60us; 64us; 66us; 68us; 70us; 72us; 74us; 76us; 78us; 80us; 82us; 84us; 86us; 88us; 90us; 94us; 96us; 98us; 100us; 102us; 105us; 108us; 110us; 112us; 114us; 116us; 118us; 120us; 122us; 125us; 127us; 129us; 131us; 133us; 135us; 137us; 139us; 141us; 143us; 145us; 147us; 149us; 151us; 153us; 155us; |]
let _fsyacc_action_rows = 72
let _fsyacc_actionTableElements = [|1us; 32768us; 18us; 2us; 0us; 49152us; 1us; 32768us; 24us; 18us; 2us; 32768us; 2us; 15us; 19us; 9us; 3us; 16395us; 15us; 31us; 16us; 35us; 17us; 33us; 4us; 16407us; 15us; 31us; 16us; 35us; 17us; 33us; 21us; 39us; 1us; 16415us; 22us; 53us; 1us; 32768us; 0us; 8us; 0us; 16385us; 1us; 32768us; 24us; 11us; 0us; 16386us; 2us; 16389us; 20us; 12us; 24us; 14us; 1us; 32768us; 24us; 13us; 0us; 16387us; 0us; 16388us; 1us; 32768us; 24us; 18us; 0us; 16390us; 0us; 16391us; 2us; 16394us; 1us; 19us; 24us; 21us; 1us; 32768us; 24us; 20us; 0us; 16392us; 0us; 16393us; 0us; 16396us; 0us; 16397us; 1us; 32768us; 24us; 27us; 1us; 16405us; 13us; 37us; 0us; 16398us; 2us; 16401us; 20us; 29us; 24us; 28us; 0us; 16399us; 1us; 32768us; 24us; 30us; 0us; 16400us; 1us; 32768us; 14us; 32us; 0us; 16402us; 1us; 32768us; 14us; 34us; 0us; 16403us; 1us; 32768us; 14us; 36us; 0us; 16404us; 4us; 32768us; 24us; 18us; 25us; 65us; 26us; 64us; 27us; 63us; 0us; 16406us; 4us; 32768us; 24us; 18us; 25us; 65us; 26us; 64us; 27us; 63us; 0us; 16408us; 2us; 16409us; 11us; 42us; 12us; 44us; 4us; 32768us; 24us; 18us; 25us; 65us; 26us; 64us; 27us; 63us; 0us; 16410us; 4us; 32768us; 24us; 18us; 25us; 65us; 26us; 64us; 27us; 63us; 0us; 16411us; 6us; 32768us; 3us; 66us; 4us; 68us; 5us; 70us; 6us; 69us; 7us; 71us; 8us; 67us; 4us; 32768us; 24us; 18us; 25us; 65us; 26us; 64us; 27us; 63us; 0us; 16412us; 0us; 16413us; 6us; 32768us; 3us; 66us; 4us; 68us; 5us; 70us; 6us; 69us; 7us; 71us; 8us; 67us; 3us; 32768us; 25us; 65us; 26us; 64us; 27us; 63us; 0us; 16414us; 1us; 32768us; 23us; 54us; 1us; 32768us; 24us; 18us; 1us; 16416us; 2us; 58us; 2us; 16419us; 9us; 61us; 10us; 62us; 0us; 16417us; 1us; 32768us; 24us; 18us; 2us; 16419us; 9us; 61us; 10us; 62us; 0us; 16418us; 0us; 16420us; 0us; 16421us; 0us; 16422us; 0us; 16423us; 0us; 16424us; 0us; 16425us; 0us; 16426us; 0us; 16427us; 0us; 16428us; 0us; 16429us; 0us; 16430us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 5us; 8us; 12us; 17us; 19us; 21us; 22us; 24us; 25us; 28us; 30us; 31us; 32us; 34us; 35us; 36us; 39us; 41us; 42us; 43us; 44us; 45us; 47us; 49us; 50us; 53us; 54us; 56us; 57us; 59us; 60us; 62us; 63us; 65us; 66us; 71us; 72us; 77us; 78us; 81us; 86us; 87us; 92us; 93us; 100us; 105us; 106us; 107us; 114us; 118us; 119us; 121us; 123us; 125us; 128us; 129us; 131us; 134us; 135us; 136us; 137us; 138us; 139us; 140us; 141us; 142us; 143us; 144us; 145us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 7us; 2us; 3us; 2us; 1us; 3us; 1us; 3us; 2us; 1us; 0us; 1us; 2us; 3us; 2us; 3us; 1us; 2us; 2us; 2us; 0us; 2us; 0us; 2us; 1us; 3us; 3us; 3us; 3us; 3us; 0us; 3us; 2us; 4us; 0us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 3us; 4us; 4us; 5us; 5us; 5us; 6us; 6us; 6us; 7us; 8us; 8us; 8us; 9us; 9us; 9us; 10us; 10us; 11us; 11us; 12us; 12us; 12us; 13us; 13us; 13us; 14us; 14us; 15us; 15us; 16us; 16us; 16us; 17us; 17us; 17us; 18us; 18us; 18us; 18us; 18us; 18us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16385us; 65535us; 16386us; 65535us; 65535us; 16387us; 16388us; 65535us; 16390us; 16391us; 65535us; 65535us; 16392us; 16393us; 16396us; 16397us; 65535us; 65535us; 16398us; 65535us; 16399us; 65535us; 16400us; 65535us; 16402us; 65535us; 16403us; 65535us; 16404us; 65535us; 16406us; 65535us; 16408us; 65535us; 65535us; 16410us; 65535us; 16411us; 65535us; 65535us; 16412us; 16413us; 65535us; 65535us; 16414us; 65535us; 65535us; 65535us; 65535us; 16417us; 65535us; 65535us; 16418us; 16420us; 16421us; 16422us; 16423us; 16424us; 16425us; 16426us; 16427us; 16428us; 16429us; 16430us; |]
let _fsyacc_reductions ()  =    [| 
# 292 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : SqlQuery.SqlQuery)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 301 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'columns)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'fromRule)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'joinRuleList)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'whereRule)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'orderRule)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "Parser.fsy"
                                       
                                             {Table = _3;
                                             Columns = _2;
                                             Joins = _4;
                                             Where = _5;
                                             Order = _6;}
                                         
                   )
# 30 "Parser.fsy"
                 : SqlQuery.SqlQuery));
# 322 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'tableDef)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "Parser.fsy"
                                             _2 
                   )
# 39 "Parser.fsy"
                 : 'fromRule));
# 333 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser.fsy"
                                       {Alias = Some(_3); Name = _1;} 
                   )
# 41 "Parser.fsy"
                 : 'tableDef));
# 345 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                                    {Alias = Some(_2); Name = _1;} 
                   )
# 42 "Parser.fsy"
                 : 'tableDef));
# 357 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "Parser.fsy"
                                    {Alias = None; Name = _1;} 
                   )
# 43 "Parser.fsy"
                 : 'tableDef));
# 368 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'columns)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'column)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                                  _3::_1 
                   )
# 46 "Parser.fsy"
                 : 'columns));
# 380 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'column)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                                   [_1] 
                   )
# 47 "Parser.fsy"
                 : 'columns));
# 391 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "Parser.fsy"
                                       { TableRef = _1; ColumnName = _3; } 
                   )
# 49 "Parser.fsy"
                 : 'column));
# 403 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                                    { TableRef = _1; ColumnName = _2; } 
                   )
# 50 "Parser.fsy"
                 : 'column));
# 415 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                 { TableRef = _1; ColumnName = _1; } 
                   )
# 51 "Parser.fsy"
                 : 'column));
# 426 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                                                               [] 
                   )
# 54 "Parser.fsy"
                 : 'joinRuleList));
# 436 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'joinRule)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                                         [_1] 
                   )
# 55 "Parser.fsy"
                 : 'joinRuleList));
# 447 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'joinRuleList)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'joinRule)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                                                   _2::_1 
                   )
# 56 "Parser.fsy"
                 : 'joinRuleList));
# 459 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'joinType)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'joinTable)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'joinWhereExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                                             _2, _1, _3 
                   )
# 59 "Parser.fsy"
                 : 'joinRule));
# 472 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                         { Alias = Some(_2); Name= _1; } 
                   )
# 62 "Parser.fsy"
                 : 'joinTable));
# 484 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                         { Alias = Some(_3); Name= _1; } 
                   )
# 63 "Parser.fsy"
                 : 'joinTable));
# 496 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                                         { Alias = None; Name= _1; } 
                   )
# 64 "Parser.fsy"
                 : 'joinTable));
# 507 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                           JoinType.INNER 
                   )
# 67 "Parser.fsy"
                 : 'joinType));
# 517 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser.fsy"
                                        JoinType.RIGHT 
                   )
# 68 "Parser.fsy"
                 : 'joinType));
# 527 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsy"
                                        JoinType.LEFT 
                   )
# 69 "Parser.fsy"
                 : 'joinType));
# 537 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsy"
                                            None 
                   )
# 72 "Parser.fsy"
                 : 'joinWhereExpr));
# 547 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'whereExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "Parser.fsy"
                                         Some(_2) 
                   )
# 73 "Parser.fsy"
                 : 'joinWhereExpr));
# 558 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Parser.fsy"
                                               None 
                   )
# 76 "Parser.fsy"
                 : 'whereRule));
# 568 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'whereExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsy"
                                            Some(_2) 
                   )
# 77 "Parser.fsy"
                 : 'whereRule));
# 579 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'whereOp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "Parser.fsy"
                                                     _1 
                   )
# 80 "Parser.fsy"
                 : 'whereExpr));
# 590 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'whereOp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'whereExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                                                  And(_1, _3) 
                   )
# 81 "Parser.fsy"
                 : 'whereExpr));
# 602 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'whereOp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'whereExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Parser.fsy"
                                                  Or(_1, _3) 
                   )
# 82 "Parser.fsy"
                 : 'whereExpr));
# 614 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'column)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'op)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "Parser.fsy"
                                               Expr(RefValue(_2, _1, _3)) 
                   )
# 85 "Parser.fsy"
                 : 'whereOp));
# 627 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'column)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'op)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'column)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsy"
                                               Expr(RefOnly(_2, _1, _3)) 
                   )
# 86 "Parser.fsy"
                 : 'whereOp));
# 640 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'op)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsy"
                                               Expr(Value(_2, _1, _3)) 
                   )
# 87 "Parser.fsy"
                 : 'whereOp));
# 653 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "Parser.fsy"
                                                        [] 
                   )
# 90 "Parser.fsy"
                 : 'orderRule));
# 663 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'orderColumnList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "Parser.fsy"
                                                     _3 
                   )
# 91 "Parser.fsy"
                 : 'orderRule));
# 674 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'column)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'orderDirectionRule)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsy"
                                                                              [(_2, _1)] 
                   )
# 93 "Parser.fsy"
                 : 'orderColumnList));
# 686 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'orderColumnList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'column)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'orderDirectionRule)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "Parser.fsy"
                                                                           (_4, _3)::_1 
                   )
# 94 "Parser.fsy"
                 : 'orderColumnList));
# 699 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "Parser.fsy"
                                    OrderDirection.ASC 
                   )
# 97 "Parser.fsy"
                 : 'orderDirectionRule));
# 709 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsy"
                                 OrderDirection.ASC 
                   )
# 98 "Parser.fsy"
                 : 'orderDirectionRule));
# 719 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "Parser.fsy"
                                 OrderDirection.DESC 
                   )
# 99 "Parser.fsy"
                 : 'orderDirectionRule));
# 729 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "Parser.fsy"
                                      Int(_1) 
                   )
# 102 "Parser.fsy"
                 : 'value));
# 740 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "Parser.fsy"
                                      String(_1) 
                   )
# 103 "Parser.fsy"
                 : 'value));
# 751 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsy"
                                      Bool(_1) 
                   )
# 104 "Parser.fsy"
                 : 'value));
# 762 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "Parser.fsy"
                                  Eq 
                   )
# 107 "Parser.fsy"
                 : 'op));
# 772 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "Parser.fsy"
                               Neq 
                   )
# 108 "Parser.fsy"
                 : 'op));
# 782 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Parser.fsy"
                               Lt 
                   )
# 109 "Parser.fsy"
                 : 'op));
# 792 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "Parser.fsy"
                               Gt 
                   )
# 110 "Parser.fsy"
                 : 'op));
# 802 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "Parser.fsy"
                               Leq 
                   )
# 111 "Parser.fsy"
                 : 'op));
# 812 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "Parser.fsy"
                               Geq 
                   )
# 112 "Parser.fsy"
                 : 'op));
|]
# 823 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 31;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : SqlQuery.SqlQuery =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
