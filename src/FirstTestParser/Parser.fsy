%{
open SqlQuery
open Microsoft.FSharp.Text.Lexing
%}

%start start

%token <int> INT
%token <string> STRING
%token <bool> BOOL
%token <string> ID
%token SELECT FROM AS WHERE ORDER BY 
%token JOIN INNER LEFT RIGHT 
%token ASC DESC AND OR ON
%token EQ LT LE GT GE NEQ
%token DOT COMMA
%token EOF

%type <SqlQuery.SqlQuery> start

%%


start: 
	SELECT columns
	fromRule
	joinRuleList
	whereRule
	orderRule       
	EOF             {
                        {Table = $3;
                        Columns = $2;
                        Joins = $4;
                        Where = $5;
                        Order = $6;}
                    }

fromRule:
    | FROM tableDef   { $2 }
tableDef:
    | ID AS ID  { {Alias = Some($3); Name = $1;} }
	| ID ID     { {Alias = Some($2); Name = $1;} }
	| ID        { {Alias = None; Name = $1;} }

columns:
    | columns COMMA column	{ $3::$1 }
    | column                { [$1] }
column:
	| ID DOT ID    { { TableRef = $1; ColumnName = $3; } }
	| ID ID		   { { TableRef = $1; ColumnName = $2; } }
	| ID		   { { TableRef = $1; ColumnName = $1; } }

joinRuleList:
    |                                   { [] }
	| joinRule							{ [$1] }
	| joinRuleList joinRule				{ $2::$1 }

joinRule:
    joinType joinTable joinWhereExpr  { $2, $1, $3 }

joinTable:
    | ID ID       { { Alias = Some($2); Name= $1; } }
    | ID AS ID    { { Alias = Some($3); Name= $1; } }
    | ID          { { Alias = None; Name= $1; } }

joinType:
    | INNER JOIN    { JoinType.INNER }
	| RIGHT JOIN    { JoinType.RIGHT }
	| LEFT JOIN     { JoinType.LEFT }

joinWhereExpr:
    |                { None }
	| ON whereExpr   { Some($2) }

whereRule:
    |                   { None }
	| WHERE whereExpr   { Some($2) }

whereExpr:
    | whereOp                 { $1 }
	| whereOp AND whereExpr   { And($1, $3) }
	| whereOp OR whereExpr    { Or($1, $3) }

whereOp:
    | column op value   { Expr(RefValue($2, $1, $3)) }
    | column op column  { Expr(RefOnly($2, $1, $3)) }
    | value op value    { Expr(Value($2, $1, $3)) }

orderRule:
    |                            { [] }
	| ORDER BY orderColumnList   { $3 }
orderColumnList:
    | column orderDirectionRule                        { [($2, $1)] }
	| orderColumnList COMMA column orderDirectionRule  { ($4, $3)::$1 }

orderDirectionRule:
    |        { OrderDirection.ASC }
	| ASC    { OrderDirection.ASC }
	| DESC   { OrderDirection.DESC }

value:
    | INT      { Int($1) }
    | STRING   { String($1) }
    | BOOL     { Bool($1) }

op:
    | EQ   { Eq }
	| NEQ  { Neq }
	| LT   { Lt }
	| GT   { Gt }
	| LE   { Leq }
	| GE   { Geq }
