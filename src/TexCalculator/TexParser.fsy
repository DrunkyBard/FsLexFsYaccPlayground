%{
open TexAst
open Microsoft.FSharp.Text.Lexing
%}

%start start

%token <int> INT
%token LSQBRACE RSQBRACE LPAREN RPAREN LCURLY RCURLY EXCL CARET EQ UNDERSCORE SLASH COMMA
%token PLUS SUB MUL DIV 
%token FRAC SQRT SUM PROD INTEGRAL TIMES INFTY TO LIM BMOD
%token EOF

%type <TexAst.Expr> start

%%

start:
	expression EOF { $1 }

expression:
    | lowPriorityBinaryExpression    { $1 }
    | mediumPriorityBinaryExpression { $1 }
	| highPriorityFunction           { $1 }

sum:
    SLASH SUM LCURLY argumentSet RCURLY  { Sum(List.rev $4) }

prod:
    SLASH PROD LCURLY argumentSet RCURLY { Prod(List.rev $4) }

fact:
    highPriorityFunction EXCL  { Fact($1) }

lowPriorityBinaryOperator:
    | PLUS  { PLUS }
    | SUB   { SUB }

mediumPriorityBinaryOperator:
    | MUL   { MUL }
    | DIV   { DIV }

highPriorityFunction:
    | INT   { Int($1) }
	| sum   { $1 }
	| prod  { $1 }
	| fact  { $1 }

lowPriorityBinaryExpression:
    | mediumPriorityBinaryExpression lowPriorityBinaryOperator expression  { 
                                                                             match $2 with
                                                                                | PLUS -> Plus($1, $3)
                                                                                | SUB -> Sub($1, $3)
                                                                           }
    | highPriorityFunction lowPriorityBinaryOperator highPriorityFunction     { 
                                                                                match $2 with
                                                                                   | PLUS -> Plus($1, $3)
                                                                                   | SUB -> Sub($1, $3)
                                                                              }
    | expression lowPriorityBinaryOperator highPriorityFunction  { 
                                                                   match $2 with
                                                                      | PLUS -> Plus($1, $3)
                                                                      | SUB -> Sub($1, $3)
                                                                 }

mediumPriorityBinaryExpression:
    | expression mediumPriorityBinaryOperator highPriorityFunction  { 
                                                                        match $2 with
                                                                            | MUL -> Mul($1, $3)
                                                                            | DIV -> Div($1, $3)
                                                                    }

argumentSet:
    | expression  { [$1] }
	| argumentSet COMMA expression { $3::$1 }





// ---------------DRAFT------------------
//plus:
//    | expression PLUS INT         { Plus($1, Int($3)) }
//    | INT PLUS expression         { Plus(Int($1), $3) }
//    | expression PLUS expression  { Plus($1, $3) }
//	
//sub:
//    | expression SUB expression   { Sub($1, $3) }
//						    
//mul:					    
//    | expression MUL INT { Mul($1, Int($3)) }
//						    
//div:					    
//    | expression DIV expression   { Div($1, $3) }