// Implementation file for parser generated by fsyacc
module DsParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "DomainSpecific\DsParser.fsy"

open Microsoft.FSharp.Text.Lexing
open TexAst
open QueryStatement

let buildQueryStatement forEntity selectedProperty statementType = 
    {
        For = forEntity
        Select = selectedProperty
        Type = statementType
    }


# 20 "DomainSpecific\DsParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | EQ
  | LT
  | LE
  | GT
  | GE
  | NEQ
  | AND
  | OR
  | FOR
  | WITH
  | SELECT
  | WHERE
  | ID of (string)
  | STRING of (string)
  | INT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_EQ
    | TOKEN_LT
    | TOKEN_LE
    | TOKEN_GT
    | TOKEN_GE
    | TOKEN_NEQ
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_FOR
    | TOKEN_WITH
    | TOKEN_SELECT
    | TOKEN_WHERE
    | TOKEN_ID
    | TOKEN_STRING
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_value
    | NONTERM_whereStatement
    | NONTERM_operation
    | NONTERM_operationType

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | EQ  -> 1 
  | LT  -> 2 
  | LE  -> 3 
  | GT  -> 4 
  | GE  -> 5 
  | NEQ  -> 6 
  | AND  -> 7 
  | OR  -> 8 
  | FOR  -> 9 
  | WITH  -> 10 
  | SELECT  -> 11 
  | WHERE  -> 12 
  | ID _ -> 13 
  | STRING _ -> 14 
  | INT _ -> 15 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_EQ 
  | 2 -> TOKEN_LT 
  | 3 -> TOKEN_LE 
  | 4 -> TOKEN_GT 
  | 5 -> TOKEN_GE 
  | 6 -> TOKEN_NEQ 
  | 7 -> TOKEN_AND 
  | 8 -> TOKEN_OR 
  | 9 -> TOKEN_FOR 
  | 10 -> TOKEN_WITH 
  | 11 -> TOKEN_SELECT 
  | 12 -> TOKEN_WHERE 
  | 13 -> TOKEN_ID 
  | 14 -> TOKEN_STRING 
  | 15 -> TOKEN_INT 
  | 18 -> TOKEN_end_of_input
  | 16 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_start 
    | 3 -> NONTERM_value 
    | 4 -> NONTERM_value 
    | 5 -> NONTERM_whereStatement 
    | 6 -> NONTERM_whereStatement 
    | 7 -> NONTERM_whereStatement 
    | 8 -> NONTERM_operation 
    | 9 -> NONTERM_operation 
    | 10 -> NONTERM_operationType 
    | 11 -> NONTERM_operationType 
    | 12 -> NONTERM_operationType 
    | 13 -> NONTERM_operationType 
    | 14 -> NONTERM_operationType 
    | 15 -> NONTERM_operationType 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 18 
let _fsyacc_tagOfErrorTerminal = 16

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | EQ  -> "EQ" 
  | LT  -> "LT" 
  | LE  -> "LE" 
  | GT  -> "GT" 
  | GE  -> "GE" 
  | NEQ  -> "NEQ" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | FOR  -> "FOR" 
  | WITH  -> "WITH" 
  | SELECT  -> "SELECT" 
  | WHERE  -> "WHERE" 
  | ID _ -> "ID" 
  | STRING _ -> "STRING" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | WITH  -> (null : System.Object) 
  | SELECT  -> (null : System.Object) 
  | WHERE  -> (null : System.Object) 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 5us; 65535us; 6us; 7us; 12us; 24us; 19us; 24us; 20us; 24us; 22us; 23us; 3us; 65535us; 12us; 13us; 19us; 17us; 20us; 18us; 3us; 65535us; 12us; 16us; 19us; 16us; 20us; 16us; 2us; 65535us; 21us; 22us; 24us; 25us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 9us; 13us; 17us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 2us; 2us; 1us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 2us; 1us; 2us; 3us; 2us; 6us; 7us; 1us; 3us; 1us; 4us; 1us; 5us; 3us; 6us; 6us; 7us; 3us; 6us; 7us; 7us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 10us; 12us; 14us; 16us; 18us; 20us; 22us; 24us; 26us; 28us; 32us; 34us; 36us; 38us; 42us; 46us; 48us; 50us; 52us; 54us; 56us; 58us; 60us; 62us; 64us; 66us; 68us; 70us; 72us; |]
let _fsyacc_action_rows = 33
let _fsyacc_actionTableElements = [|1us; 32768us; 9us; 2us; 0us; 49152us; 1us; 32768us; 13us; 3us; 2us; 32768us; 10us; 4us; 11us; 10us; 1us; 32768us; 13us; 5us; 1us; 32768us; 1us; 6us; 2us; 32768us; 14us; 14us; 15us; 15us; 1us; 32768us; 11us; 8us; 1us; 32768us; 13us; 9us; 0us; 16385us; 1us; 32768us; 13us; 11us; 1us; 32768us; 12us; 12us; 3us; 32768us; 13us; 21us; 14us; 14us; 15us; 15us; 2us; 16386us; 7us; 19us; 8us; 20us; 0us; 16387us; 0us; 16388us; 0us; 16389us; 0us; 16390us; 1us; 16391us; 7us; 19us; 3us; 32768us; 13us; 21us; 14us; 14us; 15us; 15us; 3us; 32768us; 13us; 21us; 14us; 14us; 15us; 15us; 6us; 32768us; 1us; 27us; 2us; 28us; 3us; 29us; 4us; 30us; 5us; 31us; 6us; 32us; 2us; 32768us; 14us; 14us; 15us; 15us; 0us; 16392us; 6us; 32768us; 1us; 27us; 2us; 28us; 3us; 29us; 4us; 30us; 5us; 31us; 6us; 32us; 1us; 32768us; 13us; 26us; 0us; 16393us; 0us; 16394us; 0us; 16395us; 0us; 16396us; 0us; 16397us; 0us; 16398us; 0us; 16399us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 5us; 8us; 10us; 12us; 15us; 17us; 19us; 20us; 22us; 24us; 28us; 31us; 32us; 33us; 34us; 35us; 37us; 41us; 45us; 52us; 55us; 56us; 63us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 8us; 6us; 1us; 1us; 1us; 3us; 3us; 3us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 1us; 2us; 2us; 3us; 3us; 3us; 4us; 4us; 5us; 5us; 5us; 5us; 5us; 5us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 16387us; 16388us; 16389us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16392us; 65535us; 65535us; 16393us; 16394us; 16395us; 16396us; 16397us; 16398us; 16399us; |]
let _fsyacc_reductions ()  =    [| 
# 185 "DomainSpecific\DsParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : QueryStatement.Statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 194 "DomainSpecific\DsParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "DomainSpecific\DsParser.fsy"
                                                                  buildQueryStatement _2 _8 (Single(_4, _6))  
                   )
# 32 "DomainSpecific\DsParser.fsy"
                 : QueryStatement.Statement));
# 208 "DomainSpecific\DsParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'whereStatement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "DomainSpecific\DsParser.fsy"
                                                                  buildQueryStatement _2 _4 (Many(_6)) 
                   )
# 33 "DomainSpecific\DsParser.fsy"
                 : QueryStatement.Statement));
# 221 "DomainSpecific\DsParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "DomainSpecific\DsParser.fsy"
                                     String(_1) 
                   )
# 36 "DomainSpecific\DsParser.fsy"
                 : 'value));
# 232 "DomainSpecific\DsParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "DomainSpecific\DsParser.fsy"
                                  Int(_1) 
                   )
# 37 "DomainSpecific\DsParser.fsy"
                 : 'value));
# 243 "DomainSpecific\DsParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'operation)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "DomainSpecific\DsParser.fsy"
                                                                _1 
                   )
# 40 "DomainSpecific\DsParser.fsy"
                 : 'whereStatement));
# 254 "DomainSpecific\DsParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'whereStatement)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'whereStatement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "DomainSpecific\DsParser.fsy"
                                                             And(_1, _3) 
                   )
# 41 "DomainSpecific\DsParser.fsy"
                 : 'whereStatement));
# 266 "DomainSpecific\DsParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'whereStatement)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'whereStatement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "DomainSpecific\DsParser.fsy"
                                                             Or(_1, _3) 
                   )
# 42 "DomainSpecific\DsParser.fsy"
                 : 'whereStatement));
# 278 "DomainSpecific\DsParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'operationType)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "DomainSpecific\DsParser.fsy"
                                                     Operation(_2, _1, _3) 
                   )
# 45 "DomainSpecific\DsParser.fsy"
                 : 'operation));
# 291 "DomainSpecific\DsParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'operationType)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "DomainSpecific\DsParser.fsy"
                                                     Operation(_2, _3, _1) 
                   )
# 46 "DomainSpecific\DsParser.fsy"
                 : 'operation));
# 304 "DomainSpecific\DsParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "DomainSpecific\DsParser.fsy"
                                   Eq 
                   )
# 49 "DomainSpecific\DsParser.fsy"
                 : 'operationType));
# 314 "DomainSpecific\DsParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "DomainSpecific\DsParser.fsy"
                                Le 
                   )
# 50 "DomainSpecific\DsParser.fsy"
                 : 'operationType));
# 324 "DomainSpecific\DsParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "DomainSpecific\DsParser.fsy"
                                Le 
                   )
# 51 "DomainSpecific\DsParser.fsy"
                 : 'operationType));
# 334 "DomainSpecific\DsParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "DomainSpecific\DsParser.fsy"
                                Gt 
                   )
# 52 "DomainSpecific\DsParser.fsy"
                 : 'operationType));
# 344 "DomainSpecific\DsParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "DomainSpecific\DsParser.fsy"
                                Ge 
                   )
# 53 "DomainSpecific\DsParser.fsy"
                 : 'operationType));
# 354 "DomainSpecific\DsParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "DomainSpecific\DsParser.fsy"
                                Neq 
                   )
# 54 "DomainSpecific\DsParser.fsy"
                 : 'operationType));
|]
# 365 "DomainSpecific\DsParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 19;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : QueryStatement.Statement =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
