// Implementation file for parser generated by fsyacc
module TexParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "TexParser.fsy"

open TexAst
open Microsoft.FSharp.Text.Lexing

let mutable domainSpecificAnalyzer = Unchecked.defaultof<DomainSpecificToken -> obj>

let analyzeDomainSpecificLanguage token = domainSpecificAnalyzer token

let analyzeDomainSpecificSource token startPos = 
    try
      analyzeDomainSpecificLanguage token
    with
      | DomainSpecificParseException(fString, pos) -> failwithf "%s at pos: %u" fString (startPos)

let analyzeDomainSpecificSingleSource src pos = 
    analyzeDomainSpecificSource (SRefValueSrc(src)) pos |> SRefValue

let analyzeDomainSpecificSources sources = 
    let rec analyzeDomainSpecificSourcesInternal sources state = 
        match sources with
          | [] -> state
          | (src, pos)::t -> analyzeDomainSpecificSourcesInternal t ((analyzeDomainSpecificSource (MRefValueSrc(src)) pos)::state)
        
    analyzeDomainSpecificSourcesInternal sources [] 
    |> List.rev 
    |> MRefValue


# 35 "TexParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | PI
  | EULERNUM
  | FRAC
  | SQRT
  | SUM
  | PROD
  | INTEGRAL
  | TIMES
  | INFTY
  | TO
  | LIM
  | BMOD
  | PLUS
  | SUB
  | MUL
  | DIV
  | LSQBRACE
  | RSQBRACE
  | LPAREN
  | RPAREN
  | LCURLY
  | RCURLY
  | EXCL
  | CARET
  | EQ
  | UNDERSCORE
  | SLASH
  | COMMA
  | LSREFBRACKET
  | RSREFBRACKET
  | LMREFBRACKET
  | RMREFBRACKET
  | MREFVAL of ((string*int) list)
  | SREFVAL of (string*int)
  | ID of (string)
  | DIFF of (string)
  | INT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_PI
    | TOKEN_EULERNUM
    | TOKEN_FRAC
    | TOKEN_SQRT
    | TOKEN_SUM
    | TOKEN_PROD
    | TOKEN_INTEGRAL
    | TOKEN_TIMES
    | TOKEN_INFTY
    | TOKEN_TO
    | TOKEN_LIM
    | TOKEN_BMOD
    | TOKEN_PLUS
    | TOKEN_SUB
    | TOKEN_MUL
    | TOKEN_DIV
    | TOKEN_LSQBRACE
    | TOKEN_RSQBRACE
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LCURLY
    | TOKEN_RCURLY
    | TOKEN_EXCL
    | TOKEN_CARET
    | TOKEN_EQ
    | TOKEN_UNDERSCORE
    | TOKEN_SLASH
    | TOKEN_COMMA
    | TOKEN_LSREFBRACKET
    | TOKEN_RSREFBRACKET
    | TOKEN_LMREFBRACKET
    | TOKEN_RMREFBRACKET
    | TOKEN_MREFVAL
    | TOKEN_SREFVAL
    | TOKEN_ID
    | TOKEN_DIFF
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_expression
    | NONTERM_constant
    | NONTERM_sum
    | NONTERM_prod
    | NONTERM_fact
    | NONTERM_frac
    | NONTERM_power
    | NONTERM_integral
    | NONTERM_limit
    | NONTERM_refValue
    | NONTERM_lowPriorityBinaryOperator
    | NONTERM_mediumPriorityBinaryOperator
    | NONTERM_highPriorityFunction
    | NONTERM_mediumPriorityBinaryExpression
    | NONTERM_lowPriorityBinaryExpression
    | NONTERM_argumentSet

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | PI  -> 1 
  | EULERNUM  -> 2 
  | FRAC  -> 3 
  | SQRT  -> 4 
  | SUM  -> 5 
  | PROD  -> 6 
  | INTEGRAL  -> 7 
  | TIMES  -> 8 
  | INFTY  -> 9 
  | TO  -> 10 
  | LIM  -> 11 
  | BMOD  -> 12 
  | PLUS  -> 13 
  | SUB  -> 14 
  | MUL  -> 15 
  | DIV  -> 16 
  | LSQBRACE  -> 17 
  | RSQBRACE  -> 18 
  | LPAREN  -> 19 
  | RPAREN  -> 20 
  | LCURLY  -> 21 
  | RCURLY  -> 22 
  | EXCL  -> 23 
  | CARET  -> 24 
  | EQ  -> 25 
  | UNDERSCORE  -> 26 
  | SLASH  -> 27 
  | COMMA  -> 28 
  | LSREFBRACKET  -> 29 
  | RSREFBRACKET  -> 30 
  | LMREFBRACKET  -> 31 
  | RMREFBRACKET  -> 32 
  | MREFVAL _ -> 33 
  | SREFVAL _ -> 34 
  | ID _ -> 35 
  | DIFF _ -> 36 
  | INT _ -> 37 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_PI 
  | 2 -> TOKEN_EULERNUM 
  | 3 -> TOKEN_FRAC 
  | 4 -> TOKEN_SQRT 
  | 5 -> TOKEN_SUM 
  | 6 -> TOKEN_PROD 
  | 7 -> TOKEN_INTEGRAL 
  | 8 -> TOKEN_TIMES 
  | 9 -> TOKEN_INFTY 
  | 10 -> TOKEN_TO 
  | 11 -> TOKEN_LIM 
  | 12 -> TOKEN_BMOD 
  | 13 -> TOKEN_PLUS 
  | 14 -> TOKEN_SUB 
  | 15 -> TOKEN_MUL 
  | 16 -> TOKEN_DIV 
  | 17 -> TOKEN_LSQBRACE 
  | 18 -> TOKEN_RSQBRACE 
  | 19 -> TOKEN_LPAREN 
  | 20 -> TOKEN_RPAREN 
  | 21 -> TOKEN_LCURLY 
  | 22 -> TOKEN_RCURLY 
  | 23 -> TOKEN_EXCL 
  | 24 -> TOKEN_CARET 
  | 25 -> TOKEN_EQ 
  | 26 -> TOKEN_UNDERSCORE 
  | 27 -> TOKEN_SLASH 
  | 28 -> TOKEN_COMMA 
  | 29 -> TOKEN_LSREFBRACKET 
  | 30 -> TOKEN_RSREFBRACKET 
  | 31 -> TOKEN_LMREFBRACKET 
  | 32 -> TOKEN_RMREFBRACKET 
  | 33 -> TOKEN_MREFVAL 
  | 34 -> TOKEN_SREFVAL 
  | 35 -> TOKEN_ID 
  | 36 -> TOKEN_DIFF 
  | 37 -> TOKEN_INT 
  | 40 -> TOKEN_end_of_input
  | 38 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_expression 
    | 3 -> NONTERM_expression 
    | 4 -> NONTERM_expression 
    | 5 -> NONTERM_constant 
    | 6 -> NONTERM_constant 
    | 7 -> NONTERM_sum 
    | 8 -> NONTERM_sum 
    | 9 -> NONTERM_sum 
    | 10 -> NONTERM_sum 
    | 11 -> NONTERM_prod 
    | 12 -> NONTERM_fact 
    | 13 -> NONTERM_frac 
    | 14 -> NONTERM_power 
    | 15 -> NONTERM_integral 
    | 16 -> NONTERM_limit 
    | 17 -> NONTERM_refValue 
    | 18 -> NONTERM_refValue 
    | 19 -> NONTERM_lowPriorityBinaryOperator 
    | 20 -> NONTERM_lowPriorityBinaryOperator 
    | 21 -> NONTERM_mediumPriorityBinaryOperator 
    | 22 -> NONTERM_mediumPriorityBinaryOperator 
    | 23 -> NONTERM_highPriorityFunction 
    | 24 -> NONTERM_highPriorityFunction 
    | 25 -> NONTERM_highPriorityFunction 
    | 26 -> NONTERM_highPriorityFunction 
    | 27 -> NONTERM_highPriorityFunction 
    | 28 -> NONTERM_highPriorityFunction 
    | 29 -> NONTERM_highPriorityFunction 
    | 30 -> NONTERM_highPriorityFunction 
    | 31 -> NONTERM_highPriorityFunction 
    | 32 -> NONTERM_highPriorityFunction 
    | 33 -> NONTERM_highPriorityFunction 
    | 34 -> NONTERM_highPriorityFunction 
    | 35 -> NONTERM_highPriorityFunction 
    | 36 -> NONTERM_mediumPriorityBinaryExpression 
    | 37 -> NONTERM_mediumPriorityBinaryExpression 
    | 38 -> NONTERM_lowPriorityBinaryExpression 
    | 39 -> NONTERM_argumentSet 
    | 40 -> NONTERM_argumentSet 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 40 
let _fsyacc_tagOfErrorTerminal = 38

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | PI  -> "PI" 
  | EULERNUM  -> "EULERNUM" 
  | FRAC  -> "FRAC" 
  | SQRT  -> "SQRT" 
  | SUM  -> "SUM" 
  | PROD  -> "PROD" 
  | INTEGRAL  -> "INTEGRAL" 
  | TIMES  -> "TIMES" 
  | INFTY  -> "INFTY" 
  | TO  -> "TO" 
  | LIM  -> "LIM" 
  | BMOD  -> "BMOD" 
  | PLUS  -> "PLUS" 
  | SUB  -> "SUB" 
  | MUL  -> "MUL" 
  | DIV  -> "DIV" 
  | LSQBRACE  -> "LSQBRACE" 
  | RSQBRACE  -> "RSQBRACE" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | LCURLY  -> "LCURLY" 
  | RCURLY  -> "RCURLY" 
  | EXCL  -> "EXCL" 
  | CARET  -> "CARET" 
  | EQ  -> "EQ" 
  | UNDERSCORE  -> "UNDERSCORE" 
  | SLASH  -> "SLASH" 
  | COMMA  -> "COMMA" 
  | LSREFBRACKET  -> "LSREFBRACKET" 
  | RSREFBRACKET  -> "RSREFBRACKET" 
  | LMREFBRACKET  -> "LMREFBRACKET" 
  | RMREFBRACKET  -> "RMREFBRACKET" 
  | MREFVAL _ -> "MREFVAL" 
  | SREFVAL _ -> "SREFVAL" 
  | ID _ -> "ID" 
  | DIFF _ -> "DIFF" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | PI  -> (null : System.Object) 
  | EULERNUM  -> (null : System.Object) 
  | FRAC  -> (null : System.Object) 
  | SQRT  -> (null : System.Object) 
  | SUM  -> (null : System.Object) 
  | PROD  -> (null : System.Object) 
  | INTEGRAL  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | INFTY  -> (null : System.Object) 
  | TO  -> (null : System.Object) 
  | LIM  -> (null : System.Object) 
  | BMOD  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | SUB  -> (null : System.Object) 
  | MUL  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | LSQBRACE  -> (null : System.Object) 
  | RSQBRACE  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LCURLY  -> (null : System.Object) 
  | RCURLY  -> (null : System.Object) 
  | EXCL  -> (null : System.Object) 
  | CARET  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | UNDERSCORE  -> (null : System.Object) 
  | SLASH  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | LSREFBRACKET  -> (null : System.Object) 
  | RSREFBRACKET  -> (null : System.Object) 
  | LMREFBRACKET  -> (null : System.Object) 
  | RMREFBRACKET  -> (null : System.Object) 
  | MREFVAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SREFVAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DIFF _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 18us; 65535us; 0us; 2us; 11us; 103us; 22us; 103us; 25us; 103us; 32us; 103us; 36us; 103us; 43us; 44us; 46us; 47us; 49us; 50us; 53us; 54us; 58us; 59us; 62us; 63us; 65us; 66us; 73us; 74us; 76us; 77us; 86us; 87us; 105us; 102us; 106us; 104us; 20us; 65535us; 0us; 93us; 11us; 93us; 22us; 93us; 25us; 93us; 32us; 93us; 36us; 93us; 43us; 93us; 46us; 93us; 49us; 93us; 53us; 93us; 58us; 93us; 62us; 93us; 65us; 93us; 73us; 93us; 76us; 93us; 86us; 93us; 100us; 93us; 101us; 93us; 105us; 93us; 106us; 93us; 20us; 65535us; 0us; 89us; 11us; 89us; 22us; 89us; 25us; 89us; 32us; 89us; 36us; 89us; 43us; 89us; 46us; 89us; 49us; 89us; 53us; 89us; 58us; 89us; 62us; 89us; 65us; 89us; 73us; 89us; 76us; 89us; 86us; 89us; 100us; 89us; 101us; 89us; 105us; 89us; 106us; 89us; 20us; 65535us; 0us; 90us; 11us; 90us; 22us; 90us; 25us; 90us; 32us; 90us; 36us; 90us; 43us; 90us; 46us; 90us; 49us; 90us; 53us; 90us; 58us; 90us; 62us; 90us; 65us; 90us; 73us; 90us; 76us; 90us; 86us; 90us; 100us; 90us; 101us; 90us; 105us; 90us; 106us; 90us; 20us; 65535us; 0us; 91us; 11us; 91us; 22us; 91us; 25us; 91us; 32us; 91us; 36us; 91us; 43us; 91us; 46us; 91us; 49us; 91us; 53us; 91us; 58us; 91us; 62us; 91us; 65us; 91us; 73us; 91us; 76us; 91us; 86us; 91us; 100us; 91us; 101us; 91us; 105us; 91us; 106us; 91us; 20us; 65535us; 0us; 95us; 11us; 95us; 22us; 95us; 25us; 95us; 32us; 95us; 36us; 95us; 43us; 95us; 46us; 95us; 49us; 95us; 53us; 95us; 58us; 95us; 62us; 95us; 65us; 95us; 73us; 95us; 76us; 95us; 86us; 95us; 100us; 95us; 101us; 95us; 105us; 95us; 106us; 95us; 20us; 65535us; 0us; 94us; 11us; 94us; 22us; 94us; 25us; 94us; 32us; 94us; 36us; 94us; 43us; 94us; 46us; 94us; 49us; 94us; 53us; 94us; 58us; 94us; 62us; 94us; 65us; 94us; 73us; 94us; 76us; 94us; 86us; 94us; 100us; 94us; 101us; 94us; 105us; 94us; 106us; 94us; 20us; 65535us; 0us; 92us; 11us; 92us; 22us; 92us; 25us; 92us; 32us; 92us; 36us; 92us; 43us; 92us; 46us; 92us; 49us; 92us; 53us; 92us; 58us; 92us; 62us; 92us; 65us; 92us; 73us; 92us; 76us; 92us; 86us; 92us; 100us; 92us; 101us; 92us; 105us; 92us; 106us; 92us; 20us; 65535us; 0us; 96us; 11us; 96us; 22us; 96us; 25us; 96us; 32us; 96us; 36us; 96us; 43us; 96us; 46us; 96us; 49us; 96us; 53us; 96us; 58us; 96us; 62us; 96us; 65us; 96us; 73us; 96us; 76us; 96us; 86us; 96us; 100us; 96us; 101us; 96us; 105us; 96us; 106us; 96us; 20us; 65535us; 0us; 97us; 11us; 97us; 22us; 97us; 25us; 97us; 32us; 97us; 36us; 97us; 43us; 97us; 46us; 97us; 49us; 97us; 53us; 97us; 58us; 97us; 62us; 97us; 65us; 97us; 73us; 97us; 76us; 97us; 86us; 97us; 100us; 97us; 101us; 97us; 105us; 97us; 106us; 97us; 14us; 65535us; 2us; 105us; 44us; 105us; 47us; 105us; 50us; 105us; 54us; 105us; 59us; 105us; 63us; 105us; 66us; 105us; 74us; 105us; 77us; 105us; 87us; 105us; 102us; 105us; 103us; 105us; 104us; 105us; 2us; 65535us; 5us; 101us; 6us; 100us; 20us; 65535us; 0us; 6us; 11us; 6us; 22us; 6us; 25us; 6us; 32us; 6us; 36us; 6us; 43us; 6us; 46us; 6us; 49us; 6us; 53us; 6us; 58us; 6us; 62us; 6us; 65us; 6us; 73us; 6us; 76us; 6us; 86us; 6us; 100us; 39us; 101us; 40us; 105us; 6us; 106us; 6us; 18us; 65535us; 0us; 5us; 11us; 5us; 22us; 5us; 25us; 5us; 32us; 5us; 36us; 5us; 43us; 5us; 46us; 5us; 49us; 5us; 53us; 5us; 58us; 5us; 62us; 5us; 65us; 5us; 73us; 5us; 76us; 5us; 86us; 5us; 105us; 5us; 106us; 5us; 18us; 65535us; 0us; 4us; 11us; 4us; 22us; 4us; 25us; 4us; 32us; 4us; 36us; 4us; 43us; 4us; 46us; 4us; 49us; 4us; 53us; 4us; 58us; 4us; 62us; 4us; 65us; 4us; 73us; 4us; 76us; 4us; 86us; 4us; 105us; 4us; 106us; 4us; 5us; 65535us; 11us; 12us; 22us; 23us; 25us; 26us; 32us; 33us; 36us; 37us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 22us; 43us; 64us; 85us; 106us; 127us; 148us; 169us; 190us; 211us; 226us; 229us; 250us; 269us; 288us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 38us; 1us; 1us; 1us; 2us; 2us; 3us; 37us; 3us; 4us; 12us; 36us; 1us; 5us; 1us; 6us; 8us; 7us; 8us; 9us; 10us; 11us; 13us; 15us; 16us; 4us; 7us; 8us; 9us; 10us; 1us; 7us; 2us; 7us; 40us; 1us; 7us; 2us; 8us; 9us; 2us; 8us; 9us; 2us; 8us; 9us; 2us; 8us; 9us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 8us; 2us; 8us; 40us; 1us; 8us; 1us; 9us; 2us; 9us; 40us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 10us; 2us; 10us; 40us; 1us; 10us; 1us; 11us; 1us; 11us; 2us; 11us; 40us; 1us; 11us; 2us; 12us; 36us; 2us; 12us; 37us; 1us; 12us; 1us; 13us; 1us; 13us; 2us; 13us; 38us; 1us; 13us; 1us; 13us; 2us; 13us; 38us; 1us; 13us; 1us; 14us; 2us; 14us; 38us; 1us; 14us; 1us; 14us; 1us; 14us; 2us; 14us; 38us; 1us; 14us; 1us; 15us; 1us; 15us; 1us; 15us; 2us; 15us; 38us; 1us; 15us; 1us; 15us; 1us; 15us; 2us; 15us; 38us; 1us; 15us; 1us; 15us; 2us; 15us; 38us; 1us; 15us; 1us; 15us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 16us; 2us; 16us; 38us; 1us; 16us; 1us; 16us; 2us; 16us; 38us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 2us; 24us; 38us; 1us; 24us; 1us; 25us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 33us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 37us; 2us; 38us; 38us; 2us; 38us; 39us; 2us; 38us; 40us; 1us; 38us; 1us; 40us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 9us; 11us; 14us; 18us; 20us; 22us; 31us; 36us; 38us; 41us; 43us; 46us; 49us; 52us; 55us; 57us; 59us; 61us; 63us; 65us; 68us; 70us; 72us; 75us; 77us; 79us; 81us; 83us; 85us; 87us; 90us; 92us; 94us; 96us; 99us; 101us; 104us; 107us; 109us; 111us; 113us; 116us; 118us; 120us; 123us; 125us; 127us; 130us; 132us; 134us; 136us; 139us; 141us; 143us; 145us; 147us; 150us; 152us; 154us; 156us; 159us; 161us; 163us; 166us; 168us; 170us; 172us; 174us; 176us; 178us; 180us; 183us; 185us; 187us; 190us; 192us; 194us; 196us; 198us; 200us; 202us; 204us; 206us; 208us; 211us; 213us; 215us; 217us; 219us; 221us; 223us; 225us; 227us; 229us; 231us; 233us; 235us; 237us; 239us; 242us; 245us; 248us; 250us; |]
let _fsyacc_action_rows = 107
let _fsyacc_actionTableElements = [|10us; 32768us; 1us; 7us; 2us; 8us; 19us; 86us; 21us; 49us; 27us; 9us; 33us; 80us; 34us; 79us; 35us; 98us; 36us; 99us; 37us; 85us; 0us; 49152us; 3us; 32768us; 0us; 3us; 13us; 81us; 14us; 82us; 0us; 16385us; 0us; 16386us; 2us; 16387us; 15us; 83us; 16us; 84us; 3us; 16388us; 15us; 83us; 16us; 84us; 23us; 41us; 0us; 16389us; 0us; 16390us; 5us; 32768us; 3us; 42us; 5us; 10us; 6us; 35us; 7us; 56us; 11us; 69us; 3us; 32768us; 21us; 11us; 24us; 28us; 26us; 14us; 10us; 32768us; 1us; 7us; 2us; 8us; 19us; 86us; 21us; 49us; 27us; 9us; 33us; 80us; 34us; 79us; 35us; 98us; 36us; 99us; 37us; 85us; 2us; 32768us; 22us; 13us; 28us; 106us; 0us; 16391us; 1us; 32768us; 21us; 15us; 1us; 32768us; 35us; 16us; 1us; 32768us; 22us; 17us; 2us; 32768us; 21us; 25us; 24us; 18us; 1us; 32768us; 21us; 19us; 1us; 32768us; 35us; 20us; 1us; 32768us; 22us; 21us; 1us; 32768us; 21us; 22us; 10us; 32768us; 1us; 7us; 2us; 8us; 19us; 86us; 21us; 49us; 27us; 9us; 33us; 80us; 34us; 79us; 35us; 98us; 36us; 99us; 37us; 85us; 2us; 32768us; 22us; 24us; 28us; 106us; 0us; 16392us; 10us; 32768us; 1us; 7us; 2us; 8us; 19us; 86us; 21us; 49us; 27us; 9us; 33us; 80us; 34us; 79us; 35us; 98us; 36us; 99us; 37us; 85us; 2us; 32768us; 22us; 27us; 28us; 106us; 0us; 16393us; 1us; 32768us; 21us; 29us; 1us; 32768us; 35us; 30us; 1us; 32768us; 22us; 31us; 1us; 32768us; 21us; 32us; 10us; 32768us; 1us; 7us; 2us; 8us; 19us; 86us; 21us; 49us; 27us; 9us; 33us; 80us; 34us; 79us; 35us; 98us; 36us; 99us; 37us; 85us; 2us; 32768us; 22us; 34us; 28us; 106us; 0us; 16394us; 1us; 32768us; 21us; 36us; 10us; 32768us; 1us; 7us; 2us; 8us; 19us; 86us; 21us; 49us; 27us; 9us; 33us; 80us; 34us; 79us; 35us; 98us; 36us; 99us; 37us; 85us; 2us; 32768us; 22us; 38us; 28us; 106us; 0us; 16395us; 1us; 16420us; 23us; 41us; 1us; 16421us; 23us; 41us; 0us; 16396us; 1us; 32768us; 21us; 43us; 10us; 32768us; 1us; 7us; 2us; 8us; 19us; 86us; 21us; 49us; 27us; 9us; 33us; 80us; 34us; 79us; 35us; 98us; 36us; 99us; 37us; 85us; 3us; 32768us; 13us; 81us; 14us; 82us; 22us; 45us; 1us; 32768us; 21us; 46us; 10us; 32768us; 1us; 7us; 2us; 8us; 19us; 86us; 21us; 49us; 27us; 9us; 33us; 80us; 34us; 79us; 35us; 98us; 36us; 99us; 37us; 85us; 3us; 32768us; 13us; 81us; 14us; 82us; 22us; 48us; 0us; 16397us; 10us; 32768us; 1us; 7us; 2us; 8us; 19us; 86us; 21us; 49us; 27us; 9us; 33us; 80us; 34us; 79us; 35us; 98us; 36us; 99us; 37us; 85us; 3us; 32768us; 13us; 81us; 14us; 82us; 22us; 51us; 1us; 32768us; 24us; 52us; 1us; 32768us; 21us; 53us; 10us; 32768us; 1us; 7us; 2us; 8us; 19us; 86us; 21us; 49us; 27us; 9us; 33us; 80us; 34us; 79us; 35us; 98us; 36us; 99us; 37us; 85us; 3us; 32768us; 13us; 81us; 14us; 82us; 22us; 55us; 0us; 16398us; 1us; 32768us; 26us; 57us; 1us; 32768us; 21us; 58us; 10us; 32768us; 1us; 7us; 2us; 8us; 19us; 86us; 21us; 49us; 27us; 9us; 33us; 80us; 34us; 79us; 35us; 98us; 36us; 99us; 37us; 85us; 3us; 32768us; 13us; 81us; 14us; 82us; 22us; 60us; 1us; 32768us; 24us; 61us; 1us; 32768us; 21us; 62us; 10us; 32768us; 1us; 7us; 2us; 8us; 19us; 86us; 21us; 49us; 27us; 9us; 33us; 80us; 34us; 79us; 35us; 98us; 36us; 99us; 37us; 85us; 3us; 32768us; 13us; 81us; 14us; 82us; 22us; 64us; 1us; 32768us; 21us; 65us; 10us; 32768us; 1us; 7us; 2us; 8us; 19us; 86us; 21us; 49us; 27us; 9us; 33us; 80us; 34us; 79us; 35us; 98us; 36us; 99us; 37us; 85us; 3us; 32768us; 13us; 81us; 14us; 82us; 22us; 67us; 1us; 32768us; 36us; 68us; 0us; 16399us; 1us; 32768us; 26us; 70us; 1us; 32768us; 21us; 71us; 1us; 32768us; 35us; 72us; 1us; 32768us; 10us; 73us; 10us; 32768us; 1us; 7us; 2us; 8us; 19us; 86us; 21us; 49us; 27us; 9us; 33us; 80us; 34us; 79us; 35us; 98us; 36us; 99us; 37us; 85us; 3us; 32768us; 13us; 81us; 14us; 82us; 22us; 75us; 1us; 32768us; 21us; 76us; 10us; 32768us; 1us; 7us; 2us; 8us; 19us; 86us; 21us; 49us; 27us; 9us; 33us; 80us; 34us; 79us; 35us; 98us; 36us; 99us; 37us; 85us; 3us; 32768us; 13us; 81us; 14us; 82us; 22us; 78us; 0us; 16400us; 0us; 16401us; 0us; 16402us; 0us; 16403us; 0us; 16404us; 0us; 16405us; 0us; 16406us; 0us; 16407us; 10us; 32768us; 1us; 7us; 2us; 8us; 19us; 86us; 21us; 49us; 27us; 9us; 33us; 80us; 34us; 79us; 35us; 98us; 36us; 99us; 37us; 85us; 3us; 32768us; 13us; 81us; 14us; 82us; 20us; 88us; 0us; 16408us; 0us; 16409us; 0us; 16410us; 0us; 16411us; 0us; 16412us; 0us; 16413us; 0us; 16414us; 0us; 16415us; 0us; 16416us; 0us; 16417us; 0us; 16418us; 0us; 16419us; 10us; 32768us; 1us; 7us; 2us; 8us; 19us; 86us; 21us; 49us; 27us; 9us; 33us; 80us; 34us; 79us; 35us; 98us; 36us; 99us; 37us; 85us; 10us; 32768us; 1us; 7us; 2us; 8us; 19us; 86us; 21us; 49us; 27us; 9us; 33us; 80us; 34us; 79us; 35us; 98us; 36us; 99us; 37us; 85us; 2us; 16422us; 13us; 81us; 14us; 82us; 2us; 16423us; 13us; 81us; 14us; 82us; 2us; 16424us; 13us; 81us; 14us; 82us; 10us; 32768us; 1us; 7us; 2us; 8us; 19us; 86us; 21us; 49us; 27us; 9us; 33us; 80us; 34us; 79us; 35us; 98us; 36us; 99us; 37us; 85us; 10us; 32768us; 1us; 7us; 2us; 8us; 19us; 86us; 21us; 49us; 27us; 9us; 33us; 80us; 34us; 79us; 35us; 98us; 36us; 99us; 37us; 85us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 11us; 12us; 16us; 17us; 18us; 21us; 25us; 26us; 27us; 33us; 37us; 48us; 51us; 52us; 54us; 56us; 58us; 61us; 63us; 65us; 67us; 69us; 80us; 83us; 84us; 95us; 98us; 99us; 101us; 103us; 105us; 107us; 118us; 121us; 122us; 124us; 135us; 138us; 139us; 141us; 143us; 144us; 146us; 157us; 161us; 163us; 174us; 178us; 179us; 190us; 194us; 196us; 198us; 209us; 213us; 214us; 216us; 218us; 229us; 233us; 235us; 237us; 248us; 252us; 254us; 265us; 269us; 271us; 272us; 274us; 276us; 278us; 280us; 291us; 295us; 297us; 308us; 312us; 313us; 314us; 315us; 316us; 317us; 318us; 319us; 320us; 331us; 335us; 336us; 337us; 338us; 339us; 340us; 341us; 342us; 343us; 344us; 345us; 346us; 347us; 358us; 369us; 372us; 375us; 378us; 389us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 1us; 1us; 1us; 1us; 5us; 13us; 9us; 9us; 5us; 2us; 8us; 7us; 14us; 11us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 3us; 3us; 1us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 3us; 3us; 4us; 4us; 4us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 11us; 12us; 12us; 13us; 13us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 15us; 15us; 16us; 17us; 17us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 65535us; 65535us; 16389us; 16390us; 65535us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16392us; 65535us; 65535us; 16393us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16394us; 65535us; 65535us; 65535us; 16395us; 65535us; 65535us; 16396us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16397us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16398us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16399us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16400us; 16401us; 16402us; 16403us; 16404us; 16405us; 16406us; 16407us; 65535us; 65535us; 16408us; 16409us; 16410us; 16411us; 16412us; 16413us; 16414us; 16415us; 16416us; 16417us; 16418us; 16419us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; |]
let _fsyacc_reductions ()  =    [| 
# 369 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : TexAst.Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 378 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "TexParser.fsy"
                                       _1 
                   )
# 49 "TexParser.fsy"
                 : TexAst.Expr));
# 389 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'lowPriorityBinaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "TexParser.fsy"
                                                            _1 
                   )
# 52 "TexParser.fsy"
                 : 'expression));
# 400 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'mediumPriorityBinaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "TexParser.fsy"
                                                            _1 
                   )
# 53 "TexParser.fsy"
                 : 'expression));
# 411 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'highPriorityFunction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "TexParser.fsy"
                                                         _1 
                   )
# 54 "TexParser.fsy"
                 : 'expression));
# 422 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "TexParser.fsy"
                                   Constant(Pi) 
                   )
# 57 "TexParser.fsy"
                 : 'constant));
# 432 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "TexParser.fsy"
                                   Constant(E) 
                   )
# 58 "TexParser.fsy"
                 : 'constant));
# 442 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "TexParser.fsy"
                                                                                                                     Sum(None, None, List.rev _4) 
                   )
# 61 "TexParser.fsy"
                 : 'sum));
# 453 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _12 = (let data = parseState.GetInput(12) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "TexParser.fsy"
                                                                                                                     Sum(Some(_5), Some(_9), List.rev _12) 
                   )
# 62 "TexParser.fsy"
                 : 'sum));
# 466 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "TexParser.fsy"
                                                                                                                     Sum(Some(_5), None, List.rev _8) 
                   )
# 63 "TexParser.fsy"
                 : 'sum));
# 478 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "TexParser.fsy"
                                                                                                                     Sum(None, Some(_5), List.rev _8) 
                   )
# 64 "TexParser.fsy"
                 : 'sum));
# 490 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "TexParser.fsy"
                                                                Prod(List.rev _4) 
                   )
# 67 "TexParser.fsy"
                 : 'prod));
# 501 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'highPriorityFunction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "TexParser.fsy"
                                                      Fact(_1) 
                   )
# 70 "TexParser.fsy"
                 : 'fact));
# 512 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "TexParser.fsy"
                                                                                          Div(_4, _7) 
                   )
# 73 "TexParser.fsy"
                 : 'frac));
# 524 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "TexParser.fsy"
                                                                                    Pow(_2, _6) 
                   )
# 76 "TexParser.fsy"
                 : 'power));
# 536 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _12 = (let data = parseState.GetInput(12) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _14 = (let data = parseState.GetInput(14) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "TexParser.fsy"
                                                                                                                           Integral(_12, _14, _5, _9) 
                   )
# 80 "TexParser.fsy"
                 : 'integral));
# 550 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "TexParser.fsy"
                                                                                                         Lim(_10, _5, _7) 
                   )
# 83 "TexParser.fsy"
                 : 'limit));
# 563 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string*int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "TexParser.fsy"
                                          analyzeDomainSpecificSingleSource (fst _1) (snd _1) |> DsAst 
                   )
# 86 "TexParser.fsy"
                 : 'refValue));
# 574 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : (string*int) list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "TexParser.fsy"
                                       analyzeDomainSpecificSources _1 |> DsAst 
                   )
# 87 "TexParser.fsy"
                 : 'refValue));
# 585 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "TexParser.fsy"
                                   PLUS 
                   )
# 90 "TexParser.fsy"
                 : 'lowPriorityBinaryOperator));
# 595 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "TexParser.fsy"
                                   SUB 
                   )
# 91 "TexParser.fsy"
                 : 'lowPriorityBinaryOperator));
# 605 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "TexParser.fsy"
                                   MUL 
                   )
# 94 "TexParser.fsy"
                 : 'mediumPriorityBinaryOperator));
# 615 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "TexParser.fsy"
                                   DIV 
                   )
# 95 "TexParser.fsy"
                 : 'mediumPriorityBinaryOperator));
# 625 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "TexParser.fsy"
                                                        Int(_1) 
                   )
# 98 "TexParser.fsy"
                 : 'highPriorityFunction));
# 636 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "TexParser.fsy"
                                                        _2 
                   )
# 99 "TexParser.fsy"
                 : 'highPriorityFunction));
# 647 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'sum)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "TexParser.fsy"
                                                     _1 
                   )
# 100 "TexParser.fsy"
                 : 'highPriorityFunction));
# 658 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'prod)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "TexParser.fsy"
                                                     _1 
                   )
# 101 "TexParser.fsy"
                 : 'highPriorityFunction));
# 669 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fact)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "TexParser.fsy"
                                                     _1 
                   )
# 102 "TexParser.fsy"
                 : 'highPriorityFunction));
# 680 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'integral)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "TexParser.fsy"
                                                     _1 
                   )
# 103 "TexParser.fsy"
                 : 'highPriorityFunction));
# 691 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'constant)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "TexParser.fsy"
                                                     _1 
                   )
# 104 "TexParser.fsy"
                 : 'highPriorityFunction));
# 702 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'power)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "TexParser.fsy"
                                                        _1 
                   )
# 105 "TexParser.fsy"
                 : 'highPriorityFunction));
# 713 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'frac)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "TexParser.fsy"
                                                        _1 
                   )
# 106 "TexParser.fsy"
                 : 'highPriorityFunction));
# 724 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'limit)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "TexParser.fsy"
                                                     _1 
                   )
# 107 "TexParser.fsy"
                 : 'highPriorityFunction));
# 735 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'refValue)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "TexParser.fsy"
                                                     _1 
                   )
# 108 "TexParser.fsy"
                 : 'highPriorityFunction));
# 746 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "TexParser.fsy"
                                                     Var(_1) 
                   )
# 109 "TexParser.fsy"
                 : 'highPriorityFunction));
# 757 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "TexParser.fsy"
                                                     Diff(_1) 
                   )
# 110 "TexParser.fsy"
                 : 'highPriorityFunction));
# 768 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'highPriorityFunction)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'mediumPriorityBinaryOperator)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'highPriorityFunction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "TexParser.fsy"
                                                                                 
                                                                                   match _2 with
                                                                                       | MUL -> Mul(_1, _3)
                                                                                       | DIV -> Div(_1, _3)
                                                                               
                   )
# 114 "TexParser.fsy"
                 : 'mediumPriorityBinaryExpression));
# 785 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'mediumPriorityBinaryExpression)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'mediumPriorityBinaryOperator)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'highPriorityFunction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "TexParser.fsy"
                                                                                 
                                                                                   match _2 with
                                                                                       | MUL -> Mul(_1, _3)
                                                                                       | DIV -> Div(_1, _3)
                                                                               
                   )
# 120 "TexParser.fsy"
                 : 'mediumPriorityBinaryExpression));
# 802 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'lowPriorityBinaryOperator)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "TexParser.fsy"
                                                                                 
                                                                                 match _2 with
                                                                                    | PLUS -> Plus(_1, _3)
                                                                                    | SUB -> Sub(_1, _3)
                                                                               
                   )
# 127 "TexParser.fsy"
                 : 'lowPriorityBinaryExpression));
# 819 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "TexParser.fsy"
                                         [_1] 
                   )
# 134 "TexParser.fsy"
                 : 'argumentSet));
# 830 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "TexParser.fsy"
                                                       _3::_1 
                   )
# 135 "TexParser.fsy"
                 : 'argumentSet));
|]
# 843 "TexParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 41;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : TexAst.Expr =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
