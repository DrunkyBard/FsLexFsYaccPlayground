// Implementation file for parser generated by fsyacc
module TexParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "TexParser.fsy"

open TexAst
open Microsoft.FSharp.Text.Lexing

# 11 "TexParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | FRAC
  | SQRT
  | SUM
  | PROD
  | INTEGRAL
  | TIMES
  | INFTY
  | TO
  | LIM
  | BMOD
  | PLUS
  | SUB
  | MUL
  | DIV
  | LSQBRACE
  | RSQBRACE
  | LPAREN
  | RPAREN
  | LCURLY
  | RCURLY
  | EXCL
  | CARET
  | EQ
  | UNDERSCORE
  | SLASH
  | COMMA
  | INT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_FRAC
    | TOKEN_SQRT
    | TOKEN_SUM
    | TOKEN_PROD
    | TOKEN_INTEGRAL
    | TOKEN_TIMES
    | TOKEN_INFTY
    | TOKEN_TO
    | TOKEN_LIM
    | TOKEN_BMOD
    | TOKEN_PLUS
    | TOKEN_SUB
    | TOKEN_MUL
    | TOKEN_DIV
    | TOKEN_LSQBRACE
    | TOKEN_RSQBRACE
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LCURLY
    | TOKEN_RCURLY
    | TOKEN_EXCL
    | TOKEN_CARET
    | TOKEN_EQ
    | TOKEN_UNDERSCORE
    | TOKEN_SLASH
    | TOKEN_COMMA
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_expression
    | NONTERM_sum
    | NONTERM_prod
    | NONTERM_fact
    | NONTERM_lowPriorityBinaryOperator
    | NONTERM_mediumPriorityBinaryOperator
    | NONTERM_highPriorityFunction
    | NONTERM_lowPriorityBinaryExpression
    | NONTERM_mediumPriorityBinaryExpression
    | NONTERM_argumentSet

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | FRAC  -> 1 
  | SQRT  -> 2 
  | SUM  -> 3 
  | PROD  -> 4 
  | INTEGRAL  -> 5 
  | TIMES  -> 6 
  | INFTY  -> 7 
  | TO  -> 8 
  | LIM  -> 9 
  | BMOD  -> 10 
  | PLUS  -> 11 
  | SUB  -> 12 
  | MUL  -> 13 
  | DIV  -> 14 
  | LSQBRACE  -> 15 
  | RSQBRACE  -> 16 
  | LPAREN  -> 17 
  | RPAREN  -> 18 
  | LCURLY  -> 19 
  | RCURLY  -> 20 
  | EXCL  -> 21 
  | CARET  -> 22 
  | EQ  -> 23 
  | UNDERSCORE  -> 24 
  | SLASH  -> 25 
  | COMMA  -> 26 
  | INT _ -> 27 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_FRAC 
  | 2 -> TOKEN_SQRT 
  | 3 -> TOKEN_SUM 
  | 4 -> TOKEN_PROD 
  | 5 -> TOKEN_INTEGRAL 
  | 6 -> TOKEN_TIMES 
  | 7 -> TOKEN_INFTY 
  | 8 -> TOKEN_TO 
  | 9 -> TOKEN_LIM 
  | 10 -> TOKEN_BMOD 
  | 11 -> TOKEN_PLUS 
  | 12 -> TOKEN_SUB 
  | 13 -> TOKEN_MUL 
  | 14 -> TOKEN_DIV 
  | 15 -> TOKEN_LSQBRACE 
  | 16 -> TOKEN_RSQBRACE 
  | 17 -> TOKEN_LPAREN 
  | 18 -> TOKEN_RPAREN 
  | 19 -> TOKEN_LCURLY 
  | 20 -> TOKEN_RCURLY 
  | 21 -> TOKEN_EXCL 
  | 22 -> TOKEN_CARET 
  | 23 -> TOKEN_EQ 
  | 24 -> TOKEN_UNDERSCORE 
  | 25 -> TOKEN_SLASH 
  | 26 -> TOKEN_COMMA 
  | 27 -> TOKEN_INT 
  | 30 -> TOKEN_end_of_input
  | 28 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_expression 
    | 3 -> NONTERM_expression 
    | 4 -> NONTERM_expression 
    | 5 -> NONTERM_sum 
    | 6 -> NONTERM_prod 
    | 7 -> NONTERM_fact 
    | 8 -> NONTERM_lowPriorityBinaryOperator 
    | 9 -> NONTERM_lowPriorityBinaryOperator 
    | 10 -> NONTERM_mediumPriorityBinaryOperator 
    | 11 -> NONTERM_mediumPriorityBinaryOperator 
    | 12 -> NONTERM_highPriorityFunction 
    | 13 -> NONTERM_highPriorityFunction 
    | 14 -> NONTERM_highPriorityFunction 
    | 15 -> NONTERM_highPriorityFunction 
    | 16 -> NONTERM_highPriorityFunction 
    | 17 -> NONTERM_lowPriorityBinaryExpression 
    | 18 -> NONTERM_lowPriorityBinaryExpression 
    | 19 -> NONTERM_lowPriorityBinaryExpression 
    | 20 -> NONTERM_mediumPriorityBinaryExpression 
    | 21 -> NONTERM_argumentSet 
    | 22 -> NONTERM_argumentSet 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 30 
let _fsyacc_tagOfErrorTerminal = 28

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | FRAC  -> "FRAC" 
  | SQRT  -> "SQRT" 
  | SUM  -> "SUM" 
  | PROD  -> "PROD" 
  | INTEGRAL  -> "INTEGRAL" 
  | TIMES  -> "TIMES" 
  | INFTY  -> "INFTY" 
  | TO  -> "TO" 
  | LIM  -> "LIM" 
  | BMOD  -> "BMOD" 
  | PLUS  -> "PLUS" 
  | SUB  -> "SUB" 
  | MUL  -> "MUL" 
  | DIV  -> "DIV" 
  | LSQBRACE  -> "LSQBRACE" 
  | RSQBRACE  -> "RSQBRACE" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | LCURLY  -> "LCURLY" 
  | RCURLY  -> "RCURLY" 
  | EXCL  -> "EXCL" 
  | CARET  -> "CARET" 
  | EQ  -> "EQ" 
  | UNDERSCORE  -> "UNDERSCORE" 
  | SLASH  -> "SLASH" 
  | COMMA  -> "COMMA" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | FRAC  -> (null : System.Object) 
  | SQRT  -> (null : System.Object) 
  | SUM  -> (null : System.Object) 
  | PROD  -> (null : System.Object) 
  | INTEGRAL  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | INFTY  -> (null : System.Object) 
  | TO  -> (null : System.Object) 
  | LIM  -> (null : System.Object) 
  | BMOD  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | SUB  -> (null : System.Object) 
  | MUL  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | LSQBRACE  -> (null : System.Object) 
  | RSQBRACE  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LCURLY  -> (null : System.Object) 
  | RCURLY  -> (null : System.Object) 
  | EXCL  -> (null : System.Object) 
  | CARET  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | UNDERSCORE  -> (null : System.Object) 
  | SLASH  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 6us; 65535us; 0us; 2us; 9us; 34us; 13us; 34us; 25us; 26us; 31us; 32us; 38us; 35us; 9us; 65535us; 0us; 28us; 9us; 28us; 13us; 28us; 25us; 28us; 31us; 28us; 33us; 28us; 36us; 28us; 37us; 28us; 38us; 28us; 9us; 65535us; 0us; 29us; 9us; 29us; 13us; 29us; 25us; 29us; 31us; 29us; 33us; 29us; 36us; 29us; 37us; 29us; 38us; 29us; 9us; 65535us; 0us; 30us; 9us; 30us; 13us; 30us; 25us; 30us; 31us; 30us; 33us; 30us; 36us; 30us; 37us; 30us; 38us; 30us; 7us; 65535us; 2us; 36us; 5us; 31us; 6us; 33us; 26us; 36us; 32us; 36us; 34us; 36us; 35us; 36us; 5us; 65535us; 2us; 37us; 26us; 37us; 32us; 37us; 34us; 37us; 35us; 37us; 9us; 65535us; 0us; 6us; 9us; 6us; 13us; 6us; 25us; 6us; 31us; 6us; 33us; 16us; 36us; 17us; 37us; 18us; 38us; 6us; 6us; 65535us; 0us; 4us; 9us; 4us; 13us; 4us; 25us; 4us; 31us; 4us; 38us; 4us; 6us; 65535us; 0us; 5us; 9us; 5us; 13us; 5us; 25us; 5us; 31us; 5us; 38us; 5us; 2us; 65535us; 9us; 10us; 13us; 14us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 10us; 20us; 30us; 40us; 48us; 54us; 64us; 71us; 78us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 3us; 1us; 19us; 20us; 1us; 1us; 1us; 2us; 2us; 3us; 17us; 3us; 4us; 7us; 18us; 2us; 5us; 6us; 1us; 5us; 1us; 5us; 2us; 5us; 22us; 1us; 5us; 1us; 6us; 1us; 6us; 2us; 6us; 22us; 1us; 6us; 2us; 7us; 18us; 2us; 7us; 19us; 2us; 7us; 20us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 3us; 13us; 19us; 20us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 3us; 17us; 19us; 20us; 1us; 18us; 3us; 19us; 20us; 21us; 3us; 19us; 20us; 22us; 1us; 19us; 1us; 20us; 1us; 22us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 8us; 10us; 12us; 15us; 19us; 22us; 24us; 26us; 29us; 31us; 33us; 35us; 38us; 40us; 43us; 46us; 49us; 51us; 53us; 55us; 57us; 59us; 61us; 63us; 67us; 69us; 71us; 73us; 75us; 77us; 81us; 83us; 87us; 91us; 93us; 95us; |]
let _fsyacc_action_rows = 39
let _fsyacc_actionTableElements = [|3us; 32768us; 17us; 25us; 25us; 7us; 27us; 24us; 0us; 49152us; 5us; 32768us; 0us; 3us; 11us; 20us; 12us; 21us; 13us; 22us; 14us; 23us; 0us; 16385us; 0us; 16386us; 2us; 16387us; 11us; 20us; 12us; 21us; 3us; 16388us; 11us; 20us; 12us; 21us; 21us; 19us; 2us; 32768us; 3us; 8us; 4us; 12us; 1us; 32768us; 19us; 9us; 3us; 32768us; 17us; 25us; 25us; 7us; 27us; 24us; 2us; 32768us; 20us; 11us; 26us; 38us; 0us; 16389us; 1us; 32768us; 19us; 13us; 3us; 32768us; 17us; 25us; 25us; 7us; 27us; 24us; 2us; 32768us; 20us; 15us; 26us; 38us; 0us; 16390us; 1us; 16402us; 21us; 19us; 1us; 16403us; 21us; 19us; 1us; 16404us; 21us; 19us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 0us; 16394us; 0us; 16395us; 0us; 16396us; 3us; 32768us; 17us; 25us; 25us; 7us; 27us; 24us; 5us; 32768us; 11us; 20us; 12us; 21us; 13us; 22us; 14us; 23us; 18us; 27us; 0us; 16397us; 0us; 16398us; 0us; 16399us; 0us; 16400us; 3us; 32768us; 17us; 25us; 25us; 7us; 27us; 24us; 4us; 16401us; 11us; 20us; 12us; 21us; 13us; 22us; 14us; 23us; 3us; 32768us; 17us; 25us; 25us; 7us; 27us; 24us; 4us; 16405us; 11us; 20us; 12us; 21us; 13us; 22us; 14us; 23us; 4us; 16406us; 11us; 20us; 12us; 21us; 13us; 22us; 14us; 23us; 3us; 32768us; 17us; 25us; 25us; 7us; 27us; 24us; 3us; 32768us; 17us; 25us; 25us; 7us; 27us; 24us; 3us; 32768us; 17us; 25us; 25us; 7us; 27us; 24us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 4us; 5us; 11us; 12us; 13us; 16us; 20us; 23us; 25us; 29us; 32us; 33us; 35us; 39us; 42us; 43us; 45us; 47us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 59us; 65us; 66us; 67us; 68us; 69us; 73us; 78us; 82us; 87us; 92us; 96us; 100us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 1us; 1us; 5us; 5us; 2us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 1us; 1us; 3us; 3us; 3us; 3us; 1us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 3us; 4us; 5us; 6us; 6us; 7us; 7us; 8us; 8us; 8us; 8us; 8us; 9us; 9us; 9us; 10us; 11us; 11us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16389us; 65535us; 65535us; 65535us; 16390us; 65535us; 65535us; 65535us; 16391us; 16392us; 16393us; 16394us; 16395us; 16396us; 65535us; 65535us; 16397us; 16398us; 16399us; 16400us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; |]
let _fsyacc_reductions ()  =    [| 
# 261 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : TexAst.Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 270 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 19 "TexParser.fsy"
                                       _1 
                   )
# 19 "TexParser.fsy"
                 : TexAst.Expr));
# 281 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'lowPriorityBinaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 22 "TexParser.fsy"
                                                            _1 
                   )
# 22 "TexParser.fsy"
                 : 'expression));
# 292 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'mediumPriorityBinaryExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 23 "TexParser.fsy"
                                                            _1 
                   )
# 23 "TexParser.fsy"
                 : 'expression));
# 303 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'highPriorityFunction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 24 "TexParser.fsy"
                                                         _1 
                   )
# 24 "TexParser.fsy"
                 : 'expression));
# 314 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "TexParser.fsy"
                                                                Sum(List.rev _4) 
                   )
# 27 "TexParser.fsy"
                 : 'sum));
# 325 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "TexParser.fsy"
                                                                Prod(List.rev _4) 
                   )
# 30 "TexParser.fsy"
                 : 'prod));
# 336 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'highPriorityFunction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "TexParser.fsy"
                                                      Fact(_1) 
                   )
# 33 "TexParser.fsy"
                 : 'fact));
# 347 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "TexParser.fsy"
                                   PLUS 
                   )
# 36 "TexParser.fsy"
                 : 'lowPriorityBinaryOperator));
# 357 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "TexParser.fsy"
                                   SUB 
                   )
# 37 "TexParser.fsy"
                 : 'lowPriorityBinaryOperator));
# 367 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "TexParser.fsy"
                                   MUL 
                   )
# 40 "TexParser.fsy"
                 : 'mediumPriorityBinaryOperator));
# 377 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "TexParser.fsy"
                                   DIV 
                   )
# 41 "TexParser.fsy"
                 : 'mediumPriorityBinaryOperator));
# 387 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "TexParser.fsy"
                                   Int(_1) 
                   )
# 44 "TexParser.fsy"
                 : 'highPriorityFunction));
# 398 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "TexParser.fsy"
                                                        _2 
                   )
# 45 "TexParser.fsy"
                 : 'highPriorityFunction));
# 409 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'sum)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "TexParser.fsy"
                                _1 
                   )
# 46 "TexParser.fsy"
                 : 'highPriorityFunction));
# 420 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'prod)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "TexParser.fsy"
                                _1 
                   )
# 47 "TexParser.fsy"
                 : 'highPriorityFunction));
# 431 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fact)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "TexParser.fsy"
                                _1 
                   )
# 48 "TexParser.fsy"
                 : 'highPriorityFunction));
# 442 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'mediumPriorityBinaryExpression)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'lowPriorityBinaryOperator)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "TexParser.fsy"
                                                                                                  
                                                                                                  match _2 with
                                                                                                     | PLUS -> Plus(_1, _3)
                                                                                                     | SUB -> Sub(_1, _3)
                                                                                                
                   )
# 51 "TexParser.fsy"
                 : 'lowPriorityBinaryExpression));
# 459 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'highPriorityFunction)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'lowPriorityBinaryOperator)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'highPriorityFunction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "TexParser.fsy"
                                                                                                     
                                                                                                     match _2 with
                                                                                                        | PLUS -> Plus(_1, _3)
                                                                                                        | SUB -> Sub(_1, _3)
                                                                                                   
                   )
# 56 "TexParser.fsy"
                 : 'lowPriorityBinaryExpression));
# 476 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'lowPriorityBinaryOperator)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'highPriorityFunction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "TexParser.fsy"
                                                                                        
                                                                                        match _2 with
                                                                                           | PLUS -> Plus(_1, _3)
                                                                                           | SUB -> Sub(_1, _3)
                                                                                      
                   )
# 61 "TexParser.fsy"
                 : 'lowPriorityBinaryExpression));
# 493 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'mediumPriorityBinaryOperator)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'highPriorityFunction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "TexParser.fsy"
                                                                                           
                                                                                             match _2 with
                                                                                                 | MUL -> Mul(_1, _3)
                                                                                                 | DIV -> Div(_1, _3)
                                                                                         
                   )
# 68 "TexParser.fsy"
                 : 'mediumPriorityBinaryExpression));
# 510 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "TexParser.fsy"
                                         [_1] 
                   )
# 75 "TexParser.fsy"
                 : 'argumentSet));
# 521 "TexParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentSet)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "TexParser.fsy"
                                                       _3::_1 
                   )
# 76 "TexParser.fsy"
                 : 'argumentSet));
|]
# 534 "TexParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 31;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : TexAst.Expr =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
