{
module TexLexer

open TexParser
open System
open Microsoft.FSharp.Text.Lexing
open System.Text

let lexeme = LexBuffer<_>.LexemeString
}

let plus = "+"
let sub = "-"
let mul = "*"
let div = "/"
let slash = "\\"
let lCurly = "{"
let rCurly = "}"
let lParen = "("
let rParen = ")"
let lSqBrace = "["
let rSqBrace = "]"
let excl = "!"
let caret = "^"
let eq = "="
let comma = ","
let underscore = "_"
let frac = "frac"
let sqrt = "sqrt"
let bmod = "bmod"
let sum = "sum"
let prod = "prod"
let integral = "int"
let times = "times"
let infinite = "infty"
let to = "to"
let limit = "lim"

let digit = ['0' - '9']
let char = ['a'-'z' 'A'-'Z'] 
let int = digit+
let identifier  = char+
let ignore = ' ' | '\t' | "\\," | "\\mathrm"

rule lex = parse
    | ignore        { lex lexbuf }
	| int           { INT (int (lexeme lexbuf)) }
	| plus          { PLUS }
	| sub           { SUB }
	| mul           { MUL }
	| div           { DIV }
	| caret         { CARET }
	| slash         { SLASH }
	| lParen        { LPAREN }
	| rParen        { RPAREN }
	| lCurly        { LCURLY }
	| rCurly        { RCURLY }
	| lSqBrace      { LSQBRACE }
	| rSqBrace      { RSQBRACE }
	| excl          { EXCL }
	| eq            { EQ }
	| comma         { COMMA }
	| underscore    { UNDERSCORE }
	| frac          { FRAC }
	| sqrt          { SQRT }
	| bmod          { BMOD }
	| sum           { SUM }
	| prod          { PROD }
	| integral      { INTEGRAL }
	| times         { TIMES }
	| infinite      { INFTY }
	| to            { TO }
	| limit         { LIM }
	| "d"           { diff lexbuf }
	| "e"           { EULERNUM }
	| "\\pi"        { PI }
	| "[|"          { domainSpecificSValue (new StringBuilder()) lexbuf }
	| "[||"         { domainSpecificMValue lexbuf }
	| identifier    { ID(lexeme lexbuf) }
	| eof			{ EOF }

and diff = parse
    | "{"identifier"}"    { 
                            let matched = lexeme lexbuf
                            DIFF(matched.Substring(1, matched.Length-2))
                          }

and domainSpecificSValue s = parse
    | "|]"   { ID(s.ToString()) }
    | _      { domainSpecificSValue (s.Append(lexeme lexbuf)) lexbuf  }

and domainSpecificMValue s = parse
    | "||]"  { ID(s.ToString()) }    
    | _ ","  { ID(s.ToString()) } 